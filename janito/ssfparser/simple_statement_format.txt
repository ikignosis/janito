Sequential Statement Format

Version: 1.0

Overview

This document provides a format to provide actionable statements that should be easy to interpret by both humans and automation, include in various contexts, such as structured communication files or any scenario requiring standardized documentation.

Format Elements

1. Basic Line Types

The following symbols should be considered special: "#.:/" specially when wrapping lines

The type of line is determined by these rules in order, based on the first character or pattern matched:
    1. All Lines are left stripped for whitespace, and right stripped from end of line symbols
    2. Comment: Line starting with "#" are treated as comments and ignored during execution.
    3. Statement: Line that only contains alpha numeric chars
    4. Text block: Line beginning with "."
    5. Key/Value: Line containing ":" are treated as key/value pairs
    6. Section Start: Line start with / mark the start of a section e.g /sectionName
    7. Section End: Lines ending with / mark the end of a section e.g. sectionName/
    8. Section Content: lines after /sectionName and before sectionName/ (for the same name)
    8. Empty lines should be skipped

2. Statements Format

A statement name should start with a verb optionally followed by adjectives or nouns, eg: Create File, Deploy Application.
The lines immediately after a statement and before the next statement is found are the statement parameters, to be processed as described below.
Statements can only appear:
- At the root level of the document
- Within properly defined sections
Statements cannot be directly nested under other statements.


2.1 Statement parameters can be of the following types:
    - Text Block lines
    - Key/Value lines
    - Section Lines and Section Content
    All the parameters will be made available for the statement during execution

2.1.1 Text Blocks    

    A text block is used to represent a sequence of lines that should be processed as a single text block, they should be processed per the following rules:

    - Strip the leading dot on each line - while retaining all the following content (indentation preservation)
    - When the last text block line is found, join all the lines with '\n', make the result available to the statement as the property "text"
        * the content should be available as a single string with newlines in a statement property "text"

2.1.2  Key/Value lines
    - Keys within the sequence muste be unique, if a key is found repeated, a syntax error must be reported
    - Multi-line values are not allowed, the alternative is to use a text block
    - Key names will be stripped from whitespace, they can use any UTF-8 character but they MUST not be started with a dot (reserved for text block lines)
        * the content should be available as a dictionary in a "key_values" property of the statement

2.1.3 Section Marks and Section Content
    - Section names will be stripped from whitespace, they must use alphanumeric characters
    - Section names within a statement must be unique, if a section name is found repeated, a syntax error must be reported
    - A section is represtented by a section start marker with the syntax: /sectionName
    - Sections must be closed with a section end marker with the syntax: sectionName/
    - Section content is composed by the lines between the section start and section end markers        
        * sections can contain one or more statements
        * the content should be available as a dictionary in a "sections" property of the statement
            * the sections content should be available as a list present in the "sections" dict  with the corresponding section name as the key
        - Statements within a section can access the paraments made available by their parent statement via a "parent" property
    - Nested sections are allowed, the section stack should be maintained during execution
    - Empty Sections are not allowed, if a section is found without content, a syntax error must be reported

3.  Parsing Considerations
    While the use of indentation is recommended for readability, it should not be considered as a requirement for the format. 
    Parsers should be able to handle the format with or without indentation.

4. Execution
    - The execution should only be started after a sucessful validation of the input document (eg. no syntax errors, no missing parameters, etc)
    - The statements should be executed in the order they are found, the parameters should be made available to the statement as described above.
    - When a statement contains sections:
        It is responsible to manage the executing the statements within the section and passing the parameters to them as described above.

5. Execution Errors
    - If an error occurs during the execution of a statement, the error should be reported and the execution should be stopped
    - The error should contain the statement, the line number and the error message
    - If an error occurs during the execution of a statement within a section, the error should be reported and the execution of the section should be stopped
    - The error should contain the statement context (section stack), the line number and the error message

5. Examples


    # Statement without parameters
    Clear Cache

    # Statement with key vey and text block parameters
    Create File
        name: test.py
        .def greet():
        .   print("Hello")

    # Example without indentation (same as above)
    Create File
    name: test.py
    .def greet():
    .   print("Hello")

    # Statmeent with sections
    Modify File
        name: test.py
        /Modifications
            Select Text
                .def greet():
                .   print("Hello")
            Replace With
                .def greet()
                .   print("Hello World")
            Select Text
                .# this is a nasty comment
            Delete
        Modifications/
    
    
    # Statement with sections
    Deploy Application
        name: myapp
        Sections:
            /Environment
                Set Environment Variable
                    name: APP_ENV
                    value: production
            Environment/
            /Configuration
                Set Configuration
                    key: db_host
                    value: localhost
            Configuration/

The End