# CLEAR STATEMENT FORMAT

Version: 1.9.5

## OVERVIEW

This document provides a format for actionable statements that should be easy to interpret by both humans and automation, for use in structured communication files or any scenario requiring standardized documentation.

## FORMAT ELEMENTS

### 1. Basic Line Types

The following symbols are special: # . : - /, particularly when wrapping lines.

Line type is determined by these rules in order, once there is a match the type is set:

1. All lines are stripped of leading whitespace and trailing whitespace/end-of-line symbols (\n, \r, \r\n), parsing is based on line content, not indentation
2. Empty Lines: Lines that are completely empty or consist only of whitespace are skipped
3. Comment: Lines starting with # are treated as comments and ignored
4. List Item: Lines beginning with one or more - characters
5. Statement: Lines containing only alphanumeric characters and spaces
6. Literal Block: Lines beginning with ., terminating when a non-dot-prefixed line is encountered (excluding comments) or when the document ends
7. Key/Value: Lines containing : are treated as key/value pairs
8. Statement Block Begin: Lines beginning with / are treated as the start of a statement block e.g /Modifications
9. Statement Block contents: Lines within a statement block are treated as statements, key/value pairs, literal blocks, or lists within the block
10. Statement Block End: Lines ending with \ are treated as the end of a statement block e.g Modifications/

Note: The order of these rules is significant. A line's type is determined by the first matching rule.

### 2. Statements Format

A statement is a single line that represents an action or instruction, followed by exactly one type of parameters that provide additional context or data for the statement. Parameters must be either all key-value pairs, all list items, or all literal block lines - mixing parameter types is not allowed.

#### 2.1 Statement Parameters

Parameters must be one of these types:
- A series of key/value lines (with enhanced support for literal blocks or lists as values)
- A sequence of list items, where each item is a single line of text
- A literal block, where lines are preserved exactly as written including whitespace and formatting
- A sequence of statement blocks

Parameters cannot mix different types. For example, you cannot have both key/value pairs and direct list items in the same statement.

Valid examples:

Key/Value Parameters:
```
Create File
    name: test.py
    type: python
    content:
    .print("hello")
    .# This is actual content, not a comment
    .print("world")
```

List Parameters:
```
Add Items
    - First item
    - Second item
    -- Subitem A
    -- Subitem B
    - Third item
```

Literal Block Parameters:
```
Show Message
    .This is a message
    .It can span multiple lines
    .Each line starts with a dot
```

Invalid example (mixing types):
```
Invalid Statement
    key: value
    - list item    # Not allowed: mixing key/value with list
    .literal block   # Not allowed: mixing with literal block
```

#### 2.2 Enhanced Key/Value Lines

- Keys within a scope must be unique:
  - All keys within a single statement's parameters must be unique
  - All keys within the same nesting level of a list must be unique
  - Keys can be reused in different scopes (different statements or different list items)
- Values:
  - If the value is inline (non-empty), it must remain on a single line
  - If the value is empty (e.g., key:), either a literal block or a list must follow:
    - Literal Block: Lines starting with . must immediately follow the key and will be treated as the value for the key. The literal block terminates when a non-dot-prefixed line is encountered (except comments) or when the document finishes. All lines are joined using \n after stripping the leading dot.
    - List: Lines starting with - must immediately follow the key and will be treated as a list for the key. Nesting rules for lists apply.
  - Mixing Error: Mixing literal blocks and lists under the same key is not allowed and must result in a syntax error.

##### 2.2.1 Literal Blocks

- A leading dot is required for each line of a literal block
- The content after the leading dot is preserved exactly as written
- The literal block terminates when:
  - A line without a leading dot (excluding comments) is encountered, or
  - The document finishes
- Join all lines with \n to form a single string value
- Literal blocks are stored as strings
- All whitespace and characters after the leading dot are preserved exactly as written
- The dot prefix allows literal blocks to contain content that would otherwise be interpreted as comments or other special line types

##### 2.2.2 Lists

- List items are marked by one or more leading dash characters (-) to indicate nesting level
- Nesting Levels: 
  - Determined by the number of consecutive dash characters (-, --, ---)
  - Maximum depth of 5 levels
  - Each level must use exactly one more dash than its parent
- List Item Content:
  - Each list item must contain exactly one line of text
  - The text starts immediately after the dashes and any whitespace
  - No continuation lines are allowed
  - No empty items are allowed
- List Storage: Lists are stored as a list type within the dictionary under the corresponding key they follow

##### 2.2.3 Mixing Rules

- A key cannot have both a literal block and a list as its value

#### 2.3 Statement Blocks

Statement blocks are a powerful mechanism for organizing complex, nested instructions within a single statement. They provide a structured way to group related sub-operations, transformations, or configurations.

Key Characteristics:
- Blocks create a hierarchical, nested structure for organizing instructions
- Represented by a start marker (/) and an end marker (/`)
- Block names can be duplicated within the same level to represent parallel or repeated operations
- Allow nested blocks by providing new blocks within inner statement parameters
- Maximum nesting depth of 10 levels
- Enables complex, multi-step processes within a single statement
- A block cannot have the same name as its immediate parent block

Block Syntax:
```
StatementName
    /BlockName
        SubStatement1
            key1: value1
            /DifferentBlock  # Valid: Different name than parent
                NestedStatement
                    key2: value2
                    /BlockName  # Valid: Same name as grandparent
                        DeepStatement
                            key3: value3
                    BlockName/
            DifferentBlock/
    BlockName/
    /BlockName  # Valid: Duplicate at same level
        SubStatement2
            key3: value3
            /BlockName  # Invalid: Same name as immediate parent
                NestedStatement
                    key4: value4
            BlockName/
    BlockName/
```

##### Block Rules:
- Statement block names must be alphanumeric
- Multiple blocks with the same name are allowed within the same level to represent parallel or repeated operations
- A block cannot have the same name as its immediate parent block
- Block names can be reused at any level except as an immediate child of a block with the same name
- Start: /blockName
- End: blockName/
- Content: Must consist of statements, where each statement can have parameters in the form of key/value pairs, literal blocks, lists, or nested blocks
- Key/value pairs, literal blocks, and lists are only allowed as parameters to statements, not directly at the block level
- Nesting: Maximum depth of 10
- Empty Blocks: Allowed
- Scope: Each block creates a new scope for key uniqueness

### 3. Parsing Considerations

- Indentation is recommended for readability but not enforced
- Parsers should interpret the format correctly regardless of indentation
- Invalid constructs (e.g., skipping list levels, exceeding limits) must be reported as syntax errors

#### 3.1 Whitespace Rules
- Leading whitespace is stripped for all lines
- In key/value pairs, whitespace after the colon is stripped
- In literal blocks, whitespace after the leading dot is preserved exactly as written
- In lists, whitespace after the dashes is stripped

### 4. Error Handling

- Errors must include the following details:
  - Statement Context: The statement that caused the error
  - Line Number: The location of the error
  - Error Message: Descriptive message explaining the issue
- Errors should be reported in plain text format for simplicity, with one error per line
- Uniqueness violations must be reported with clear scope context

### 5. Examples

#### Statement Without Parameters:
```
Clear All Cache
```

#### Statement with Key/Value and Literal Block:
```
Create New File
    name: test.py
    content:
    .def greet():
    .    print("Hello")
```

#### Statement with Lists:
```
Update Menu Items
    categories:
    - Main Course
    -- Pasta
    -- Pizza
    - Desserts
    -- Ice Cream
    -- Cake
```

#### Statement with Block Name Constraints:
```
Deploy Application
    /Environment
        Configure Settings
            region: us-west-2
            
            /Service
                Deploy Container
                    name: auth-service
                    
                    /Environment  # Valid: Same name as grandparent
                        Set Parameters
                            memory: 512Mi
                    Environment/
            Service/
            
            /Environment  # Invalid: Same name as immediate parent
                Deploy Container
                    name: cache-service
            Environment/
    Environment/
```

#### Valid Block Name Reuse Example:
```
Configure System
    /Network
        Setup Router
            /Gateway
                Configure Interface
                    ip: 192.168.1.1
                    
                    /Network  # Valid: Same name as grandparent
                        Setup Routing
                            protocol: ospf
                    Network/
            Gateway/
    Network/

    /Service
        Deploy API
            /Component
                Install Dependencies
                    /Service  # Invalid: Same name as immediate parent
                        Configure Settings
                    Service/
                    
                    /AnotherService
                        Install Updates
                            /Service  # Valid: Not immediate parent
                            Service/
                    AnotherService/
            Component/
    Service/
```

#### Statement with Complex Statement Blocks:
```
Deploy Application
    /Infrastructure
        Provision Servers
            cloud: aws
            regions:
            - us-west-2
            - eu-central-1
        Configure Network
            security_groups:
            - web_traffic
            - internal_services
    Infrastructure/

    /Application
        Install Dependencies
            package_manager: pip
            requirements:
            - django
            - celery
            - redis
        Setup Environment
            env_vars:
            - DEBUG: false
            - LOG_LEVEL: info
    Application/
```

#### Statement with Duplicate Blocks:
```
Deploy Microservices
    /Service
        Deploy Container
            name: auth-service
            port: 8000
            image: auth:latest
    Service/
    
    /Service
        Deploy Container
            name: payment-service
            port: 8001
            image: payments:latest
    Service/
    
    /Service
        Deploy Container
            name: user-service
            port: 8002
            image: users:latest
    Service/
```

#### Statement with Mixed Block Types:
```
Update System
    /Backup
        Create Snapshot
            type: full
            destination: s3://backups
    Backup/
    
    /Maintenance
        Run Cleanup
            retain_days: 30
    Maintenance/
    
    /Backup
        Create Snapshot
            type: incremental
            destination: s3://incremental
    Backup/
```