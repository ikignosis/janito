{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Janito","text":"<p>Janito is a flexible and extensible platform for interacting with large language models (LLMs) from multiple providers.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-provider support: Access models from OpenAI, Anthropic, Google Gemini, Mistral, Alibaba Qwen, Z.AI, DeepSeek, Moonshot, IBM WatsonX, and Azure OpenAI</li> <li>Unified interface: Consistent CLI and API across all providers</li> <li>Tool integration: Built-in tools for file management, web access, code execution, and more</li> <li>Plugin system: Extend functionality with modular plugins</li> <li>Security first: Permission controls and sandboxed operations</li> <li>Automatic documentation: Supported models are automatically synchronized with the codebase</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li> <p>Install Janito:    <code>bash    pip install janito</code></p> </li> <li> <p>Set your API key:    <code>bash    janito set-api-key --provider openai --key YOUR_API_KEY</code></p> </li> <li> <p>List available models:    <code>bash    janito list-models --provider openai</code></p> </li> <li> <p>Start interactive chat:    <code>bash    janito chat</code></p> </li> </ol>"},{"location":"#quick-examples","title":"Quick Examples","text":"<pre><code># Simple prompt\njanito \"Create a Python script to calculate fibonacci numbers\"\n\n# Using specific model and provider\njanito -p openai -m gpt-4 \"Explain quantum computing\"\n\n# Using the shorthand model@provider syntax\njanito -m gpt-4@openai \"Explain quantum computing\"\n\n# Interactive mode\njanito --interactive\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Explore our comprehensive documentation:</p> <ul> <li>Installation &amp; Setup</li> <li>Configuration</li> <li>CLI Commands</li> <li>Supported Models</li> <li>Tools &amp; Plugins</li> <li>Developer Guide</li> <li>Releasing Guide</li> </ul> <p>Note: The list of supported models is automatically generated from the codebase. When new models are added, this documentation updates automatically.*</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to Janito will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#3123-2025-09-12","title":"[3.12.3] - 2025-09-12","text":""},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Breaking Change: Removed <code>--role</code> argument and interactive profile selection</li> <li>The <code>--role</code> argument has been completely removed from the CLI</li> <li>Interactive profile selection has been removed from chat mode</li> <li>Use <code>--profile &lt;name&gt;</code> or shorthand flags like <code>--developer</code> and <code>--market</code> instead</li> <li>Default behavior now uses the Developer profile when no profile is specified</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Updated documentation to reflect removal of role argument</li> <li>Added comprehensive profile documentation in <code>PROFILES.md</code></li> <li>Simplified profile selection to use explicit flags only</li> </ul>"},{"location":"CHANGELOG/#previous-versions","title":"[Previous Versions]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Initial support for profiles and roles</li> <li>Interactive profile selection in chat mode</li> <li><code>--role</code> argument for specifying developer roles</li> <li><code>--profile</code> argument for system prompt templates</li> <li><code>--developer</code> and <code>--market</code> shorthand flags</li> </ul>"},{"location":"CHANGELOG/#available-profiles","title":"Available Profiles","text":"<ul> <li>Developer: Optimized for software development tasks</li> <li>Market Analyst: Specialized for market analysis and business insights</li> </ul>"},{"location":"CHANGELOG/#supported-providers","title":"Supported Providers","text":"<ul> <li>Moonshot AI (default)</li> <li>OpenAI</li> <li>Anthropic</li> <li>IBM WatsonX</li> <li>Google AI</li> </ul> <p>For detailed information about profiles and their usage, see PROFILES.md.</p>"},{"location":"DIV/","title":"DIV","text":"<p>Perfect! Here's your finalized framework titled:</p>"},{"location":"DIV/#div-discovery-implementation-validation","title":"DIV: Discovery, Implementation, Validation","text":""},{"location":"DIV/#a-structured-workflow-for-handling-software-development-requests-with-context-clarity-and-validation","title":"A structured workflow for handling software development requests with context, clarity, and validation.","text":""},{"location":"DIV/#1-discovery","title":"\ud83d\udfe6 1. Discovery","text":"<p>Understand the request in project context.</p> <ul> <li>Inputs: Request, codebase, documentation, issues/PRs  </li> <li>Activities: Clarify intent, cross-check knowledge, map to components  </li> <li>Outputs: Scoped problem statement, mapping to files/issues</li> </ul>"},{"location":"DIV/#2-implementation","title":"\ud83d\udfe8 2. Implementation","text":"<p>Deliver a change or provide clarity.</p> <ul> <li>Inputs: Scoped request, project artifacts  </li> <li>Activities: Code/config/doc changes OR explanation  </li> <li>Outputs: PR/commit, updated docs, or clear resolution</li> </ul>"},{"location":"DIV/#3-validation","title":"\ud83d\udfe9 3. Validation","text":"<p>Confirm correctness of both understanding and change.</p> <ul> <li>Inputs: Delivered solution or response, feedback  </li> <li>Activities: Review, test, confirm with requester  </li> <li>Outputs: Merged change, validated answer, closed task</li> </ul> <p>\ud83d\udd01 Iterative Flow: If validation reveals misalignment, loop back to Discovery or Implementation with refined understanding.</p> <p>This DIV framework offers a clean, repeatable model for handling requests \u2014 from bug fixes and enhancements to clarifications and investigations \u2014 all while staying grounded in the real state of your project.</p>"},{"location":"PROFILES/","title":"Janito Profiles","text":"<p>Janito supports predefined system prompts called \"profiles\" that help the AI understand the context and role it should play when responding to your requests.</p>"},{"location":"PROFILES/#available-profiles","title":"Available Profiles","text":""},{"location":"PROFILES/#developer-profile-developer-or-profile-developer","title":"Developer Profile (<code>--developer</code> or <code>--profile developer</code>)","text":"<p>The default profile optimized for software development tasks. This profile:</p> <ul> <li>Focuses on code generation and debugging</li> <li>Provides access to Python tools and development utilities</li> <li>Emphasizes best practices and clean code</li> <li>Includes file system operations and code execution capabilities</li> </ul> <p>Usage:</p> <pre><code>janito --developer \"Create a REST API with FastAPI\"\njanito --profile developer \"Debug this Python script\"\n</code></pre>"},{"location":"PROFILES/#market-analyst-profile-market-or-profile-market-analyst","title":"Market Analyst Profile (<code>--market</code> or <code>--profile market-analyst</code>)","text":"<p>A specialized profile for market analysis and business insights. This profile:</p> <ul> <li>Focuses on data analysis and market research</li> <li>Provides tools for web scraping and data processing</li> <li>Emphasizes business context and market trends</li> <li>Includes tools for generating reports and visualizations</li> </ul> <p>Usage:</p> <pre><code>janito --market \"Analyze stock market trends for tech companies\"\njanito --profile market-analyst \"Scrape competitor pricing data\"\n</code></pre>"},{"location":"PROFILES/#how-profiles-work","title":"How Profiles Work","text":"<p>Profiles are implemented as Jinja2 templates that generate system prompts based on:</p> <ul> <li>The selected profile type</li> <li>Available tools and permissions</li> <li>Platform-specific configurations</li> <li>User preferences</li> </ul> <p>When you use a profile, Janito automatically:</p> <ol> <li>Loads the appropriate template</li> <li>Injects relevant tool definitions</li> <li>Sets up platform-specific configurations</li> <li>Provides context-aware responses</li> </ol>"},{"location":"PROFILES/#custom-profiles","title":"Custom Profiles","text":"<p>You can create custom profiles by adding system prompt files to:</p> <pre><code>~/.janito/profiles/\n</code></pre> <p>Each file should contain a plain text system prompt. The filename becomes the profile name.</p> <p>Example:</p> <pre><code># Create a custom profile\necho \"You are a cybersecurity expert. Focus on security best practices, vulnerability analysis, and secure coding patterns.\" &gt; ~/.janito/profiles/security-expert\n\n# Use the custom profile\njanito --profile security-expert \"Review this code for security vulnerabilities\"\n</code></pre>"},{"location":"PROFILES/#profile-selection","title":"Profile Selection","text":""},{"location":"PROFILES/#command-line","title":"Command Line","text":"<p>Use <code>--profile &lt;name&gt;</code> to specify a profile:</p> <pre><code>janito --profile developer \"Create a Python script\"\njanito --profile market-analyst \"Analyze this data\"\njanito --profile security-expert \"Review security\"\n</code></pre>"},{"location":"PROFILES/#shorthand-flags","title":"Shorthand Flags","text":"<p>Use convenience flags for built-in profiles:</p> <pre><code>janito --developer \"Create a Python script\"      # Same as --profile developer\njanito --market \"Analyze this data\"              # Same as --profile market-analyst\n</code></pre>"},{"location":"PROFILES/#interactive-mode","title":"Interactive Mode","text":"<p>When starting Janito in interactive mode without specifying a profile, it defaults to the Developer profile.</p>"},{"location":"PROFILES/#profile-templates","title":"Profile Templates","text":"<p>Profile templates are located in:</p> <pre><code>janito/agent/templates/profiles/\n\u251c\u2500\u2500 system_prompt_template_developer.txt.j2\n\u2514\u2500\u2500 system_prompt_template_market_analyst.txt.j2\n</code></pre> <p>These templates use Jinja2 syntax and can include:</p> <ul> <li>Tool definitions</li> <li>Platform-specific configurations</li> <li>Dynamic content based on available tools</li> <li>Conditional logic for different environments</li> </ul>"},{"location":"PROFILES/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use appropriate profiles: Choose the profile that best matches your task type</p> </li> <li> <p>Create custom profiles: For specialized domains, create custom profiles</p> </li> <li> <p>Combine with tools: Profiles work best when combined with Janito's built-in tools</p> </li> <li> <p>Test and iterate: Refine custom profiles based on results</p> </li> </ol>"},{"location":"PROFILES/#troubleshooting","title":"Troubleshooting","text":"<p>Profile not found:</p> <ul> <li>Ensure custom profiles are saved in <code>~/.janito/profiles/</code></li> <li>Check file permissions and encoding (UTF-8 recommended)</li> <li>Verify the profile name matches the filename</li> </ul> <p>Profile not working as expected:</p> <ul> <li>Use <code>janito --show-system-prompt --profile &lt;name&gt;</code> to inspect the generated prompt</li> <li>Check if tools are properly configured for your platform</li> <li>Review the profile template for any platform-specific conditions</li> </ul>"},{"location":"TOOLBAR-STYLING/","title":"Styling the Prompt Toolkit Toolbar in Janito","text":"<p>This document describes how styles are defined and applied to key elements in the command-line interface (CLI) toolbar using prompt_toolkit.</p>"},{"location":"TOOLBAR-STYLING/#how-toolbar-styling-works","title":"How Toolbar Styling Works","text":"<ul> <li>The toolbar lines (provider, model, role, key bindings, token usage, etc.) are generated in <code>janito/cli/chat_mode/toolbar.py</code>.</li> <li>The strings use special HTML-like tags (e.g., <code>&lt;role&gt;admin&lt;/role&gt;</code>, <code>&lt;key-label&gt;F1&lt;/key-label&gt;</code>) to mark segments for custom styling.</li> <li><code>prompt_toolkit</code>'s <code>HTML</code> formatted text parser interprets tags that match style names defined in a dictionary in <code>janito/cli/chat_mode/prompt_style.py</code>.</li> </ul>"},{"location":"TOOLBAR-STYLING/#defining-styles","title":"Defining Styles","text":"<p>All style rules are set in <code>janito/cli/chat_mode/prompt_style.py</code>, for example:</p> <pre><code>chat_shell_style = Style.from_dict({\n    'role': 'fg:#e87c32 bold',                # For &lt;role&gt;...&lt;/role&gt;\n    'provider': 'fg:#117fbf',                 # For &lt;provider&gt;...&lt;/provider&gt;\n    'key-label': 'bg:#ff9500 fg:#232323 bold',# For &lt;key-label&gt;...&lt;/key-label&gt;\n    ...\n})\n</code></pre> <ul> <li>The key in <code>Style.from_dict</code> must match the tag name used in toolbar line strings.</li> <li>Example: <code>&lt;role&gt;user&lt;/role&gt;</code> will be rendered using the <code>'role'</code> style.</li> </ul>"},{"location":"TOOLBAR-STYLING/#applying-styles-in-toolbar-output","title":"Applying Styles in Toolbar Output","text":"<p>When building toolbar lines, use HTML-like tags named for your style, not CSS style tags or attributes:</p> <p>Correct:</p> <pre><code>f'Press &lt;key-label&gt;F1&lt;/key-label&gt; for help | Role: &lt;role&gt;{role}&lt;/role&gt;'\n</code></pre> <p>Incorrect (won't work):</p> <pre><code>f'&lt;style class=\"key-label\"&gt;F1&lt;/style&gt; | Role: &lt;role&gt;{role}&lt;/role&gt;'\n</code></pre>"},{"location":"TOOLBAR-STYLING/#supported-tag-mapping","title":"Supported Tag Mapping","text":"Tag Used in Toolbar String Style Name in prompt_style.py Example Usage <code>&lt;role&gt;...&lt;/role&gt;</code> <code>'role'</code> <code>&lt;role&gt;user&lt;/role&gt;</code> <code>&lt;provider&gt;...&lt;/provider&gt;</code> <code>'provider'</code> <code>&lt;provider&gt;OpenAI&lt;/provider&gt;</code> <code>&lt;key-label&gt;...&lt;/key-label&gt;</code> <code>'key-label'</code> <code>&lt;key-label&gt;F1&lt;/key-label&gt;</code> <code>&lt;msg_count&gt;...&lt;/msg_count&gt;</code> <code>'msg_count'</code> <code>&lt;msg_count&gt;3&lt;/msg_count&gt;</code> ... ... ..."},{"location":"TOOLBAR-STYLING/#adding-or-changing-a-style","title":"Adding or Changing a Style","text":"<ol> <li>Define your style in <code>prompt_style.py</code>, for example:    <code>python    'custom': 'bg:#f7e01d fg:#222222'</code></li> <li>Mark up your toolbar string with <code>&lt;custom&gt;...&lt;/custom&gt;</code>.</li> <li>Result: prompt_toolkit will apply your custom style to those segments.</li> </ol>"},{"location":"TOOLBAR-STYLING/#example","title":"Example","text":"<p>If you want a new binding to stand out in blue:</p> <pre><code># In prompt_style.py:\n'blue-label': 'bg:#2629d4 fg:#ffffff bold',\n\n# In toolbar.py:\nreturn f'... &lt;blue-label&gt;F5&lt;/blue-label&gt;: Extra ...'\n</code></pre> <p>Troubleshooting: - If your style is not applied, check that the tag name in your string exactly matches a key in the style <code>from_dict</code>. - Do not use HTML <code>&lt;span&gt;</code>, <code>&lt;style&gt;</code>, or CSS classes; only tag names matching style dict keys work.</p> <p>See also: <code>prompt_toolkit.formatted_text.HTML</code> and prompt_toolkit styling documentation</p>"},{"location":"alibaba-setup/","title":"Alibaba Cloud Qwen Setup Guide","text":"<p>This guide explains how to set up the Alibaba Cloud Qwen provider for Janito.</p>"},{"location":"alibaba-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>An Alibaba Cloud account</li> <li>Access to the Alibaba Cloud Qwen model service</li> <li>API key for authentication</li> </ul>"},{"location":"alibaba-setup/#getting-your-api-key","title":"Getting Your API Key","text":"<ol> <li>Log in to your Alibaba Cloud account</li> <li>Navigate to the Qwen Model Service in the console</li> <li>Go to API Keys or Security Settings</li> <li>Create a new API key or use an existing one</li> <li>Copy the API key value</li> </ol>"},{"location":"alibaba-setup/#setting-up-the-api-key","title":"Setting Up the API Key","text":"<p>You can set your API key using the Janito CLI:</p> <pre><code>janito --set-api-key alibaba:your-api-key-here\n</code></pre> <p>Alternatively, you can set the environment variable:</p> <pre><code>export ALIBABA_API_KEY=your-api-key-here\n</code></pre>"},{"location":"alibaba-setup/#configuration","title":"Configuration","text":"<p>The Alibaba provider uses the following environment variable:</p> <ul> <li><code>ALIBABA_API_KEY</code>: Your Alibaba Cloud API key</li> </ul>"},{"location":"alibaba-setup/#available-models","title":"Available Models","text":"<p>The Alibaba provider supports the following models:</p> <ul> <li><code>qwen-turbo</code>: Fast, lightweight model for simple tasks</li> <li><code>qwen-plus</code>: Balanced performance and capability</li> <li><code>qwen-max</code>: Most capable model for complex tasks</li> <li><code>qwen3-coder-plus</code>: Coding-focused model with 128k context</li> <li><code>qwen3-coder-480b-a35b-instruct</code>: Advanced coding model</li> <li><code>qwen3-235b-a22b-thinking-2507</code>: 1M context thinking model</li> <li><code>qwen3-235b-a22b-instruct-2507</code>: 1M context instruct model</li> <li><code>qwen3-30b-a3b-thinking-2507</code>: 1M context thinking model</li> <li><code>qwen3-30b-a3b-instruct-2507</code>: 1M context instruct model</li> </ul>"},{"location":"alibaba-setup/#default-model","title":"Default Model","text":"<p>The default model is <code>qwen3-235b-a22b-instruct-2507</code>, which provides 129k context and is suitable for general-purpose tasks.</p>"},{"location":"alibaba-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Q: I'm getting authentication errors A: Verify your API key is correct and has the necessary permissions in the Alibaba Cloud console.</p> <p>Q: The model is not responding A: Check your internet connection and verify the Alibaba Cloud Qwen service is available in your region.</p> <p>Q: I want to use a different model A: Use the <code>--model</code> flag when running Janito:</p> <pre><code>janito --provider alibaba --model qwen-max\n</code></pre>"},{"location":"alternatives/","title":"Alternatives to Janito","text":"<p>There are many tools for AI-powered code assistance and project automation. Here are some notable alternatives, grouped by category:</p> Category Name Description Link \ud83d\udfe2 Open Source CLI aider Fast, open-source GPT coding in your terminal. aider.chat \ud83d\udfe2 Open Source CLI RA.Aid Autonomous software development agent with multi-step planning, research, and implementation. CLI-based, supports shell command execution, web research, and integration with aider. github.com/ai-christianson/RA.Aid \ud83d\udfe2 Open Source CLI OpenAI Codex CLI Lightweight, open-source coding agent that runs in your terminal. github.com/openai/codex \ud83d\udfe2 Open Source CLI Continue Open-source autopilot for software development. Integrates with VS Code and JetBrains, supports multiple models, and enables conversational coding and project-wide edits. continue.dev \ud83d\udfe9 VS Code Extension roo code Open-source, model-agnostic AI coding assistant for VS Code. Supports multi-file edits, guarded command execution, and deep project context. roocode.com \ud83d\udfe9 VS Code Extension cline Open-source, collaborative AI coding agent for VS Code. Autonomous, extensible, and supports multiple models. cline.bot \ud83d\udfe6 IDE-Integrated Cursor AI-powered code editor based on VS Code, with deep context and refactoring. cursor.com \ud83d\udfe6 IDE-Integrated Windsurf AI coding assistant and IDE (formerly Codeium) for VS Code, JetBrains, and its own editor. windsurf.com \ud83d\udfe6 IDE-Integrated GitHub Copilot AI pair programmer for VS Code, JetBrains, and more. github.com/features/copilot \ud83d\udfea Commercial Assistant Claude Code Anthropic\u2019s Claude models with code-focused features. github.com/anthropics/claude-code \ud83d\udfea Commercial Assistant Amazon CodeWhisperer AI code suggestions in IDEs. aws.amazon.com/codewhisperer \ud83d\udfea Commercial Assistant Tabnine AI code completion for multiple editors. tabnine.com \ud83c\udf10 Web-Based Chat ChatGPT OpenAI\u2019s web-based conversational AI. chat.openai.com \ud83c\udf10 Web-Based Chat Gemini Google\u2019s AI chat for code and general tasks. gemini.google.com \ud83c\udf10 Web-Based Chat Copilot Web GitHub Copilot\u2019s browser-based chat. github.com/features/copilot \ud83c\udf10 Web-Based Chat Claude Anthropic\u2019s Claude conversational AI. claude.ai <p>Each tool has its own strengths, focus, and integration style. Janito is unique in its open, prompt-driven, and tool-based approach\u2014see the rest of the docs for what sets it apart!</p>"},{"location":"anthropic-setup/","title":"Anthropic Setup","text":"<p>To use Anthropic models with Janito, follow these steps:</p>"},{"location":"anthropic-setup/#1-get-your-api-key","title":"1. Get Your API Key","text":"<ol> <li>Sign up at https://console.anthropic.com/</li> <li>Navigate to your API keys page</li> <li>Create a new API key or copy an existing one</li> </ol>"},{"location":"anthropic-setup/#2-set-the-api-key","title":"2. Set the API Key","text":"<p>Set your Anthropic API key using the CLI:</p> <pre><code>janito set-api-key --provider anthropic --key YOUR_API_KEY_HERE\n</code></pre> <p>Or set it as an environment variable:</p> <pre><code>export ANTHROPIC_API_KEY=\"YOUR_API_KEY_HERE\"\n</code></pre>"},{"location":"anthropic-setup/#3-available-models","title":"3. Available Models","text":"<p>Janito supports the following Anthropic models:</p> <ul> <li><code>claude-opus-4-20250514</code> - Most capable model for complex tasks</li> <li><code>claude-sonnet-4-20250514</code> - Balanced performance and cost</li> <li><code>claude-3-7-sonnet-20250219</code> - High-performance model</li> <li><code>claude-3-5-haiku-20241022</code> - Fast and cost-effective</li> <li><code>claude-3-5-sonnet-20241022</code> - Balanced speed and capability</li> <li><code>claude-3-haiku-20240307</code> - Fastest model for simple tasks</li> </ul>"},{"location":"anthropic-setup/#4-usage-examples","title":"4. Usage Examples","text":""},{"location":"anthropic-setup/#list-available-models","title":"List available models","text":"<pre><code>janito list-models --provider anthropic\n</code></pre>"},{"location":"anthropic-setup/#use-a-specific-model","title":"Use a specific model","text":"<pre><code>janito chat --provider anthropic --model claude-3-5-sonnet-20241022\n</code></pre>"},{"location":"anthropic-setup/#set-as-default-provider","title":"Set as default provider","text":"<pre><code>janito set-config provider=anthropic\n</code></pre>"},{"location":"anthropic-setup/#notes","title":"Notes","text":"<ul> <li>Anthropic is accessed through an OpenAI-compatible API endpoint</li> <li>The default model is <code>claude-3-7-sonnet-20250219</code></li> <li>All models support streaming responses</li> <li>Context window sizes vary by model (see Supported Models for details)</li> </ul> <p>For more information, visit the Anthropic documentation.</p>"},{"location":"cerebras-setup/","title":"Cerebras Setup Guide","text":"<p>This guide will help you set up Janito to use Cerebras as an LLM provider.</p>"},{"location":"cerebras-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>A Cerebras account</li> <li>An API key from Cerebras</li> </ol>"},{"location":"cerebras-setup/#getting-an-api-key","title":"Getting an API Key","text":"<ol> <li>Visit the Cerebras API Keys page</li> <li>Log in to your account</li> <li>Generate a new API key</li> <li>Copy the API key for use in Janito</li> </ol>"},{"location":"cerebras-setup/#configuration","title":"Configuration","text":"<p>To configure Janito to use Cerebras, you need to set your API key:</p> <pre><code>janito --set-api-key YOUR_CEREBRAS_API_KEY -p cerebras\n</code></pre> <p>Replace <code>YOUR_CEREBRAS_API_KEY</code> with the API key you obtained from Cerebras.</p>"},{"location":"cerebras-setup/#usage","title":"Usage","text":"<p>After setting up your API key, you can use Cerebras models with Janito:</p> <pre><code>janito -p cerebras \"Hello, how are you?\"\n</code></pre> <p>By default, Janito will use the <code>qwen-3-coder-480b</code> model. You can specify a different model if needed:</p> <pre><code>janito -p cerebras -m qwen-3-coder-480b \"Explain quantum computing\"\n</code></pre>"},{"location":"cerebras-setup/#available-models","title":"Available Models","text":"<p>Cerebras offers several models through their API:</p> <p>Production Models:</p> <ul> <li><code>llama-4-scout-17b-16e-instruct</code></li> <li><code>llama-3.3-70b</code></li> <li><code>llama3.1-8b</code></li> <li><code>qwen-3-32b</code></li> </ul> <p>Preview Models:</p> <ul> <li><code>llama-4-maverick-17b-128e-instruct</code></li> <li><code>qwen-3-235b-a22b-instruct-2507</code></li> <li><code>qwen-3-235b-a22b-thinking-2507</code></li> <li><code>qwen-3-coder-480b</code></li> <li><code>gpt-oss-120b</code></li> </ul> <p>Notes:</p> <ul> <li><code>qwen-3-coder-480b</code>: 32k context, reasoning-focused model with function calling support</li> </ul>"},{"location":"cerebras-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Verify your API key is correct and active</li> <li>Check that you have internet connectivity</li> <li>Ensure you're using a supported model name</li> <li>Check the Cerebras status page for any service outages</li> </ol> <p>For further assistance, consult the Cerebras documentation.</p>"},{"location":"cli/","title":"CLI Commands","text":"<p>Janito provides a comprehensive command-line interface (CLI) for managing and interacting with LLM providers.</p>"},{"location":"cli/#core-commands","title":"Core Commands","text":""},{"location":"cli/#list-models","title":"<code>list-models</code>","text":"<p>List all supported models for a given provider.</p> <pre><code># List models for OpenAI\njanito list-models --provider openai\n\n# List models for the default provider\njanito list-models\n</code></pre>"},{"location":"cli/#list-providers","title":"<code>list-providers</code>","text":"<p>List all available providers and their status.</p> <pre><code>janito list-providers\n</code></pre>"},{"location":"cli/#set-api-key","title":"<code>set-api-key</code>","text":"<p>Set your API key for a specific provider.</p> <pre><code>janito set-api-key --provider openai --key sk-your-key-here\n</code></pre>"},{"location":"cli/#chat","title":"<code>chat</code>","text":"<p>Start an interactive chat session with the default model.</p> <pre><code>janito chat\n</code></pre>"},{"location":"cli/#show-config","title":"<code>show-config</code>","text":"<p>Display current configuration settings.</p> <pre><code>janito show-config\n</code></pre>"},{"location":"cli/#ping-providers","title":"<code>ping-providers</code>","text":"<p>Test connectivity to all providers.</p> <pre><code>janito ping-providers\n</code></pre>"},{"location":"cli/#provider-specific-commands","title":"Provider-Specific Commands","text":""},{"location":"cli/#list-providers-region","title":"<code>list-providers-region</code>","text":"<p>List providers available in a specific region.</p> <pre><code>janito list-providers-region --region us-east-1\n</code></pre>"},{"location":"cli/#list-tools","title":"<code>list-tools</code>","text":"<p>List all available tools and plugins.</p> <pre><code>janito list-tools\n</code></pre>"},{"location":"cli/#configuration-commands","title":"Configuration Commands","text":""},{"location":"cli/#set-config","title":"<code>set-config</code>","text":"<p>Set a configuration value.</p> <pre><code>janito set-config provider=openai\njanito set-config azure_deployment_name=my-deployment\n</code></pre>"},{"location":"cli/#show-config_1","title":"<code>show-config</code>","text":"<p>Show current configuration.</p> <pre><code>janito show-config\n</code></pre>"},{"location":"cli/#unset-config","title":"<code>unset-config</code>","text":"<p>Remove a configuration value.</p> <pre><code>janito unset-config provider\n</code></pre>"},{"location":"cli/#advanced-commands","title":"Advanced Commands","text":""},{"location":"cli/#model-selection","title":"<code>model-selection</code>","text":"<p>Interactively select a model from available options.</p> <pre><code>janito model-selection\n</code></pre>"},{"location":"cli/#enable-plugin-disable-plugin","title":"<code>enable-plugin</code> / <code>disable-plugin</code>","text":"<p>Enable or disable a plugin.</p> <pre><code>janito enable-plugin webtools\njanito disable-plugin filemanager\n</code></pre> <p>For detailed help on any command, use:</p> <pre><code>janito COMMAND --help\n</code></pre> <p>Note: The <code>list-models</code> command automatically reflects the latest model specifications defined in the codebase. No manual documentation update is required when new models are added.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Janito's behavior is controlled through a combination of environment variables, configuration files, and CLI commands.</p>"},{"location":"configuration/#configuration-sources-priority-order","title":"Configuration Sources (Priority Order)","text":"<ol> <li>Command-line arguments (highest priority)</li> <li>Environment variables</li> <li>Configuration file (<code>~/.janito/config.yaml</code>)</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"Variable Description Example <code>OPENAI_API_KEY</code> OpenAI API key <code>sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ANTHROPIC_API_KEY</code> Anthropic API key <code>sk-ant-api03-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>GOOGLE_API_KEY</code> Google Gemini API key <code>AIzaSyBxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>MISTRAL_API_KEY</code> Mistral API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>CEREBRAS_API_KEY</code> Cerebras API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ZAI_API_KEY</code> Z.AI API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>ALIBABA_API_KEY</code> Alibaba Qwen API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>DEEPSEEK_API_KEY</code> DeepSeek API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>MOONSHOT_API_KEY</code> Moonshot API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>WATSONX_API_KEY</code> IBM WatsonX API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>WATSONX_PROJECT_ID</code> IBM WatsonX project ID <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code> <code>WATSONX_SPACE_ID</code> IBM WatsonX space ID <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code> <code>AZURE_OPENAI_API_KEY</code> Azure OpenAI API key <code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> <code>JANITO_PROVIDER</code> Default provider <code>openai</code>"},{"location":"configuration/#configuration-file","title":"Configuration File","text":"<p>The configuration file is located at <code>~/.janito/config.yaml</code> and has the following structure:</p> <pre><code>provider: openai\nazure_deployment_name: my-deployment\nmax_tokens: 4096\ndefault_temperature: 0.7\nenable_tools: true\n</code></pre> <p>You can modify this file directly or use the CLI:</p> <pre><code># Set default provider\njanito set-config provider=openai\n\n# Set Azure deployment name\njanito set-config azure_deployment_name=my-deployment\n\n# View current config\njanito show-config\n</code></pre>"},{"location":"configuration/#provider-specific-configuration","title":"Provider-Specific Configuration","text":""},{"location":"configuration/#azure-openai","title":"Azure OpenAI","text":"<p>For Azure OpenAI, you must specify your deployment name:</p> <pre><code>janito set-config azure_deployment_name=my-gpt4o-deployment\n</code></pre> <p>This maps to the <code>--model</code> parameter in CLI commands:</p> <pre><code>janito chat --provider azure_openai\n# Internally uses model: my-gpt4o-deployment\n</code></pre>"},{"location":"configuration/#ibm-watsonx","title":"IBM WatsonX","text":"<p>For IBM WatsonX, you need both API key and project ID:</p> <pre><code>janito set-config watsonx_project_id=your-project-id\njanito set-config watsonx_space_id=your-space-id\n</code></pre>"},{"location":"configuration/#model-selection","title":"Model Selection","text":"<p>When no model is specified, Janito uses the provider's default model:</p> <ul> <li>OpenAI: <code>gpt-5</code></li> <li>Anthropic: <code>claude-3-7-sonnet-20250219</code></li> <li>Google: <code>gemini-2.5-flash</code></li> <li>Mistral: <code>mistral-large-latest</code></li> <li>Cerebras: <code>qwen-3-coder-480b</code></li> <li>Z.AI: <code>glm-4.5</code></li> <li>Alibaba: <code>qwen3-next-80b-a3b-instruct</code></li> <li>DeepSeek: <code>deepseek-chat</code></li> <li>Moonshot: <code>kimi-k2-0905-preview</code></li> <li>IBM WatsonX: <code>ibm/granite-3-3-8b-instruct</code></li> <li>Azure OpenAI: <code>azure_openai_deployment</code></li> </ul> <p>You can override the default model using <code>--model MODEL_NAME</code> on any command:</p> <pre><code>janito chat --provider openai --model gpt-4o\n</code></pre>"},{"location":"configuration/#modelprovider-syntax","title":"Model@Provider Syntax","text":"<p>For convenience, you can specify both model and provider in a single argument using the <code>model@provider</code> syntax:</p> <pre><code># These are equivalent:\njanito chat --provider openai --model gpt-4o\njanito chat -m gpt-4o@openai\n\n# More examples:\njanito -m claude-3-5-sonnet-20241022@anthropic \"Write a Python function\"\njanito -m kimi-k1-8k@moonshot \"Translate this to Chinese\"\njanito -m deepseek-chat@deepseek \"Explain machine learning\"\n</code></pre> <p>This syntax is particularly useful for: - Quick one-off commands - Scripts and automation - Following conventions from tools like Docker</p> <p>Note: If you specify both <code>-m model@provider</code> and <code>-p provider</code>, the explicit <code>-p</code> flag takes precedence.</p> <p>Note: The list of available models is automatically synchronized with the codebase. Use <code>janito list-models --provider PROVIDER</code> to see all available options.</p>"},{"location":"deepseek-setup/","title":"Configuring Janito for DeepSeek","text":"<p>Janito supports DeepSeek as an LLM provider. This guide explains how to configure Janito to use DeepSeek models.</p>"},{"location":"deepseek-setup/#1-obtain-a-deepseek-api-key","title":"1. Obtain a DeepSeek API Key","text":"<ul> <li>Sign up or log in at DeepSeek to get your API key.</li> </ul>"},{"location":"deepseek-setup/#2-set-your-deepseek-api-key-in-janito","title":"2. Set Your DeepSeek API Key in Janito","text":"<p>You must specify both the API key and the provider name when configuring Janito for DeepSeek:</p> <pre><code>janito --set-api-key YOUR_DEEPSEEK_API_KEY -p deepseek\n</code></pre> <p>Replace <code>YOUR_DEEPSEEK_API_KEY</code> with your actual DeepSeek API key.</p>"},{"location":"deepseek-setup/#3-select-deepseek-as-the-provider","title":"3. Select DeepSeek as the Provider","text":"<p>You can set DeepSeek as your default provider:</p> <pre><code>janito --set provider=deepseek\n</code></pre> <p>Or specify it per command:</p> <pre><code>janito -p deepseek \"Your prompt here\"\n</code></pre>"},{"location":"deepseek-setup/#4-choose-a-deepseek-model","title":"4. Choose a DeepSeek Model","text":"<p>Janito supports the following DeepSeek models:</p> <ul> <li><code>deepseek-chat</code> (default) - General purpose chat model (128K context)</li> <li><code>deepseek-reasoner</code> - Specialized for complex reasoning tasks (128K context)</li> </ul> <p>To select a model:</p> <pre><code>janito -p deepseek -m deepseek-reasoner \"Your prompt here\"\n</code></pre>"},{"location":"deepseek-setup/#5-verify-your-configuration","title":"5. Verify Your Configuration","text":"<p>Show your current configuration (the config file path will be shown at the top):</p> <pre><code>janito --show-config\n</code></pre>"},{"location":"deepseek-setup/#6-troubleshooting","title":"6. Troubleshooting","text":"<ul> <li>Ensure your API key is correct and active.</li> <li>If you encounter issues, use <code>janito --list-providers</code> to verify DeepSeek is available.</li> <li>For more help, see the main Configuration Guide or run <code>janito --help</code>.</li> </ul> <p>For more details on supported models and features, see Supported Providers &amp; Models.</p>"},{"location":"driver-flow/","title":"OpenAI Driver Content Flow in Janito","text":"<p>This document explains the updated flow for how content and tool calls are processed in Janito, focusing on the new <code>ResponseReceived</code> event and agent logic. This supports both streaming and agent-tool interleaving for advanced use cases.</p>"},{"location":"driver-flow/#flow-overview","title":"Flow Overview","text":"<ol> <li> <p>Model Response Handling (Driver Layer)</p> <ul> <li>The entrypoint is <code>OpenAIModelDriver._process_driver_input</code> (in <code>janito/drivers/openai/driver.py</code>).</li> <li>The driver collects output from the model (including content parts, tool call suggestions, etc.), and emits a single <code>ResponseReceived</code> event (from <code>janito/driver_events.py</code>).</li> <li>This event contains all content, tool calls, normalized timestamps, and relevant metadata.</li> </ul> </li> <li> <p>Agent Decision Loop</p> <ul> <li>The agent (<code>LLMAgent</code>, in <code>janito/llm/agent.py</code>) processes the <code>ResponseReceived</code> event:<ul> <li>If the event includes tool calls, the agent invokes those tools using the <code>tools_adapter</code>, updates its conversation history with the tool calls and their results, and resubmits to the driver for a new response.</li> <li>If there are no tool calls, the agent yields the <code>ResponseReceived</code> event as output (ending the loop for that prompt).</li> </ul> </li> <li>This pattern enables fully automated tool-use loops, and naturally supports function-calling workflows (e.g., OpenAI function calling, tool-augmented LLMs).</li> </ul> </li> <li> <p>CLI Core Loop (Chat/Prompt Handler)</p> <ul> <li>In interactive (chat) mode, the CLI (<code>janito/cli/chat_mode/session.py</code>, within <code>ChatSession._chat_loop</code>) uses the <code>PromptHandler</code> to run the user's prompt. The handler now expects <code>ResponseReceived</code> events and handles terminal output accordingly.</li> </ul> </li> <li> <p>Event Reporting / Output</p> <ul> <li>The <code>RichTerminalReporter</code> (<code>janito/cli/rich_terminal_reporter.py</code>) is responsible for displaying content found in the <code>content_parts</code> field of <code>ResponseReceived</code> events.</li> <li>Only these high-level events are printed as main output, streamlining event handling logic and supporting new LLM APIs.</li> </ul> </li> </ol>"},{"location":"driver-flow/#sequence-diagram-updated","title":"Sequence Diagram (Updated)","text":"<pre><code>User prompt (in CLI)\n   \u2193\nPromptHandler.run_prompt \u2192 agent.chat() (yields final ResponseReceived)\n   \u2193\nOpenAI driver produces ResponseReceived (content+tools)\n   \u2193\nLLMAgent detects tool calls \u2192 executes via tools_adapter \u2192 extends history, repeats until no tool calls\n   \u2193\nResponseReceived with only content_parts (no tool calls)\n   \u2193\nRichTerminalReporter.on_ResponseReceived prints content\n</code></pre>"},{"location":"driver-flow/#key-classes-files","title":"Key Classes &amp; Files","text":"<ul> <li>janito/drivers/openai/driver.py: Implements the OpenAI driver and emits <code>ResponseReceived</code> events only.</li> <li>janito/driver_events.py: Defines the new <code>ResponseReceived</code> (and other) events.</li> <li>janito/llm/agent.py: Contains smart tool-handling agent event loop.</li> <li>janito/cli/prompt_core.py: Handles prompt execution and event iteration.</li> <li>janito/cli/rich_terminal_reporter.py: Handles printing content from <code>ResponseReceived</code> to the user.</li> <li>janito/cli/chat_mode/session.py: Interactive CLI chat session management.</li> </ul>"},{"location":"driver-flow/#notes","title":"Notes","text":"<ul> <li>This event-driven flow provides both streaming and agent-tool-in-the-loop logic for all drivers. It is compatible with OpenAI and other providers adopting similar response models.</li> <li>Tool/function calls from the model are now only seen in the aggregated <code>tool_calls</code> field of the <code>ResponseReceived</code> event.</li> <li>Consumers should migrate to listen for <code>ResponseReceived</code> events instead of the legacy granular events (<code>ContentPartFound</code>, etc.).</li> </ul> <p>For more information, see code comments in the affected files or reach out to the maintainers for architectural questions.</p>"},{"location":"driver-request-cancellation/","title":"Driver Request Cancellation in Janito","text":""},{"location":"driver-request-cancellation/#overview","title":"Overview","text":"<p>Driver request cancellation refers to the ability to halt or abort an in-progress request to an LLM driver (such as OpenAI, Anthropic, etc.) before it completes. This is important for responsive user interfaces, resource management, and handling user-initiated aborts (e.g., pressing Ctrl+C in the CLI).</p>"},{"location":"driver-request-cancellation/#current-handling","title":"Current Handling","text":"<p>Janito's core driver flow is event-driven and supports cooperative, programmatic cancellation of in-progress requests using a <code>threading.Event</code> (commonly named <code>cancel_event</code>). This event is passed through the agent and driver layers and can be set by the consumer to signal that the current request should be aborted as soon as possible.</p>"},{"location":"driver-request-cancellation/#how-cooperative-cancellation-works","title":"How Cooperative Cancellation Works","text":"<ul> <li>A <code>threading.Event</code> object is created and passed as <code>cancel_event</code> to the agent or driver interface (e.g., <code>agent.chat(..., cancel_event=cancel_event)</code>).</li> <li>Drivers and agents check the state of <code>cancel_event</code> at key points during request processing (before starting, after API calls, and during long-running operations).</li> <li>If <code>cancel_event.is_set()</code> returns True, the driver should abort further processing, avoid sending new requests, and clean up resources promptly.</li> <li>This allows both user-initiated (e.g., Ctrl+C) and programmatic cancellation (e.g., from a UI button or another thread).</li> </ul>"},{"location":"driver-request-cancellation/#user-initiated-cancellation","title":"User-Initiated Cancellation","text":"<ul> <li>In CLI mode, users may interrupt a request using standard terminal signals (e.g., Ctrl+C). The Python runtime will raise a <code>KeyboardInterrupt</code>, which is handled by the CLI session loop to stop further processing and clean up.</li> <li>The agent logic will set the <code>cancel_event</code> in response to user interruption, ensuring downstream drivers respond promptly.</li> </ul>"},{"location":"driver-request-cancellation/#agenttool-initiated-cancellation","title":"Agent/Tool-Initiated Cancellation","text":"<ul> <li>Agents, tools, or external consumers can programmatically set the <code>cancel_event</code> to abort an in-progress request.</li> <li>This enables responsive UIs and advanced workflows where cancellation may be triggered by logic other than user interruption.</li> </ul>"},{"location":"driver-request-cancellation/#implementation-details","title":"Implementation Details","text":"<ul> <li>The <code>cancel_event</code> is an optional field in the <code>DriverInput</code> dataclass (see <code>janito/llm/driver_input.py</code>).</li> <li>Drivers are expected to check for cancellation at the start of processing and after any blocking or long-running operation (see <code>janito/llm/driver.py</code> and driver subclasses).</li> <li>Example usage and code references are available in <code>docs/llm-drivers.md</code>.</li> </ul>"},{"location":"driver-request-cancellation/#future-directions","title":"Future Directions","text":"<ul> <li>Streaming APIs: For drivers that support streaming, partial results may be available up to the point of cancellation.</li> <li>Graceful Cleanup: Continued improvements to resource management and cleanup on cancellation are planned.</li> </ul>"},{"location":"driver-request-cancellation/#affected-flows-when-cancellation-is-performed-at-the-agent-level","title":"Affected Flows When Cancellation is Performed at the Agent Level","text":"<p>When a cancellation is triggered at the agent level (e.g., by setting the <code>cancel_event</code> or via user interruption such as Ctrl+C), the following flows are affected:</p> <ol> <li>Agent Main Loop (<code>chat</code> method): The main conversation loop passes the <code>cancel_event</code> to the driver and monitors for user interruptions. If a cancellation is detected, it stops further processing and signals downstream components.</li> <li>Event Processing (<code>_process_next_response</code>): This method waits for events from the driver. On user interruption, it creates a <code>RequestFinished</code> event with status <code>cancelled</code> and puts it in the input queue, propagating cancellation.</li> <li>Driver Input Preparation (<code>_prepare_driver_input</code>): The <code>cancel_event</code> is attached to the <code>DriverInput</code> object, ensuring it is available to the driver for cooperative cancellation.</li> <li>Driver Processing (<code>process_driver_input</code> in <code>LLMDriver</code> and subclasses):</li> <li>Before starting, the driver checks if <code>cancel_event</code> is set and aborts if so.</li> <li>After API calls (and during long-running operations in subclasses), the driver checks <code>cancel_event</code> again and aborts if set.</li> <li>If cancellation is detected, a <code>RequestFinished</code> event with status <code>cancelled</code> is emitted to the output queue.</li> <li>Tool/Function Execution (within <code>_handle_response_received</code>): If tool calls are in progress, cancellation may prevent further tool execution or message handling, depending on when the event is set.</li> </ol> <p>This cooperative cancellation mechanism ensures that all major flows\u2014agent loop, driver processing, and tool execution\u2014respond promptly to cancellation requests, providing a responsive and robust user experience.</p>"},{"location":"driver-request-cancellation/#recommendations","title":"Recommendations","text":"<ul> <li>Use the <code>cancel_event</code> mechanism for both user-initiated and programmatic cancellation.</li> <li>For UI or API integrations, expose a way to set the <code>cancel_event</code> to allow users or logic to abort requests.</li> <li>For more details, see <code>docs/llm-drivers.md</code> and the relevant code in <code>janito/llm/agent.py</code>, <code>janito/llm/driver.py</code>, and driver implementations.</li> </ul>"},{"location":"driver-request-cancellation/#references","title":"References","text":"<ul> <li>See <code>docs/llm-drivers.md</code> for architecture and example usage.</li> <li>See CLI session handling for interruption logic.</li> <li>See <code>janito/llm/driver_input.py</code>, <code>janito/llm/agent.py</code>, and driver implementations for code-level details.</li> </ul>"},{"location":"drivers/","title":"LLM Driver Architecture and Implementation Guide","text":"<p>This document describes the architecture of the LLM driver system in Janito, focusing on the <code>LLMDriver</code> base class and the requirements for implementing a new provider-specific driver. It uses the OpenAI driver as a reference example.</p>"},{"location":"drivers/#overview-the-llmdriver-base-class","title":"Overview: The <code>LLMDriver</code> Base Class","text":"<p>All LLM drivers in Janito inherit from the abstract base class <code>LLMDriver</code> (<code>janito/llm/driver.py</code>). This class provides a threaded, queue-based interface for interacting with language model APIs in a provider-agnostic way.</p>"},{"location":"drivers/#key-responsibilities","title":"Key Responsibilities","text":"<ul> <li>Threaded Operation: Each driver runs a background thread that processes requests from an input queue and emits results/events to an output queue.</li> <li>Standardized Events: Drivers emit standardized events (e.g., <code>RequestStarted</code>, <code>ResponseReceived</code>, <code>RequestFinished</code>) for downstream consumers.</li> <li>Provider Abstraction: The base class defines abstract methods for provider-specific logic, ensuring a uniform interface for all drivers.</li> </ul>"},{"location":"drivers/#required-abstract-methods","title":"Required Abstract Methods","text":"<p>To implement a new driver, you must subclass <code>LLMDriver</code> and implement the following methods:</p> <ul> <li><code>def _prepare_api_kwargs(self, config, conversation)</code></li> <li> <p>Prepare the keyword arguments for the provider API call, including model name, parameters, and tool schemas if needed.</p> </li> <li> <p><code>def _call_api(self, driver_input: DriverInput)</code></p> </li> <li> <p>Execute the provider API call using the prepared arguments. Should handle cancellation and error reporting.</p> </li> <li> <p><code>def _convert_completion_message_to_parts(self, message)</code></p> </li> <li> <p>Convert the provider's response message into a list of standardized <code>MessagePart</code> objects (e.g., text, tool calls).</p> </li> <li> <p><code>def convert_history_to_api_messages(self, conversation_history)</code></p> </li> <li> <p>Convert the internal conversation history to the format required by the provider's API (e.g., a list of dicts for OpenAI).</p> </li> <li> <p><code>def _get_message_from_result(self, result)</code></p> </li> <li>Extract the relevant message object from the provider's API result for further processing.</li> </ul>"},{"location":"drivers/#threading-and-queues","title":"Threading and Queues","text":"<ul> <li>Each driver instance has its own <code>input_queue</code> and <code>output_queue</code>.</li> <li>Use the <code>start()</code> method to launch the driver's background thread.</li> <li>Submit requests by putting <code>DriverInput</code> objects into <code>input_queue</code>.</li> <li>Listen for events/results by reading from <code>output_queue</code>.</li> </ul>"},{"location":"drivers/#implementing-a-new-driver-checklist","title":"Implementing a New Driver: Checklist","text":"<ol> <li>Subclass <code>LLMDriver</code>.</li> <li>Implement all required abstract methods listed above.</li> <li>Handle provider-specific configuration (e.g., API keys, endpoints) in your constructor or via config objects.</li> <li>Emit standardized events using the provided event classes (<code>RequestStarted</code>, <code>ResponseReceived</code>, <code>RequestFinished</code>).</li> <li>Support cancellation by checking the <code>cancel_event</code> in <code>DriverInput</code> before and after API calls.</li> <li>Convert conversation history to the provider's required format.</li> <li>Convert provider responses to standardized message parts for downstream processing.</li> </ol>"},{"location":"drivers/#example-openai-driver","title":"Example: OpenAI Driver","text":"<p>See <code>janito/drivers/openai/driver.py</code> for a complete example. Highlights:</p> <ul> <li>Implements all required methods for the OpenAI API.</li> <li>Handles tool/function call schemas if tools are present.</li> <li>Converts conversation history to OpenAI's message format.</li> <li>Extracts usage and other metadata from the API response.</li> <li>Handles cancellation and error reporting robustly.</li> </ul>"},{"location":"drivers/#references","title":"References","text":"<ul> <li>Base class: <code>janito/llm/driver.py</code></li> <li>OpenAI driver: <code>janito/drivers/openai/driver.py</code></li> <li>Driver events: <code>janito/driver_events.py</code></li> </ul>"},{"location":"event-bus/","title":"Event Bus System Documentation","text":""},{"location":"event-bus/#overview","title":"Overview","text":"<p>The event bus is a central mechanism for publish/subscribe (pub/sub) communication in the system. It enables decoupled components to communicate by publishing and subscribing to events of various types.</p> <ul> <li>Location: <code>janito/event_bus/bus.py</code></li> <li>Singleton Instance: <code>event_bus</code></li> </ul>"},{"location":"event-bus/#event-architecture","title":"Event Architecture","text":"<ul> <li>Events are Python dataclasses (see <code>janito/event_types.py</code>) that represent occurrences or state changes in the system.</li> <li>Event Types are defined as subclasses of the base <code>Event</code> class (now located in <code>janito/event_bus/event.py</code>).</li> <li>Subscribers are functions or objects that listen for specific event types.</li> </ul>"},{"location":"event-bus/#defining-events","title":"Defining Events","text":"<ol> <li>Base Event Class:</li> <li>Located at <code>janito/event_bus/event.py</code>:      <code>python      from dataclasses import dataclass      from typing import ClassVar      @dataclass      class Event:          category: ClassVar[str] = \"generic\"</code></li> <li>Custom Event Types:</li> <li>Define new events by subclassing <code>Event</code> or its descendants in <code>janito/event_types.py</code>.</li> <li>Example:      <code>python      @dataclass      class RequestStarted(DriverEvent): class RequestFinished(DriverEvent):          payload: Any          # ...</code></li> </ol>"},{"location":"event-bus/#subscribing-to-events","title":"Subscribing to Events","text":"<p>To listen for events, subscribe a callback to an event type:</p> <pre><code>from janito.event_bus.bus import event_bus\nfrom janito.driver_events import RequestStarted, RequestFinished\n\ndef on_request_started(event):\n    print(f\"Request started: {event}\")\n\nevent_bus.subscribe(RequestStarted, on_request_started)\nevent_bus.subscribe(RequestFinished, on_request_finished)\n</code></pre>"},{"location":"event-bus/#unsubscribing-from-events","title":"Unsubscribing from Events","text":"<p>To stop listening:</p> <pre><code>event_bus.unsubscribe(RequestStarted, on_request_started)\nevent_bus.unsubscribe(RequestFinished, on_request_finished)\n</code></pre>"},{"location":"event-bus/#publishing-events","title":"Publishing Events","text":"<p>To notify subscribers of an event:</p> <pre><code>from janito.driver_events import RequestStarted, RequestFinished\nfrom janito.event_bus.bus import event_bus\n\nmy_event = RequestStarted(driver_name=\"driver1\", request_id=\"abc123\", payload={...})\nevent_bus.publish(my_event)\n</code></pre>"},{"location":"event-bus/#automatic-timestamping","title":"Automatic Timestamping","text":"<ul> <li>Every event published will have a <code>timestamp</code> attribute (UNIX epoch seconds) automatically set by the event bus.</li> <li>This is injected at publish time and is available to all subscribers:   <code>python   def on_request_started(event):       print(event.timestamp)  # Set automatically by event bus</code></li> </ul>"},{"location":"event-bus/#example","title":"Example","text":"<pre><code>from janito.driver_events import RequestStarted, RequestFinished\nfrom janito.event_bus.bus import event_bus\n\ndef log_event(event):\n    print(f\"[{event.timestamp}] Event: {event}\")\n\nevent_bus.subscribe(RequestStarted, log_event)\n\n# Later in code...\nevent = RequestStarted(driver_name=\"driver1\", request_id=\"abc123\", payload={\"foo\": \"bar\"})\nevent_bus.publish(event)\n</code></pre>"},{"location":"event-bus/#best-practices","title":"Best Practices","text":"<ul> <li>Do not manually add a <code>timestamp</code> field to event dataclasses; it is managed by the event bus.</li> <li>Use specific event types for clarity and maintainability.</li> <li>Unsubscribe handlers when they are no longer needed to avoid memory leaks.</li> </ul> <p>For more details, see the source code in <code>janito/event_bus/bus.py</code> and <code>janito/event_types.py</code>.</p>"},{"location":"google-setup/","title":"Google Gemini Setup","text":"<p>To use Google Gemini models with Janito, follow these steps:</p>"},{"location":"google-setup/#1-get-your-api-key","title":"1. Get Your API Key","text":"<ol> <li>Go to the Google Cloud Console</li> <li>Create a new project or select an existing one</li> <li>Enable the Generative Language API</li> <li>Navigate to \"APIs &amp; Services\" \u2192 \"Credentials\"</li> <li>Create an API key</li> </ol>"},{"location":"google-setup/#2-set-the-api-key","title":"2. Set the API Key","text":"<p>Set your Google API key using the CLI:</p> <pre><code>janito set-api-key --provider google --key YOUR_API_KEY_HERE\n</code></pre> <p>Or set it as an environment variable:</p> <pre><code>export GOOGLE_API_KEY=\"YOUR_API_KEY_HERE\"\n</code></pre>"},{"location":"google-setup/#3-available-models","title":"3. Available Models","text":"<p>Janito supports the following Google Gemini models:</p> <ul> <li><code>gemini-2.5-flash</code> - Fastest model for simple tasks</li> <li><code>gemini-2.5-pro</code> - Most capable model for complex tasks</li> <li><code>gemini-2.5-flash-lite-preview-06-17</code> - Lightweight version for low-latency applications</li> </ul>"},{"location":"google-setup/#4-usage-examples","title":"4. Usage Examples","text":""},{"location":"google-setup/#list-available-models","title":"List available models","text":"<pre><code>janito list-models --provider google\n</code></pre>"},{"location":"google-setup/#use-a-specific-model","title":"Use a specific model","text":"<pre><code>janito chat --provider google --model gemini-2.5-pro\n</code></pre>"},{"location":"google-setup/#set-as-default-provider","title":"Set as default provider","text":"<pre><code>janito set-config provider=google\n</code></pre>"},{"location":"google-setup/#notes","title":"Notes","text":"<ul> <li>Google Gemini is accessed through an OpenAI-compatible API endpoint</li> <li>The default model is <code>gemini-2.5-flash</code></li> <li>All models support streaming responses and tool usage</li> <li>Context window sizes vary by model (see Supported Models for details)</li> </ul> <p>For more information, visit the Google AI documentation.</p>"},{"location":"ibm-setup/","title":"IBM WatsonX Setup Guide","text":"<p>This guide walks you through setting up IBM WatsonX as your AI provider in Janito.</p>"},{"location":"ibm-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, you'll need:</p> <ol> <li>IBM Cloud Account: Create an account at IBM Cloud</li> <li>WatsonX AI Service: Enable the WatsonX AI service in your IBM Cloud account</li> <li>Project Setup: Create a WatsonX project to get your project ID</li> </ol>"},{"location":"ibm-setup/#step-1-get-your-api-key","title":"Step 1: Get Your API Key","text":"<ol> <li>Log in to IBM Cloud</li> <li>Go to Manage &gt; Access (IAM) &gt; API keys</li> <li>Click Create an IBM Cloud API key</li> <li>Give it a name (e.g., \"janito-watsonx\")</li> <li>Copy the API key - you'll need it for configuration</li> </ol>"},{"location":"ibm-setup/#step-2-create-a-watsonx-project","title":"Step 2: Create a WatsonX Project","text":"<ol> <li>Go to WatsonX</li> <li>Click Create project</li> <li>Choose Data science project type</li> <li>Give your project a name and description</li> <li>Once created, copy the Project ID from the project settings</li> </ol>"},{"location":"ibm-setup/#step-3-configure-janito","title":"Step 3: Configure Janito","text":""},{"location":"ibm-setup/#using-the-cli","title":"Using the CLI","text":"<p>Set up your IBM WatsonX credentials:</p> <pre><code># Set your IBM API key\njanito --set-api-key YOUR_IBM_API_KEY -p ibm\n\n# Set your WatsonX project ID\njanito --set-config ibm project_id YOUR_PROJECT_ID\n\n# Optional: Set space ID if using WatsonX spaces\njanito --set-config ibm space_id YOUR_SPACE_ID\n</code></pre>"},{"location":"ibm-setup/#using-environment-variables","title":"Using Environment Variables","text":"<p>Alternatively, you can set environment variables:</p> <pre><code>export WATSONX_API_KEY=\"your-api-key\"\nexport WATSONX_PROJECT_ID=\"your-project-id\"\nexport WATSONX_SPACE_ID=\"your-space-id\"  # optional\n</code></pre>"},{"location":"ibm-setup/#step-4-test-your-setup","title":"Step 4: Test Your Setup","text":"<p>Verify your IBM WatsonX setup is working:</p> <pre><code># Test with a simple prompt\njanito -p ibm \"Hello, how are you?\"\n\n# Use a specific model\njanito -p ibm -m ibm/granite-3-8b-instruct \"Explain quantum computing\"\n\n# Start interactive chat\njanito -p ibm --chat\n</code></pre>"},{"location":"ibm-setup/#available-models","title":"Available Models","text":"<p>IBM WatsonX provides several models through Janito:</p> <ul> <li>openai/gpt-oss-120b (default) - Open-source 120B model with thinking capabilities</li> <li>openai/gpt-oss-20b - Open-source 20B model with thinking capabilities</li> <li>ibm/granite-3-8b-instruct - IBM's Granite 3 8B Instruct model</li> <li>ibm/granite-3-3-8b-instruct - Updated Granite 3.3 8B Instruct model</li> <li>meta-llama/llama-3-1-70b-instruct - Meta Llama 3.1 70B</li> <li>meta-llama/llama-3-3-70b-instruct - Meta Llama 3.3 70B</li> <li>mistralai/mistral-large - Mistral Large model</li> <li>mistralai/mistral-large-2407 - Mistral Large 2407 version</li> </ul>"},{"location":"ibm-setup/#configuration-options","title":"Configuration Options","text":""},{"location":"ibm-setup/#set-ibm-as-default-provider","title":"Set IBM as Default Provider","text":"<pre><code>janito --set-config provider ibm\n</code></pre>"},{"location":"ibm-setup/#region-configuration","title":"Region Configuration","text":"<p>By default, Janito uses the US-South region. You can change this:</p> <pre><code>janito --set-config ibm region us-south\n# or\njanito --set-config ibm region eu-gb\n</code></pre>"},{"location":"ibm-setup/#custom-base-url","title":"Custom Base URL","text":"<p>If you need to use a custom endpoint:</p> <pre><code>janito --set-config ibm base_url https://your-custom-endpoint.com\n</code></pre>"},{"location":"ibm-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ibm-setup/#common-issues","title":"Common Issues","text":"<p>Authentication Error</p> <ul> <li>Verify your API key is correct</li> <li>Ensure your IBM Cloud account has WatsonX AI service enabled</li> <li>Check that your project ID is valid</li> </ul> <p>Model Not Found</p> <ul> <li>Ensure the model is available in your WatsonX project</li> <li>Check your subscription tier allows access to the model</li> <li>Verify the model name is spelled correctly</li> </ul> <p>Rate Limit Exceeded</p> <ul> <li>IBM WatsonX has rate limits based on your subscription tier</li> <li>Wait and retry, or consider upgrading your subscription</li> <li>Use smaller models for testing to reduce token consumption</li> </ul>"},{"location":"ibm-setup/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to see detailed API requests:</p> <pre><code>janito -p ibm --verbose \"Your prompt here\"\n</code></pre>"},{"location":"ibm-setup/#getting-help","title":"Getting Help","text":"<p>If you continue to have issues:</p> <ol> <li>Check the IBM WatsonX documentation</li> <li>Verify your IBM Cloud account permissions</li> <li>Ensure your WatsonX project is properly configured</li> <li>Contact IBM support for account-specific issues</li> </ol>"},{"location":"ibm-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about using profiles to manage different configurations</li> <li>Explore advanced prompting techniques</li> <li>Check out the supported models for more options</li> </ul>"},{"location":"llm-drivers-required-config/","title":"LLM Driver Required Config Pattern","text":"<p>Some LLM drivers (when implemented) may require additional configuration fields (beyond API key or model name) to operate correctly. The <code>required_config</code> class attribute is intended to enable each driver to declare these requirements explicitly, and for providers to validate config early. As of this writing, no LLM driver implementation is present in this directory; this document describes the intended pattern.</p>"},{"location":"llm-drivers-required-config/#how-to-use","title":"How to Use","text":"<ol> <li> <p>Declare requirements in your driver:</p> <p><code>python class AzureOpenAIModelDriver(OpenAIModelDriver):     required_config = {\"azure_endpoint\"}  # The config dict must contain this key.</code></p> </li> <li> <p>Validation on driver instantiation:</p> <p>Instantiation via <code>LLMProvider.get_driver_for_model</code> will check that all required fields are present in the passed config dict, and raise a <code>ValueError</code> if any are missing.</p> </li> <li> <p>Backwards compatible:</p> </li> <li>If <code>required_config</code> is not present, no validation is performed.</li> <li>Providers and code using drivers without required_config are unchanged.</li> </ol>"},{"location":"llm-drivers-required-config/#example-azure-openai","title":"Example: Azure OpenAI","text":"<p>If a model spec for Azure OpenAI uses <code>AzureOpenAIModelDriver</code>, the following config is required:</p> <pre><code>config = {\n    \"azure_endpoint\": \"https://example.openai.azure.com/\"\n}\n</code></pre> <p>Attempting to create the driver without this field will result in:</p> <pre><code>ValueError: Missing required config for AzureOpenAIModelDriver: azure_endpoint\n</code></pre>"},{"location":"llm-drivers-required-config/#extending-to-other-drivers","title":"Extending to Other Drivers","text":"<p>Other drivers may declare their own required fields (e.g., project_id, base_url) by providing a <code>required_config</code> class attribute as a set or list of key names.</p> <p>This pattern promotes robust, explicitly validated configuration for LLM drivers.</p>"},{"location":"llm-drivers/","title":"LLM Drivers Architecture","text":""},{"location":"llm-drivers/#overview","title":"Overview","text":"<p>The driver layer described below is intended to provide a unified, event-driven interface for interacting with various Large Language Model (LLM) providers (such as OpenAI, Google Gemini, etc.). However, as of this writing, the actual driver code (including the LLMDriver base class and its subclasses) is not present in this directory. The following describes the intended architecture and requirements, but no implementation is currently available here.</p>"},{"location":"llm-drivers/#key-concepts","title":"Key Concepts","text":""},{"location":"llm-drivers/#streaming-event-driven-interface","title":"Streaming, Event-Driven Interface","text":"<ul> <li>All drivers now use a threaded, queue-based input/output mechanism. The agent sends DriverInput objects to the input queue and reads aggregate DriverEvent objects (notably <code>ResponseReceived</code>) from the output queue.</li> <li>Drivers emit standardized events (e.g., <code>ResponseReceived</code>, <code>GenerationStarted</code>, <code>RequestFinished</code>, etc.) as the generation progresses. <code>RequestFinished</code> covers both success, error, and cancellation cases.</li> <li>The new <code>ResponseReceived</code> event contains all content, tool calls, and metadata for that turn, so consumers and agents can react more intelligently (especially for automatic tool invocation patterns).</li> </ul>"},{"location":"llm-drivers/#threading-and-cancellation","title":"Threading and Cancellation","text":"<ul> <li>The generation process runs in a background thread, ensuring that the main application/UI remains responsive.</li> <li>Cooperative cancellation is supported via a <code>threading.Event</code> passed to <code>stream_generate()</code>. Consumers can set this event to abort generation early.</li> <li>Once cancellation is received (i.e., the event is set), drivers will not execute any new tools or send any new requests to the LLM provider. Ongoing operations will be stopped as soon as possible, ensuring prompt and safe cancellation.</li> </ul>"},{"location":"llm-drivers/#consistency-and-extensibility","title":"Consistency and Extensibility","text":"<ul> <li>All drivers inherit from the <code>LLMDriver</code> abstract base class and follow the same event and threading conventions.</li> <li>Each driver handles provider-specific API calls, tool/function execution, and event emission internally, but always exposes the same external interface.</li> </ul>"},{"location":"llm-drivers/#example-usage","title":"Example Usage","text":"<pre><code>import threading\nfrom janito.driver_events import ResponseReceived, RequestFinished\n\ncancel_event = threading.Event()\nfor event in agent.chat(\n    prompt=\"Tell me a joke.\",\n    system_prompt=\"You are a witty assistant.\",\n    cancel_event=cancel_event\n):\n    if isinstance(event, ResponseReceived):\n        for part in event.content_parts:\n            print(part, end=\"\", flush=True)\n    elif isinstance(event, RequestFinished) and getattr(event, 'status', None) == 'error':\n        print(f\"\\n[Error: {event.error}]\")\n</code></pre>"},{"location":"llm-drivers/#supported-events","title":"Supported Events","text":"<ul> <li><code>ResponseReceived</code>: Aggregate response event containing all content parts, all tool calls, and associated metadata for the turn. The agent now listens for this event by default.</li> <li><code>GenerationStarted</code>: Generation process has begun.</li> <li><code>RequestStarted</code>, <code>RequestFinished</code>: API request lifecycle events. <code>RequestFinished</code> includes a <code>status</code> field which may be 'success', 'error', or 'cancelled'.</li> <li>(Legacy granular events such as <code>ContentPartFound</code> are no longer emitted by compliant drivers.)</li> <li>(Provider-specific events may also be emitted.)</li> </ul>"},{"location":"llm-drivers/#adding-a-new-driver","title":"Adding a New Driver","text":"<p>To add support for a new LLM provider:</p> <ol> <li>Subclass <code>LLMDriver</code>.</li> <li>Implement the <code>_process_driver_input()</code> method, which consumes a DriverInput object, performs LLM generation, and emits DriverEvent objects to the output queue.</li> <li>Emit standardized events as output is generated.</li> </ol>"},{"location":"llm-drivers/#provider-specific-notes","title":"Provider-Specific Notes","text":""},{"location":"llm-drivers/#google-gemini-genai-driver","title":"Google Gemini (genai) Driver","text":"<p>The Google Gemini driver (and all other modern drivers) now emits a single <code>ResponseReceived</code> event per turn, which includes both all content parts and all tool/function calls as parsed from the Gemini API response. Downstream consumers and the agent itself inspect the order and content of these lists to reproduce the true conversational order and context, enabling seamless advanced tool execution. No more per-part events if the driver is up-to-date.</p>"},{"location":"llm-drivers/#design-philosophy","title":"Design Philosophy","text":"<ul> <li>Responsiveness: All generation is non-blocking and can be cancelled at any time.</li> <li>Observability: Consumers can react to fine-grained events for real-time UIs, logging, or chaining.</li> <li>Simplicity: A single, modern interface for all drivers.</li> </ul>"},{"location":"mistral-setup/","title":"Mistral Setup Guide","text":"<p>This guide walks you through setting up Mistral AI models with Janito.</p>"},{"location":"mistral-setup/#overview","title":"Overview","text":"<p>Mistral AI provides a comprehensive suite of models including: - General-purpose models: Mistral Small, Medium, and Large - Code-focused models: Codestral for code generation and completion - Development-focused models: Devstral for agentic software development</p>"},{"location":"mistral-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Python 3.8+ installed</li> <li>Janito installed (<code>uv pip install janito</code>)</li> <li>Mistral API Key from La Plateforme</li> </ol>"},{"location":"mistral-setup/#quick-setup","title":"Quick Setup","text":""},{"location":"mistral-setup/#1-get-your-api-key","title":"1. Get Your API Key","text":"<ol> <li>Visit Mistral AI La Plateforme</li> <li>Sign up or log in to your account</li> <li>Navigate to API Keys section</li> <li>Create a new API key</li> <li>Copy the key for use in Janito</li> </ol>"},{"location":"mistral-setup/#2-configure-janito","title":"2. Configure Janito","text":"<p>Set your Mistral API key using one of these methods:</p>"},{"location":"mistral-setup/#method-1-environment-variable-recommended","title":"Method 1: Environment Variable (Recommended)","text":"<pre><code># Linux/macOS\nexport MISTRAL_API_KEY=\"your-api-key-here\"\n\n# Windows (PowerShell)\n$env:MISTRAL_API_KEY=\"your-api-key-here\"\n\n# Windows (Command Prompt)\nset MISTRAL_API_KEY=your-api-key-here\n</code></pre>"},{"location":"mistral-setup/#method-2-janito-cli","title":"Method 2: Janito CLI","text":"<pre><code>janito set-api-key mistral your-api-key-here\n</code></pre>"},{"location":"mistral-setup/#method-3-interactive-setup","title":"Method 3: Interactive Setup","text":"<pre><code>janito chat\n# Then use the !model command to select mistral and follow prompts\n</code></pre>"},{"location":"mistral-setup/#available-models","title":"Available Models","text":""},{"location":"mistral-setup/#general-purpose-models","title":"General Purpose Models","text":"<ul> <li>mistral-large-latest (default) - Most capable with 128k context</li> <li>mistral-medium-latest - Balanced performance with 32k context</li> <li>mistral-small-latest - Compact and efficient with 32k context</li> </ul>"},{"location":"mistral-setup/#code-focused-models","title":"Code-Focused Models","text":"<ul> <li>codestral-latest - Specialized for code generation with 256k context</li> <li>codestral-2405 - Previous version of code-focused model</li> </ul>"},{"location":"mistral-setup/#development-focused-models","title":"Development-Focused Models","text":"<ul> <li>devstral-small-latest - Optimized for agentic tool use</li> <li>devstral-medium-latest - Enhanced agentic capabilities</li> </ul>"},{"location":"mistral-setup/#usage-examples","title":"Usage Examples","text":""},{"location":"mistral-setup/#basic-chat","title":"Basic Chat","text":"<pre><code># Start chat with default model (mistral-large-latest)\njanito chat --provider mistral\n\n# Use specific model\njanito chat --provider mistral --model codestral-latest\n</code></pre>"},{"location":"mistral-setup/#single-shot-mode","title":"Single-Shot Mode","text":"<pre><code># Quick question\njanito \"Explain quantum computing\" --provider mistral\n\n# Code generation\njanito \"Write a Python function for fibonacci\" --provider mistral --model codestral-latest\n</code></pre>"},{"location":"mistral-setup/#configuration-file","title":"Configuration File","text":"<p>You can also configure Mistral in your Janito configuration:</p> <pre><code># ~/.janito/config.yaml\nproviders:\n  mistral:\n    api_key: \"your-api-key-here\"\n    model: \"mistral-large-latest\"\n</code></pre>"},{"location":"mistral-setup/#model-selection-tips","title":"Model Selection Tips","text":"<ul> <li>General conversations: Use <code>mistral-large-latest</code> for best results</li> <li>Code generation: Use <code>codestral-latest</code> for programming tasks</li> <li>Development workflows: Use <code>devstral-*</code> models for agentic development</li> <li>Cost optimization: Use <code>mistral-small-latest</code> for simpler tasks</li> </ul>"},{"location":"mistral-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mistral-setup/#common-issues","title":"Common Issues","text":"<ol> <li>\"Invalid API key\" error</li> <li>Verify your API key is correct</li> <li>Check if the key has proper permissions</li> <li> <p>Ensure no extra spaces in the key</p> </li> <li> <p>\"Model not found\" error</p> </li> <li>Check available models with: <code>janito list-models --provider mistral</code></li> <li> <p>Ensure you're using the exact model name</p> </li> <li> <p>Rate limiting</p> </li> <li>Mistral has rate limits based on your plan</li> <li>Consider upgrading your plan or implementing retry logic</li> </ol>"},{"location":"mistral-setup/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to see API requests:</p> <pre><code># Enable HTTP debug for Mistral\nexport MISTRAL_DEBUG_HTTP=1\njanito chat --provider mistral --verbose-api\n</code></pre>"},{"location":"mistral-setup/#testing-connection","title":"Testing Connection","text":"<p>Test your setup:</p> <pre><code># Ping the provider\njanito ping-providers\n\n# List available models\njanito list-models --provider mistral\n\n# Test with a simple query\njanito \"Hello, Mistral!\" --provider mistral\n</code></pre>"},{"location":"mistral-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"mistral-setup/#custom-base-url","title":"Custom Base URL","text":"<p>If you need to use a different endpoint (e.g., for enterprise deployments):</p> <pre><code>janito set-config mistral.base_url \"https://your-custom-endpoint.com/v1\"\n</code></pre>"},{"location":"mistral-setup/#model-parameters","title":"Model Parameters","text":"<p>You can set default parameters for Mistral models:</p> <pre><code>janito set-config mistral.temperature 0.5\njanito set-config mistral.max_tokens 2000\n</code></pre>"},{"location":"mistral-setup/#support","title":"Support","text":"<p>For additional help: - Check the Mistral AI documentation - Review Janito troubleshooting guides - Join our Discord community</p>"},{"location":"moonshot-setup/","title":"Configuring Janito for Moonshot","text":"<p>Janito supports Moonshot as an LLM provider. This guide explains how to configure Janito to use Moonshot models.</p>"},{"location":"moonshot-setup/#1-obtain-a-moonshot-api-key","title":"1. Obtain a Moonshot API Key","text":"<ul> <li>Sign up or log in at Moonshot AI Platform to get your API key.</li> <li>Navigate to the API Keys section in your dashboard to create and manage your keys.</li> </ul>"},{"location":"moonshot-setup/#2-set-your-moonshot-api-key-in-janito","title":"2. Set Your Moonshot API Key in Janito","text":"<p>You must specify both the API key and the provider name when configuring Janito for Moonshot:</p> <pre><code>janito --set-api-key YOUR_MOONSHOT_API_KEY -p moonshot\n</code></pre> <p>Replace <code>YOUR_MOONSHOT_API_KEY</code> with your actual Moonshot API key.</p>"},{"location":"moonshot-setup/#3-select-moonshot-as-the-provider","title":"3. Select Moonshot as the Provider","text":"<p>You can set Moonshot as your default provider:</p> <pre><code>janito --set provider=moonshot\n</code></pre> <p>Or specify it per command:</p> <pre><code>janito -p moonshot \"Your prompt here\"\n</code></pre>"},{"location":"moonshot-setup/#4-choose-a-moonshot-model","title":"4. Choose a Moonshot Model","text":"<p>Janito supports the following Moonshot models:</p> <ul> <li><code>kimi-k2-0905-preview</code> (default) - Advanced reasoning model with 128k context window</li> <li><code>kimi-k2-turbo-preview</code> - Turbo version of the advanced reasoning model with 128k context window</li> <li><code>kimi-k1-8k</code> - Standard model with 8k context window</li> <li><code>kimi-k1-32k</code> - Standard model with 32k context window</li> <li><code>kimi-k1-128k</code> - Standard model with 128k context window</li> </ul> <p>To select a model:</p> <pre><code>janito -p moonshot -m kimi-k1-32k \"Your prompt here\"\n</code></pre>"},{"location":"moonshot-setup/#5-verify-your-configuration","title":"5. Verify Your Configuration","text":"<p>Show your current configuration (the config file path will be shown at the top):</p> <pre><code>janito --show-config\n</code></pre>"},{"location":"moonshot-setup/#6-api-endpoint-information","title":"6. API Endpoint Information","text":"<p>Moonshot uses an OpenAI-compatible API endpoint:</p> <ul> <li>Base URL: <code>https://api.moonshot.ai/v1</code></li> <li>Authentication: Bearer token (API key)</li> <li>Format: OpenAI API format</li> </ul>"},{"location":"moonshot-setup/#7-troubleshooting","title":"7. Troubleshooting","text":"<ul> <li>Ensure your API key is correct and has sufficient credits.</li> <li>If you encounter issues, use <code>janito --list-providers</code> to verify Moonshot is available.</li> <li>Check your API key permissions and rate limits in the Moonshot AI Platform dashboard.</li> <li>For more help, see the main Configuration Guide or run <code>janito --help</code>.</li> </ul> <p>For more details on supported models and features, see Supported Providers &amp; Models.</p>"},{"location":"openai-setup/","title":"OpenAI Setup Guide","text":"<p>This guide will help you set up Janito to work with OpenAI's models.</p>"},{"location":"openai-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>An OpenAI account</li> <li>An API key from OpenAI</li> </ol>"},{"location":"openai-setup/#getting-an-api-key","title":"Getting an API Key","text":"<ol> <li>Go to OpenAI's API Keys page</li> <li>Sign in to your OpenAI account</li> <li>Click on \"Create new secret key\"</li> <li>Copy the generated key and save it in a secure location</li> </ol>"},{"location":"openai-setup/#configuration","title":"Configuration","text":"<p>You can configure your OpenAI API key in several ways:</p>"},{"location":"openai-setup/#option-1-using-the-cli","title":"Option 1: Using the CLI","text":"<pre><code>janito --set-api-key openai YOUR_API_KEY\n</code></pre>"},{"location":"openai-setup/#option-2-environment-variable","title":"Option 2: Environment Variable","text":"<p>Set the <code>OPENAI_API_KEY</code> environment variable:</p> <pre><code>export OPENAI_API_KEY=YOUR_API_KEY\n</code></pre> <p>On Windows:</p> <pre><code>set OPENAI_API_KEY=YOUR_API_KEY\n</code></pre>"},{"location":"openai-setup/#option-3-configuration-file","title":"Option 3: Configuration File","text":"<p>Add the following to your Janito configuration file:</p> <pre><code>providers:\n  openai:\n    api_key: YOUR_API_KEY\n</code></pre>"},{"location":"openai-setup/#available-models","title":"Available Models","text":"<p>Janito supports the following OpenAI models:</p> <ul> <li>GPT-5 (default)</li> <li>GPT-5 Mini</li> <li>GPT-5 Nano</li> <li>GPT-4</li> <li>GPT-4 Turbo</li> <li>GPT-3.5 Turbo</li> </ul>"},{"location":"openai-setup/#usage","title":"Usage","text":"<p>After configuration, you can use OpenAI models with Janito:</p> <pre><code># Use the default model (GPT-5)\njanito \"Explain quantum computing\"\n\n# Specify a specific model\njanito -m gpt-4 \"Explain quantum computing\"\n\n# Use in chat mode\njanito -c\n\n# Use in chat mode with a specific model\njanito -c -m gpt-4-turbo\n</code></pre>"},{"location":"openai-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Verify your API key is correct and active</li> <li>Check that you have sufficient credits in your OpenAI account</li> <li>Ensure your network connection can reach OpenAI's API endpoints</li> </ol>"},{"location":"provider-platform-access/","title":"Provider Platform and Documentation Access","text":"<p>This document categorizes providers based on both platform/documentation accessibility and model quality tiers, helping users make informed decisions about which providers to prioritize.</p>"},{"location":"provider-platform-access/#high-quality-models-with-full-platform-access","title":"High-Quality Models with Full Platform Access","text":"<p>These providers offer premium models with complete platform and documentation accessibility.</p> Provider Platform Access Documentation API Docs Model Quality Notes Google AI Studio Gemini API Docs API Reference \ud83c\udfc6 Premium Gemini 2.5 Pro/Flash - Industry leading IBM WatsonX IBM Cloud Console WatsonX Docs API Reference \ud83c\udfc6 Premium Granite + hosted Llama/Mistral Anthropic Console API Docs API Reference \ud83c\udfc6 Premium Claude 3.7 Sonnet - Top reasoning"},{"location":"provider-platform-access/#high-quality-models-with-restricted-access","title":"High-Quality Models with Restricted Access","text":"<p>Premium models but limited platform/documentation access.</p> Provider Platform Access Documentation API Docs Model Quality Status OpenAI Platform API Docs API Reference \ud83c\udfc6 Premium \u274c All Blocked DeepSeek Platform API Docs API Reference \ud83c\udfc6 Premium \u274c All Blocked"},{"location":"provider-platform-access/#quality-open-source-models-with-full-access","title":"Quality Open-Source Models with Full Access","text":"<p>Open-source/open-weight models with complete accessibility.</p> Provider Platform Access Documentation API Docs Model Quality Notes Alibaba Alibaba Cloud Console Model Studio Help API Reference \ud83e\udd47 High Qwen3 235B - Leading open-source Cerebras API Dashboard Inference Docs API Docs \ud83e\udd47 High Qwen-3 32B - Fast inference Moonshot Platform API Docs API Reference \ud83e\udd48 Medium Kimi K2 - Competitive open-source Z.ai API Management Model API Docs API Reference \ud83e\udd48 Medium GLM-4.5 - Solid performance"},{"location":"provider-platform-access/#specialized-models","title":"Specialized Models","text":"Provider Platform Access Documentation API Docs Model Quality Specialization Mistral Console API Docs API Reference \ud83e\udd48 Medium Codestral for code, Devstral for agents"},{"location":"provider-platform-access/#status-legend","title":"Status Legend","text":""},{"location":"provider-platform-access/#access-levels","title":"Access Levels","text":"<ul> <li>\u2705 Full Access: Both platform and documentation are publicly accessible</li> <li>\u26a0\ufe0f Partial Access: Documentation available but platform/dashboard blocked</li> <li>\u274c Blocked: Both platform and documentation are inaccessible (403 errors)</li> </ul>"},{"location":"provider-platform-access/#model-quality-tiers","title":"Model Quality Tiers","text":"<ul> <li>\ud83c\udfc6 Premium: Industry-leading proprietary models (GPT-4 class)</li> <li>\ud83e\udd47 High: Top-tier open-source models (Qwen-3, Llama-3.3 class)</li> <li>\ud83e\udd48 Medium: Solid open-source models with competitive performance</li> </ul>"},{"location":"provider-platform-access/#usage-recommendations","title":"Usage Recommendations","text":""},{"location":"provider-platform-access/#for-production-use","title":"For Production Use","text":"<ol> <li>Google or IBM WatsonX - Full access + premium models</li> <li>Alibaba or Cerebras - Full access + high-quality open-source</li> </ol>"},{"location":"provider-platform-access/#for-developmenttesting","title":"For Development/Testing","text":"<ol> <li>Alibaba Qwen3 - Best open-source performance</li> <li>Cerebras - Fast inference for Qwen-3 models</li> <li>Moonshot or Z.ai - Good alternatives</li> </ol>"},{"location":"provider-platform-access/#for-specialized-tasks","title":"For Specialized Tasks","text":"<ul> <li>Mistral Codestral - Code generation</li> <li>Anthropic Claude - Complex reasoning (if accessible)</li> </ul>"},{"location":"provider-platform-access/#notes","title":"Notes","text":"<ul> <li>API Endpoints: All API base URLs return 404 when accessed directly without authentication (expected behavior)</li> <li>Authentication: All providers require valid API keys for actual API usage</li> <li>Regional Restrictions: Some providers may have additional access restrictions based on geographic location</li> <li>Azure OpenAI: Custom deployments available through Azure (see Azure OpenAI Guide)</li> </ul>"},{"location":"providers/","title":"Supported Providers","text":"<p>Janito supports the following LLM providers:</p>"},{"location":"providers/#openai","title":"OpenAI","text":"<ul> <li>API Key Env Var: <code>OPENAI_API_KEY</code></li> <li>Base URL: <code>https://api.openai.com/v1</code></li> <li>Default Model: <code>gpt-5</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#anthropic","title":"Anthropic","text":"<ul> <li>API Key Env Var: <code>ANTHROPIC_API_KEY</code></li> <li>Base URL: <code>https://api.anthropic.com/v1/</code></li> <li>Default Model: <code>claude-3-7-sonnet-20250219</code></li> <li>Driver: <code>OpenAIModelDriver</code> (OpenAI-compatible endpoint)</li> </ul>"},{"location":"providers/#google-gemini","title":"Google Gemini","text":"<ul> <li>API Key Env Var: <code>GOOGLE_API_KEY</code></li> <li>Base URL: <code>https://generativelanguage.googleapis.com/v1beta/openai/</code></li> <li>Default Model: <code>gemini-2.5-flash</code></li> <li>Driver: <code>OpenAIModelDriver</code> (OpenAI-compatible endpoint)</li> </ul>"},{"location":"providers/#mistral","title":"Mistral","text":"<ul> <li>API Key Env Var: <code>MISTRAL_API_KEY</code></li> <li>Base URL: <code>https://api.mistral.ai/v1</code></li> <li>Default Model: <code>mistral-large-latest</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#cerebras","title":"Cerebras","text":"<ul> <li>API Key Env Var: <code>CEREBRAS_API_KEY</code></li> <li>Base URL: <code>https://api.cerebras.ai/v1</code></li> <li>Default Model: <code>qwen-3-coder-480b</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#zai","title":"Z.AI","text":"<ul> <li>API Key Env Var: <code>ZAI_API_KEY</code></li> <li>Base URL: <code>https://api.z.ai/v1</code></li> <li>Default Model: <code>glm-4.5</code></li> <li>Driver: <code>ZAIModelDriver</code></li> </ul>"},{"location":"providers/#alibaba-qwen","title":"Alibaba Qwen","text":"<ul> <li>API Key Env Var: <code>ALIBABA_API_KEY</code></li> <li>Base URL: <code>https://dashscope-intl.aliyuncs.com/compatible-mode/v1</code></li> <li>Default Model: <code>qwen3-next-80b-a3b-instruct</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#deepseek","title":"DeepSeek","text":"<ul> <li>API Key Env Var: <code>DEEPSEEK_API_KEY</code></li> <li>Base URL: <code>https://api.deepseek.com/v1</code></li> <li>Default Model: <code>deepseek-chat</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#moonshot","title":"Moonshot","text":"<ul> <li>API Key Env Var: <code>MOONSHOT_API_KEY</code></li> <li>Base URL: <code>https://api.moonshot.ai/v1</code></li> <li>Default Model: <code>kimi-k2-0905-preview</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#ibm-watsonx","title":"IBM WatsonX","text":"<ul> <li>API Key Env Var: <code>WATSONX_API_KEY</code></li> <li>Project ID Env Var: <code>WATSONX_PROJECT_ID</code></li> <li>Space ID Env Var: <code>WATSONX_SPACE_ID</code></li> <li>Base URL: <code>https://us-south.ml.cloud.ibm.com</code></li> <li>Default Model: <code>ibm/granite-3-3-8b-instruct</code></li> <li>Driver: <code>OpenAIModelDriver</code></li> </ul>"},{"location":"providers/#azure-openai","title":"Azure OpenAI","text":"<ul> <li>API Key Env Var: <code>AZURE_OPENAI_API_KEY</code></li> <li>Deployment Name Config: <code>azure_deployment_name</code></li> <li>Base URL: Provider-specific (configured via deployment)</li> <li>Default Model: <code>azure_openai_deployment</code></li> <li>Driver: <code>AzureOpenAIModelDriver</code></li> </ul> <p>Note: For Azure OpenAI, you must specify your deployment name using <code>--model YOUR_DEPLOYMENT_NAME</code> or set it in config with <code>janito set-config azure_deployment_name=your-deployment-name</code>.</p> <p>For detailed model specifications per provider, see Supported Models.</p>"},{"location":"public-sources/","title":"Public Sources and Government Data","text":"<p>This section provides information about publicly available government and institutional data sources that can be useful for research, analysis, and development work.</p>"},{"location":"public-sources/#us-federal-government-sources-available-public-data","title":"U.S. Federal Government Sources - Available Public Data","text":"Source URL Content Type Key Data Available IRS.gov - Internal Revenue Service https://www.irs.gov Tax information, forms, publications Tax forms, publications, tax statistics Congressional Budget Office (CBO) https://www.cbo.gov Budget analysis, economic forecasts Federal budget analysis, economic projections Bureau of Economic Analysis (BEA) https://www.bea.gov GDP, economic data, industry stats GDP reports, economic indicators, industry data Office of Management and Budget (OMB) https://www.whitehouse.gov/omb/ Federal budget, management policies Budget documents, policy information Bureau of the Fiscal Service https://www.fiscal.treasury.gov Treasury reports, payment systems Treasury reports, federal payment data Government Accountability Office (GAO) https://www.gao.gov Government audits, investigations Audit reports, government oversight data Federal Reserve Board https://www.federalreserve.gov Monetary policy, banking regulations Economic data, policy statements, banking info U.S. Census Bureau https://www.census.gov Demographic, economic, geographic data Population data, economic census, business statistics"},{"location":"public-sources/#api-access-points","title":"API Access Points","text":""},{"location":"public-sources/#official-apis-available","title":"Official APIs Available","text":"<p>Many government sites offer official APIs for programmatic access:</p> <ul> <li>BEA API: https://apps.bea.gov/api/ - Economic data and GDP statistics</li> <li>Census API: https://api.census.gov/ - Demographic and business data</li> <li>Federal Reserve API: Various endpoints for economic indicators</li> <li>GAO API: Government audit and oversight data</li> <li>IRS SOI Tax Stats: Tax statistics and income data</li> </ul>"},{"location":"public-sources/#datagov-integration","title":"Data.gov Integration","text":"<p>Data.gov (https://www.data.gov/) serves as the central repository for government datasets:</p> <ul> <li>Over 250,000 datasets available</li> <li>Searchable by topic, agency, and format</li> <li>Direct download links and API access</li> <li>Regular updates and new dataset additions</li> </ul>"},{"location":"public-sources/#best-practices-for-access","title":"Best Practices for Access","text":"<ol> <li>Respect Rate Limits: Government sites often have rate limiting</li> <li>Use Official APIs: Many sites provide official APIs for programmatic access</li> <li>Check Terms of Service: Review usage terms before automated access</li> <li>Cache Data: Store frequently accessed data locally to reduce server load</li> <li>User-Agent Headers: Use appropriate user-agent strings when accessing programmatically</li> </ol>"},{"location":"public-sources/#integration-with-janito","title":"Integration with Janito","text":"<p>These sources can be integrated with Janito for research and analysis:</p> <ul> <li>Use URL fetching tools to retrieve data</li> <li>Parse structured data for analysis</li> <li>Combine with code execution for data processing</li> <li>Generate reports based on public data</li> </ul> <p>For specific integration examples, see the tools documentation and guides.</p>"},{"location":"security/","title":"Path Security in Janito","text":"<p>Janito enforces path security for all file and directory arguments passed to tools. This is designed to prevent accidental or malicious access to files outside the intended working directory.</p>"},{"location":"security/#how-path-security-works","title":"How Path Security Works","text":"<ul> <li>By default, any tool argument that looks like a file or directory path is checked to ensure it is within the allowed working directory (<code>workdir</code>).</li> <li>If a path is outside the allowed <code>workdir</code>, the operation is blocked and a security error is raised.</li> <li>This enforcement is automatic for all tools executed via the tools adapter if a <code>workdir</code> is set.</li> </ul>"},{"location":"security/#disabling-path-security","title":"Disabling Path Security","text":"<p>You can disable this restriction using the <code>-u</code> or <code>--unrestricted</code> CLI flag. Disabling path security is dangerous and should only be done if you trust your prompt, tools, and environment.</p> <pre><code>janito -u \"Do something with C:/Windows/System32/hosts\"\n</code></pre> <ul> <li>When path security is disabled, tools can access any file or directory path, including sensitive system files.</li> <li>Only use this option for trusted workflows or debugging.</li> </ul>"},{"location":"security/#example","title":"Example","text":"<p>If <code>workdir</code> is <code>/home/user/project</code> and a tool is called with <code>{ \"path\": \"/etc/passwd\" }</code>, the call will be rejected unless <code>-u</code> is specified.</p>"},{"location":"security/#implementation-details","title":"Implementation Details","text":"<ul> <li>Path security is implemented in <code>janito/tools/path_security.py</code> and integrated in the tools adapter.</li> <li>See the Developer Guide for more technical details.</li> </ul>"},{"location":"security/#see-also","title":"See Also","text":"<ul> <li>CLI Options</li> <li>Tools Developer Guide</li> </ul>"},{"location":"supported-providers-models/","title":"Supported Providers and Models","text":"<p>\ud83d\udca1 Quick Tip: Use the convenient <code>model@provider</code> syntax to specify both model and provider in one argument: <code>janito -m gpt-4@openai \"Your prompt\"</code></p> <p>This page lists the supported providers and their available models, organized by openness and sorted alphabetically within each category.</p> <p>\ud83d\udccb Platform &amp; Documentation Access: For information about which providers have publicly accessible platforms and documentation vs. blocked access, see Platform &amp; Documentation Access.</p>"},{"location":"supported-providers-models/#open-source-open-weight-models","title":"Open-Source / Open-Weight Models","text":""},{"location":"supported-providers-models/#alibaba","title":"Alibaba","text":"<ul> <li>Qwen3 235B A22B Instruct (default) - Latest 1M context model</li> <li>Qwen3 235B A22B Thinking - Reasoning-focused version</li> <li>Qwen3 30B A3B Instruct - Compact 1M context model</li> <li>Qwen3 30B A3B Thinking - Compact reasoning version</li> <li>Qwen3 Coder Plus - Specialized for programming tasks</li> <li>Qwen3 Coder 480B - Large-scale coding model</li> <li>Qwen Turbo - High-speed general purpose</li> <li>Qwen Plus - Balanced performance</li> <li>Qwen Max - Maximum capability</li> </ul>"},{"location":"supported-providers-models/#cerebras","title":"Cerebras","text":"<p>Production Models:</p> <ul> <li>Qwen-3 32B - General instruction following</li> </ul> <p>Preview Models:</p> <ul> <li>Qwen-3 Coder 480B - Programming-focused with 32k context</li> <li>Qwen-3 235B A22B Instruct - Large-scale instruction model</li> <li>Qwen-3 235B A22B Thinking - Reasoning-focused version</li> <li>GPT-OSS 120B - Open-source model</li> </ul> <p>Notes:</p> <ul> <li>All Cerebras models support 128k context window</li> <li>Models are optimized for low-latency inference</li> <li>Pricing varies by model size and capability</li> </ul>"},{"location":"supported-providers-models/#deepseek","title":"DeepSeek","text":"<ul> <li>DeepSeek Chat (default) - General purpose chat model (128K context)</li> <li>DeepSeek Reasoner - Specialized for complex reasoning tasks (128K context)</li> </ul>"},{"location":"supported-providers-models/#mistral","title":"Mistral","text":"<ul> <li>Mistral Large Latest (default) - Most capable Mistral model with 128k context</li> <li>Mistral Medium Latest - Balanced performance with 32k context</li> <li>Mistral Small Latest - Compact and efficient with 32k context</li> <li>Codestral Latest - Specialized for code generation with 256k context</li> <li>Codestral 2405 - Previous version of code-focused model</li> <li>Devstral Small Latest - Optimized for agentic tool use in software development</li> <li>Devstral Medium Latest - Enhanced agentic capabilities for development tasks</li> </ul> <p>Mistral provides both general-purpose and specialized models, with Codestral specifically designed for code generation and Devstral for agentic software development.</p> <p>For setup instructions, see the Mistral Setup Guide.</p>"},{"location":"supported-providers-models/#moonshot","title":"Moonshot","text":"<ul> <li>Kimi K2 0905 Preview (default) - Latest generation with enhanced performance</li> <li>Kimi K2 Turbo Preview - Turbo version with optimized speed</li> <li>Kimi K2 0711 Preview - Previous preview version</li> </ul> <p>Moonshot provides open-source Kimi models with competitive performance.</p>"},{"location":"supported-providers-models/#zai","title":"Z.AI","text":"<ul> <li>GLM-4.5 (default) - Advanced reasoning and conversation</li> <li>GLM-4.5 Air - Compact and efficient version</li> </ul>"},{"location":"supported-providers-models/#ibm-watsonx","title":"IBM WatsonX","text":"<p>Open-Source Models:</p> <ul> <li>openai/gpt-oss-120b (default) - Open-source 120B model with thinking capabilities</li> <li>openai/gpt-oss-20b - Open-source 20B model with thinking capabilities</li> </ul> <p>IBM Granite Models:</p> <ul> <li>ibm/granite-3-8b-instruct - IBM's Granite 3 8B Instruct model with 128K context</li> <li>ibm/granite-3-3-8b-instruct - Updated Granite 3.3 8B Instruct model</li> </ul> <p>Hosted Models:</p> <ul> <li>meta-llama/llama-3-1-70b-instruct - Meta Llama 3.1 70B hosted on WatsonX</li> <li>meta-llama/llama-3-3-70b-instruct - Meta Llama 3.3 70B hosted on WatsonX</li> <li>mistralai/mistral-large - Mistral Large model hosted on WatsonX</li> <li>mistralai/mistral-large-2407 - Mistral Large 2407 version</li> </ul> <p>IBM WatsonX provides access to IBM's Granite models as well as popular open-source models hosted on their platform. All models support 128K context windows.</p>"},{"location":"supported-providers-models/#proprietary-models","title":"Proprietary Models","text":""},{"location":"supported-providers-models/#anthropic","title":"Anthropic","text":"<ul> <li>Claude 3.7 Sonnet (default) - Latest Claude model with enhanced reasoning</li> <li>Claude 4 Opus - Most capable Claude model (preview)</li> <li>Claude 4 Sonnet - Balanced performance and capability (preview)</li> <li>Claude 3.5 Sonnet - Previous generation, still highly capable</li> <li>Claude 3.5 Haiku - Fast and efficient</li> <li>Claude 3 Haiku - Compact and cost-effective</li> </ul>"},{"location":"supported-providers-models/#google","title":"Google","text":"<ul> <li>Gemini 2.5 Flash (default) - Fast and efficient</li> <li>Gemini 2.5 Pro - Advanced capabilities with extended context</li> <li>Gemini 2.5 Flash-Lite Preview - Lightweight preview version</li> </ul>"},{"location":"supported-providers-models/#openai","title":"OpenAI","text":"<ul> <li>GPT-5 (default) - Latest generation with advanced reasoning</li> <li>GPT-5 Mini - Compact version of GPT-5</li> <li>GPT-5 Nano - Ultra-compact version</li> <li>GPT-4.1 - Enhanced GPT-4 with improved capabilities</li> <li>GPT-4.1-mini - Balanced performance and efficiency</li> <li>GPT-4.1-nano - Lightweight version</li> <li>GPT-4 Turbo - High-performance GPT-4 variant</li> <li>GPT-4o - Multimodal GPT-4 optimized for chat</li> <li>GPT-4o-mini - Compact multimodal version</li> <li>o3 - Advanced reasoning model</li> <li>o3-mini - Compact reasoning model</li> <li>o4-mini - Latest mini reasoning model</li> <li>GPT-3.5 Turbo - Cost-effective general purpose</li> </ul> <p>For setup instructions, see the OpenAI Setup Guide.</p>"},{"location":"supported-providers-models/#azure-openai","title":"Azure OpenAI","text":"<ul> <li>Azure OpenAI Deployment - Custom Azure OpenAI deployments</li> </ul> <p>For setup instructions, see Using Azure OpenAI with Janito.</p>"},{"location":"tools-index/","title":"Tools Index","text":"<p>Janito provides a comprehensive set of tools for file operations, code execution, web access, and more. Tools can be selectively disabled using the disabled tools configuration.</p>"},{"location":"tools-index/#available-tools","title":"Available Tools","text":""},{"location":"tools-index/#visualization-tools","title":"Visualization Tools","text":""},{"location":"tools-index/#show_image","title":"show_image","text":"<p>Display an image inline in the terminal using rich.</p> <p>Arguments: - path (str): Path to the image file. - width (int, optional): Target width in terminal cells. If unset, auto-fit. - height (int, optional): Target height in terminal rows. If unset, auto-fit. - preserve_aspect (bool, optional): Preserve aspect ratio. Default: True.</p> <p>Returns: - Status message indicating display result or error details.</p> <p>Example Usage: - show a PNG: <code>show_image(path=\"img/tux.png\", width=60)</code></p>"},{"location":"tools-index/#show_image_grid","title":"show_image_grid","text":"<p>Display multiple images in a grid inline in the terminal using rich.</p> <p>Arguments: - paths (list[str]): List of image file paths. - columns (int, optional): Number of columns in the grid. Default: 2. - width (int, optional): Max width for each image cell. Default: None (auto). - height (int, optional): Max height for each image cell. Default: None (auto). - preserve_aspect (bool, optional): Preserve aspect ratio. Default: True.</p> <p>Returns: - Status string summarizing the grid display.</p> <p>Example Usage: - <code>show_image_grid(paths=[\"img/tux.png\", \"img/tux_display.png\"], columns=2, width=40)</code></p> <ul> <li><code>height</code> (int, optional): Chart height. Defaults to 20.</li> </ul> <p>Returns:</p> <ul> <li>Formatted chart display in terminal or error message.</li> </ul> <p>Example Usage:</p>"},{"location":"tools-index/#web-tools","title":"Web Tools","text":""},{"location":"tools-index/#open_url","title":"open_url","text":"<p>Opens the supplied URL or local file in the default web browser.</p> <p>Arguments:</p> <ul> <li><code>url</code> (str): The URL or local file path (as a file:// URL) to open. Supports both web URLs (http, https) and local files (file://).</li> </ul> <p>Returns:</p> <ul> <li>Status message indicating the result.</li> </ul> <p>Example Usage:</p> <ul> <li>Open a website: <code>open_url(url=\"https://example.com\")</code></li> <li>Open a local file: <code>open_url(url=\"file:///C:/path/to/file.html\")</code></li> </ul> <p>This tool replaces the previous <code>open_html_in_browser</code> tool, and can be used for both web and local files.</p>"},{"location":"tools-index/#system-tools","title":"System Tools","text":""},{"location":"tools-index/#run_bash_command","title":"run_bash_command","text":"<p>Execute a non-interactive command using the bash shell and capture live output.</p> <p>Arguments:</p> <ul> <li><code>command</code> (str): The bash command to execute.</li> <li><code>timeout</code> (int): Timeout in seconds for the command. Defaults to 60.</li> <li><code>require_confirmation</code> (bool): If True, require user confirmation before running. Defaults to False.</li> <li><code>requires_user_input</code> (bool): If True, warns that the command may require user input and might hang. Defaults to False.</li> <li><code>silent</code> (bool): If True, suppresses progress and status messages. Defaults to False.</li> </ul> <p>Returns:</p> <ul> <li>File paths and line counts for stdout and stderr.</li> </ul> <p>Example Usage:</p> <ul> <li>List files: <code>run_bash_command(command=\"ls -la\")</code></li> <li>Git status: <code>run_bash_command(command=\"git status\")</code></li> <li>Complex pipeline: <code>run_bash_command(command=\"find . -name '*.py' | head -10\")</code></li> </ul>"},{"location":"tools-index/#run_powershell_command","title":"run_powershell_command","text":"<p>Execute a non-interactive command using the PowerShell shell and capture live output.</p> <p>Arguments:</p> <ul> <li><code>command</code> (str): The PowerShell command to execute. This string is passed directly to PowerShell using the --Command argument (not as a script file).</li> <li><code>timeout</code> (int): Timeout in seconds for the command. Defaults to 60.</li> <li><code>require_confirmation</code> (bool): If True, require user confirmation before running. Defaults to False.</li> <li><code>requires_user_input</code> (bool): If True, warns that the command may require user input and might hang. Defaults to False.</li> <li><code>silent</code> (bool): If True, suppresses progress and status messages. Defaults to False.</li> </ul> <p>Returns:</p> <ul> <li>Output and status message, or file paths/line counts if output is large.</li> </ul> <p>Example Usage:</p> <ul> <li>List processes: <code>run_powershell_command(command=\"Get-Process\")</code></li> <li>File operations: <code>run_powershell_command(command=\"Get-ChildItem -Path . -Recurse\")</code></li> <li>System info: <code>run_powershell_command(command=\"Get-ComputerInfo\")</code></li> </ul>"},{"location":"tools-index/#search_text","title":"search_text","text":"<p>Search for a text query in files or directories.</p> <p>Arguments:</p> <ul> <li><code>paths</code> (str): Space-separated list of file or directory paths to search in.</li> <li><code>query</code> (str): Text or regular expression to search for.</li> <li><code>use_regex</code> (bool): Treat <code>query</code> as a regex pattern (default: False).</li> <li><code>case_sensitive</code> (bool): Enable case-sensitive search (default: False).</li> <li><code>max_depth</code> (int): Maximum directory depth to search (default: 0 = unlimited).</li> <li><code>max_results</code> (int): Maximum matching lines to return (default: 100).</li> <li><code>count_only</code> (bool): Return only match counts instead of lines (default: False).</li> </ul> <p>Returns:</p> <ul> <li>Matching lines with file paths and line numbers, or match counts if <code>count_only=True</code>.</li> </ul> <p>Example Usage:</p> <ul> <li>Plain-text search: <code>search_text(paths=\"src\", query=\"TODO\")</code></li> <li>Regex search: <code>search_text(paths=\"src tests\", query=r\"def\\s+\\w+\", use_regex=True)</code></li> <li>Case-insensitive count: <code>search_text(paths=\"docs\", query=\"janito\", case_sensitive=False, count_only=True)</code></li> </ul>"},{"location":"tools-index/#tool-management","title":"Tool Management","text":""},{"location":"tools-index/#disabling-tools","title":"Disabling Tools","text":"<p>You can disable specific tools using configuration:</p> <pre><code># Disable interactive prompts\njanito --set disabled_tools=ask_user\n\n# Disable code execution\njanito --set disabled_tools=python_code_run,run_powershell_command\n\n# View current disabled tools and config file path\njanito --show-config\n</code></pre>"},{"location":"tools-index/#listing-available-tools","title":"Listing Available Tools","text":"<p>See all currently available tools:</p> <pre><code>janito --list-tools\n</code></pre> <p>For complete documentation on tool disabling, see the Disabling Tools Guide.</p>"},{"location":"tools-natural-results/","title":"Natural Results: Human-Friendly Output from Janito Tools","text":""},{"location":"tools-natural-results/#why-janito-tools-use-unstructured-line-based-output","title":"Why Janito Tools Use Unstructured, Line-Based Output","text":"<p>Janito's tools are designed to provide results in a natural, unstructured, line-based format\u2014the same style commonly found in code examples, tutorials, and instructional materials. This approach is intentional and is based on several key considerations:</p>"},{"location":"tools-natural-results/#1-familiarity-and-clarity","title":"1. Familiarity and Clarity","text":"<ul> <li>Most developers are accustomed to reading and understanding code in its natural, unannotated form. Code examples, documentation, and learning resources rarely use diff formats; instead, they present the code as it should appear after edits.</li> <li>By outputting results in this familiar format, Janito ensures that users can quickly understand and apply the changes without needing to mentally parse diff markers or context lines.</li> </ul>"},{"location":"tools-natural-results/#2-avoiding-out-of-context-patterns","title":"2. Avoiding Out-of-Context Patterns","text":"<ul> <li>Diff-based formats (such as unified diffs with <code>+</code>, <code>-</code>, or <code>@@</code> markers) are excellent for code review and version control, but they introduce artificial patterns and symbols that are not part of the actual code.</li> <li>When these patterns are present in the editing or code generation flow, they can inadvertently influence the language model or the user's perception, potentially leading to lower-quality code or confusion.</li> <li>Janito optimizes for clean, context-free code generation, reducing the risk of such artifacts affecting the output.</li> </ul>"},{"location":"tools-natural-results/#3-optimized-for-human-editing","title":"3. Optimized for Human Editing","text":"<ul> <li>The primary goal of Janito's output is to facilitate smooth, human-friendly editing. Users can copy, paste, and apply changes directly, just as they would with code snippets from trusted documentation.</li> <li>This approach streamlines the workflow for developers who want to quickly update their codebase without extra processing or translation steps.</li> </ul>"},{"location":"tools-natural-results/#4-review-remains-easy-with-standard-tools","title":"4. Review Remains Easy with Standard Tools","text":"<ul> <li>While Janito does not output diffs directly, users can still perform thorough code reviews using standard version control tools (like <code>git diff</code>) after applying the changes.</li> <li>This separation of concerns ensures that code generation and review are both optimized for their respective contexts: natural output for editing, and diff-based tools for review.</li> </ul>"},{"location":"tools-natural-results/#summary","title":"Summary","text":"<p>Janito's natural, line-based output format is designed to:</p> <ul> <li>Maximize clarity and usability for developers.</li> <li>Avoid introducing out-of-context patterns that could degrade code quality.</li> <li>Support efficient, human-friendly editing flows.</li> <li>Allow for robust reviews using existing diff tools after changes are applied.</li> </ul> <p>This philosophy ensures that Janito remains a seamless, developer-centric assistant\u2014helping you write, edit, and improve code in the most natural way possible.</p>"},{"location":"tools-precision/","title":"Precision in Context Construction: Outlines, Search, and Token Optimization","text":"<p>Large Language Models (LLMs) like those used in Janito are powerful, but their effectiveness depends heavily on the quality and relevance of the context provided to them. Precision in context construction is crucial for:</p> <ul> <li>Improving the model\u2019s attention and accuracy.</li> <li>Reducing irrelevant information (noise).</li> <li>Optimizing the use of available tokens (which are limited per request).</li> </ul>"},{"location":"tools-precision/#why-precision-matters","title":"Why Precision Matters","text":"<p>LLMs have a fixed token limit for each prompt. Supplying too much irrelevant or excessive context can:</p> <ul> <li>Waste valuable tokens.</li> <li>Dilute the model\u2019s focus, leading to less accurate or less relevant responses.</li> </ul> <p>By contrast, providing only the most relevant code, documentation, or data enables the LLM to:</p> <ul> <li>Focus its attention on what matters for the current task.</li> <li>Produce more accurate, actionable, and context-aware outputs.</li> </ul>"},{"location":"tools-precision/#how-janito-achieves-precision","title":"How Janito Achieves Precision","text":"<p>Janito uses a combination of outline and search utilities to extract only the most relevant portions of code or documentation:</p>"},{"location":"tools-precision/#1-outline-utilities","title":"1. Outline Utilities","text":"<ul> <li>Purpose: Quickly analyze the structure of files (e.g., Python modules, Markdown docs) to identify classes, functions, methods, headers, and sections.</li> <li>How it works:</li> <li>The outline tool parses the file and builds a map of its structure.</li> <li>This enables Janito to select specific ranges (e.g., a single function, class, or section) rather than the entire file.</li> <li>Benefits:</li> <li>Enables targeted extraction.</li> <li>Reduces the amount of irrelevant context.</li> </ul>"},{"location":"tools-precision/#2-search-utilities","title":"2. Search Utilities","text":"<ul> <li>Purpose: Find precise locations of keywords, function names, class names, or documentation headers within files or across the project.</li> <li>How it works:</li> <li>The search tool can use substring or regex matching to locate relevant lines or blocks.</li> <li>Results are mapped to file ranges or outline nodes, allowing for precise extraction.</li> <li>Benefits:</li> <li>Supports both broad and fine-grained queries.</li> <li>Can be combined with outline data for even more accurate targeting.</li> </ul>"},{"location":"tools-precision/#building-tailored-contexts","title":"Building Tailored Contexts","text":"<p>When Janito receives a request (e.g., \"Refactor function X\" or \"Summarize section Y\"), it:</p> <ol> <li>Uses outline and search tools to locate the exact code or documentation range relevant to the task.</li> <li>Extracts only that range (plus minimal necessary context, such as imports or docstrings).</li> <li>Constructs the LLM prompt using just the tailored content, not the entire file or project.</li> </ol>"},{"location":"tools-precision/#benefits-for-llm-attention-and-token-efficiency","title":"Benefits for LLM Attention and Token Efficiency","text":"<ul> <li>Improved Attention: The LLM can focus on the most relevant code or documentation, leading to better understanding and more accurate results.</li> <li>Token Optimization: By sending only what\u2019s needed, Janito avoids hitting token limits and can handle larger projects or more complex tasks within the same constraints.</li> <li>Faster, More Relevant Responses: Less noise means the model can reason more effectively and respond more quickly.</li> </ul>"},{"location":"tools-precision/#summary","title":"Summary","text":"<p>Janito\u2019s precision-driven approach\u2014using outline and search utilities to extract and assemble only the most relevant context\u2014maximizes the effectiveness of LLMs. This ensures:</p> <ul> <li>Higher quality answers.</li> <li>Better use of computational resources.</li> <li>A more scalable and robust developer experience.</li> </ul>"},{"location":"tools/","title":"Tools &amp; Plugins","text":"<p>Janito provides a rich set of tools and plugins to extend its functionality beyond basic LLM interactions.</p>"},{"location":"tools/#built-in-tools","title":"Built-in Tools","text":"<p>All tools are available by default and can be used in chat mode with the <code>!tool_name</code> syntax.</p>"},{"location":"tools/#file-management","title":"File Management","text":"Tool Description <code>read</code> Read content from a file <code>write</code> Write content to a file <code>copy-file</code> Copy a file to a new location <code>move-file</code> Move a file to a new location <code>remove-file</code> Delete a file <code>create-directory</code> Create a new directory <code>remove-directory</code> Delete a directory <code>find-files</code> Find files matching a pattern <code>validate-file-syntax</code> Validate syntax of a file (Python, JSON, YAML, etc.)"},{"location":"tools/#web-network","title":"Web &amp; Network","text":"Tool Description <code>fetch-url</code> Fetch content from a URL <code>open-url</code> Open a URL in the default browser <code>open-html-in-browser</code> Open an HTML file in the default browser"},{"location":"tools/#system-development","title":"System &amp; Development","text":"Tool Description <code>run-bash-command</code> Execute a bash command <code>run-powershell-command</code> Execute a PowerShell command <code>python-code-run</code> Execute Python code snippet <code>python-command-run</code> Execute a Python command <code>python-file-run</code> Execute a Python script file <code>view-file</code> View content of a file with line numbers <code>replace-text-in-file</code> Replace text in a file <code>search-text</code> Search for text in files <code>get-file-outline</code> Get structure outline of a file <code>search-outline</code> Search within file outlines"},{"location":"tools/#visualization","title":"Visualization","text":"Tool Description <code>show-image</code> Display an image inline in the terminal <code>show-image-grid</code> Display multiple images in a grid <code>read-chart</code> Display charts and data visualizations"},{"location":"tools/#interaction","title":"Interaction","text":"Tool Description <code>ask-user</code> Prompt the user for input during execution"},{"location":"tools/#plugin-system","title":"Plugin System","text":"<p>Janito's functionality is organized into plugins that can be enabled or disabled:</p>"},{"location":"tools/#core-plugins","title":"Core Plugins","text":"<ul> <li>filemanager: Provides file management tools</li> <li>system: Provides system execution tools</li> <li>web: Provides web interaction tools</li> <li>codeanalyzer: Provides code analysis tools</li> <li>imagedisplay: Provides image display tools</li> <li>visualization: Provides charting tools</li> <li>pythondev: Provides Python development tools</li> </ul>"},{"location":"tools/#enablingdisabling-plugins","title":"Enabling/Disabling Plugins","text":"<pre><code># List all plugins\njanito list-plugins\n\n# Enable a plugin\njanito enable-plugin webtools\n\n# Disable a plugin\njanito disable-plugin filemanager\n</code></pre> <p>Note: Some tools may be disabled by default for security reasons. Use <code>janito list-tools</code> to see which tools are currently available.</p>"},{"location":"tools/#security-permissions","title":"Security &amp; Permissions","text":"<p>By default, tools have restricted permissions for safety:</p> <ul> <li>File operations are limited to the current working directory</li> <li>Network access is restricted to whitelisted domains</li> <li>Bash/PowerShell commands require explicit user confirmation</li> </ul> <p>You can modify these restrictions using:</p> <pre><code># Allow unrestricted file access\njanito unrestricted --files\n\n# Allow unrestricted network access\njanito unrestricted --network\n\n# Allow unrestricted command execution\njanito unrestricted --commands\n</code></pre> <p>Use <code>janito privileges</code> to view your current permission levels.</p> <p>Warning: Disabling security restrictions reduces safety. Only do this in trusted environments.</p>"},{"location":"z-ai-setup/","title":"Z.ai API Setup Guide","text":"<p>This guide explains how to set up and use Z.ai's API with your API key.</p>"},{"location":"z-ai-setup/#getting-your-api-key","title":"Getting Your API Key","text":"<ol> <li>Visit Z.ai API Management</li> <li>Log in to your Z.ai account</li> <li>Navigate to the API Keys section</li> <li>Create a new API key if you don't have one yet</li> </ol>"},{"location":"z-ai-setup/#api-key-format","title":"API Key Format","text":"<p>Z.ai uses a new key format that includes both a user ID and secret:</p> <pre><code>{id}.{secret}\n</code></pre> <p>Important Security Notes:</p> <ul> <li>Never share your API keys</li> <li>Do not expose keys in browsers or client-side code</li> <li>Leaked keys may be automatically regenerated for security</li> <li>Store keys securely in environment variables or secure vaults</li> </ul>"},{"location":"z-ai-setup/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"z-ai-setup/#environment-variable-recommended","title":"Environment Variable (Recommended)","text":"<p>Set your API key as an environment variable:</p> <p>Linux/macOS:</p> <pre><code>export ZAI_API_KEY=\"your-id.your-secret\"\n</code></pre> <p>Windows (Command Prompt):</p> <pre><code>set ZAI_API_KEY=your-id.your-secret\n</code></pre> <p>Windows (PowerShell):</p> <pre><code>$env:ZAI_API_KEY=\"your-id.your-secret\"\n</code></pre>"},{"location":"z-ai-setup/#configuration-file","title":"Configuration File","text":"<p>You can also store your API key in a configuration file (ensure proper file permissions):</p> <pre><code>{\n  \"zai_api_key\": \"your-id.your-secret\"\n}\n</code></pre>"},{"location":"z-ai-setup/#rate-limits-and-billing","title":"Rate Limits and Billing","text":"<ul> <li>Check your API Management dashboard for current rate limits</li> <li>Monitor your usage and billing information</li> <li>Contact support for API recharge if needed</li> </ul>"},{"location":"z-ai-setup/#support","title":"Support","text":"<p>For API-related support:</p> <ul> <li>Visit Z.ai Contact for product support</li> <li>Join the Discord community to chat with developers</li> <li>Check the API documentation for model-specific details</li> </ul>"},{"location":"z-ai-setup/#available-models","title":"Available Models","text":"<p>Z.ai provides several models including:</p> <ul> <li>GLM-4.5: Latest flagship model with reasoning, coding, and agent functionalities</li> <li>GLM-4.5-Air: Lightweight flagship model with cost-effectiveness</li> <li>GLM-4.5-Flash: Most advanced free model</li> <li>GLM-4-32B-0414-128K: General-purpose LLM for business and technical domains</li> <li>CogVideoX-3: Text-to-video model for high-fidelity motion</li> <li>Vidu Q1: High-fidelity 1080p video generation</li> <li>Vidu 2: Fast, low-cost 720p video generation</li> </ul> <p>For complete model specifications and capabilities, visit Z.ai Models.</p>"},{"location":"about/costs/","title":"\ud83d\udcb8 Costs &amp; Value Transparency","text":""},{"location":"about/costs/#how-janito-handles-costs","title":"\ud83d\udca1 How Janito Handles Costs","text":"<ul> <li>\ud83c\udd93 No Extra Fees: Janito is open source and does not charge any additional fees for usage.</li> <li>\ud83d\udd11 Bring Your Own API Key: By default, Janito uses OpenAI, but you can also connect your own Azure or compatible API key. You pay only for what you use, directly to the provider.</li> <li>\ud83d\udc40 Full Visibility: You can monitor your API usage and costs through your provider\u2019s dashboard, with no hidden markups.</li> </ul>"},{"location":"about/costs/#comparison-subscription-models-in-other-tools","title":"\ud83d\udd04 Comparison: Subscription Models in Other Tools","text":"<ul> <li>\u2705 Costs Under Control: Subscription models can help users predict their monthly expenses, providing cost certainty regardless of usage spikes.</li> <li>\ud83d\udcb3 Flat Monthly Fees: Many AI coding assistants or IDE plugins charge a monthly subscription, regardless of how much you use them.</li> <li>\ud83d\udd73\ufe0f Opaque Value: These tools manage the context, prompts, and API usage behind the scenes. You don\u2019t know how much of your subscription is spent on actual model calls versus overhead or unused features.</li> <li>\ud83d\udeab Limited Control: You can\u2019t tune the context window, prompt, or tool usage to optimize for cost or value.</li> </ul>"},{"location":"about/costs/#context-optimization-and-token-efficiency","title":"\ud83e\udde0 Context Optimization and Token Efficiency","text":"<ul> <li>\ud83e\udde9 Smart Context Selection: Janito\u2019s tools are designed to select only the most relevant files, code snippets, or configuration details for each request, based on your prompt and intent.</li> <li>\ud83c\udfaf Aligned with Your Goals: Instead of sending your entire project or irrelevant data, Janito tailors the context to what you actually need\u2014whether that\u2019s UI, backend, or documentation.</li> <li>\ud83d\udcb0 Token Usage Efficiency: By minimizing unnecessary context, Janito helps you get more value from each API call, reducing token usage and cost while maximizing the quality of responses.</li> </ul>"},{"location":"about/costs/#janitos-advantage-cost-transparency","title":"\ud83d\udd0d Janito\u2019s Advantage: Cost Transparency","text":"<ul> <li>\ud83d\udcb8 Pay for What You Use: Every API call is under your control. You decide when and how to use the model, and can optimize prompts or tool usage for efficiency.</li> <li>\ud83d\udeab No Hidden Usage: There\u2019s no \u201cblack box\u201d between you and the model\u2014no risk of surprise overages or wasted spend.</li> <li>\ud83c\udfaf Direct Value: You see exactly how your usage translates to results, and can adjust your workflow to maximize value for your spend.</li> </ul>"},{"location":"about/costs/#summary","title":"\ud83c\udfc1 Summary","text":"<p>With Janito, you\u2019re in control: no subscriptions, no hidden fees, and full transparency into how your costs deliver value.</p>"},{"location":"about/vs-webchats/","title":"\ud83d\udcac Janito vs. Web-Based AI Chats","text":"<p>While web-based AI chats (like ChatGPT, Gemini, or Copilot web) are popular for code help, Janito offers significant advantages for project analysis and automation:</p>"},{"location":"about/vs-webchats/#overhead-of-manual-copypaste","title":"\u23f3 Overhead of Manual Copy/Paste","text":"<ul> <li>\ud83d\udd52 Time-Consuming: Copying large files, code snippets, or project structures into a web chat is slow and repetitive.</li> <li>\ud83d\udd0d Context Loss: Web chats lack awareness of your full project structure, dependencies, and configuration.</li> <li>\u26a0\ufe0f Error-Prone: Manual copy/paste increases the risk of missing files, truncating code, or introducing formatting errors.</li> <li>\ud83d\udeab No Automation: Each session is isolated; you can\u2019t script or automate workflows across your project.</li> </ul>"},{"location":"about/vs-webchats/#risks-to-accuracy-and-privacy","title":"\ud83d\udd12 Risks to Accuracy and Privacy","text":"<ul> <li>\u274c Incomplete Analysis: Web chats only see what you paste, missing important context or related files.</li> <li>\ud83e\uddd1\u200d\ud83d\udcbb Human Error: It\u2019s easy to accidentally omit, duplicate, or mislabel code when copying manually.</li> <li>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Privacy Concerns: Pasting proprietary code into a third-party web service may violate company policy or expose sensitive information.</li> </ul>"},{"location":"about/vs-webchats/#janitos-advantages","title":"\ud83c\udfc6 Janito\u2019s Advantages","text":"<ul> <li>\ud83d\udcc2 Direct Project Access: Janito can analyze your entire codebase, follow imports, and reference configuration automatically.</li> <li>\ud83d\udd01 Repeatable &amp; Scriptable: Automate reviews, refactoring, or documentation with CLI commands and scripts.</li> <li>\ud83e\udde0 Rich Context: Tools and prompts can be tailored to your workflow, ensuring the AI sees the right context every time.</li> <li>\u2702\ufe0f No Copy/Paste Needed: Save time and reduce mistakes by working directly with your files.</li> </ul>"},{"location":"about/vs-webchats/#summary","title":"\ud83c\udfc1 Summary","text":"<p>Janito eliminates the friction, risk, and limitations of manual copy/paste into web chats\u2014delivering faster, more accurate, and more secure project assistance.</p>"},{"location":"about/why/","title":"\u2753 Why Janito? The Power of Prompt and Tool Flexibility","text":"<p>Janito is designed to give you maximum control over how AI assists you with your codebase. Unlike tools tightly coupled with a specific IDE, Janito\u2019s flexible system prompt and tool configuration offer unique advantages:</p>"},{"location":"about/why/#benefits-of-adjustable-system-prompts","title":"\ud83c\udfaf Benefits of Adjustable System Prompts","text":"<ul> <li>\ud83d\udcdd Tailor the Assistant\u2019s Perspective: By editing the system prompt, you can instruct the AI to focus on what matters most\u2014UI/UX, backend logic, architecture, or even documentation style.</li> <li>\ud83d\udd04 Adapt to Different Tasks: Switch between reviewing code for bugs, generating documentation, or brainstorming features simply by changing the prompt.</li> <li>\ud83d\udc40 Guide the Model\u2019s Focus: A prompt like \u201cYou are a UI/UX expert\u201d will make the model prioritize interface concerns, while \u201cFocus on code structure and algorithms\u201d will drive it to analyze raw code logic.</li> </ul>"},{"location":"about/why/#flexible-tools-vs-ide-coupled-plugins","title":"\ud83e\udde9 Flexible Tools vs. IDE-Coupled Plugins","text":"<ul> <li>\ud83d\udcbb Not Locked to an Editor: Janito works in the terminal, scripts, or web\u2014no need for a heavyweight IDE or plugin ecosystem.</li> <li>\ud83e\uddf0 Composable and Extensible: Tools can be enabled, disabled, or customized for each session, letting you experiment or automate workflows.</li> <li>\ud83d\udd52 Session-Scoped Adjustments: Session-based overrides (via CLI options or prompt tweaks) let you try new approaches without changing your global setup.</li> </ul>"},{"location":"about/why/#example-prompt-driven-focus","title":"\ud83e\uddd1\u200d\ud83d\udcbb Example: Prompt-Driven Focus","text":"<ul> <li> <p>A prompt like:</p> <p>\u201cYou are a code reviewer. Focus on accessibility and UI clarity.\u201d   will make the model highlight interface and user experience issues.</p> </li> <li> <p>Change the prompt to:</p> <p>\u201cYou are a backend architect. Ignore UI, focus on data flow and performance.\u201d   and the model will shift its analysis accordingly.</p> </li> </ul>"},{"location":"about/why/#summary","title":"\ud83c\udfc1 Summary","text":"<p>Janito\u2019s decoupled, prompt-driven approach empowers you to get the AI help you need, where and how you want it\u2014without being boxed in by IDE limitations or rigid workflows.</p>"},{"location":"agent/agent-lifecycle/","title":"Agent Lifecycle and Tool Execution Synchronization","text":"<p>This document details the lifecycle of an agent in Janito, focusing on how state and events are synchronized with tool execution.</p>"},{"location":"agent/agent-lifecycle/#overview","title":"Overview","text":"<p>The agent lifecycle in Janito involves several key phases, from initialization to tool execution and event handling. Understanding this lifecycle is crucial for developers working with or extending the agent system.</p>"},{"location":"agent/agent-lifecycle/#agent-initialization","title":"Agent Initialization","text":"<ol> <li>Configuration Loading: The agent loads its configuration, including enabled tools, permissions, and other settings.</li> <li>Event Bus Setup: An event bus is initialized for internal communication between components.</li> <li>Tool Registration: Tools are registered with the appropriate adapters, making them available for execution.</li> <li>Permission Initialization: Global permission settings are established, determining which tools can be used.</li> </ol>"},{"location":"agent/agent-lifecycle/#main-execution-loop","title":"Main Execution Loop","text":"<p>The agent operates in a continuous loop that processes user input, executes tools, and responds with results:</p> <ol> <li>Input Processing: The agent receives input from the user or other sources.</li> <li>Planning: Based on the input, the agent determines which tools to use and in what order.</li> <li>Tool Execution: Tools are executed with the necessary parameters.</li> <li>Result Processing: The agent processes the results from tool executions.</li> <li>Response Generation: A response is generated and sent back to the user.</li> </ol>"},{"location":"agent/agent-lifecycle/#tool-execution-lifecycle","title":"Tool Execution Lifecycle","text":"<p>When a tool is executed, it goes through a specific lifecycle:</p> <ol> <li>Discovery: The agent looks up the tool by name in the tools registry.</li> <li>Permission Validation: The tool's required permissions are checked against the global allowed permissions.</li> <li>Argument Validation: The provided arguments are validated against the tool's signature and schema.</li> <li>Path Security Check: For tools that work with file paths, path security validation ensures that only allowed paths are accessed.</li> <li>Execution: The tool is executed with the provided arguments.</li> <li> <p>Event Publishing: Throughout the execution process, various events are published to the event bus:</p> </li> <li> <p><code>ToolCallStarted</code>: When a tool execution begins</p> </li> <li><code>ToolCallFinished</code>: When a tool execution completes successfully</li> <li><code>ToolCallError</code>: When a tool execution encounters an error</li> </ol>"},{"location":"agent/agent-lifecycle/#event-synchronization","title":"Event Synchronization","text":"<p>Events play a crucial role in synchronizing state throughout the agent lifecycle:</p> <ol> <li>Tool Events: Published during tool execution to track progress and handle errors.</li> <li>Report Events: Used for user-facing messages, including actions, errors, warnings, and success messages.</li> <li>System Events: Handle internal state changes and system-level notifications.</li> </ol> <p>The event bus ensures that all components can react to important events in real-time, maintaining consistency across the system.</p>"},{"location":"agent/agent-lifecycle/#state-management","title":"State Management","text":"<p>The agent maintains several types of state:</p> <ol> <li>Configuration State: Settings that control agent behavior.</li> <li>Permission State: Current allowed permissions for tool execution.</li> <li>Execution State: Information about currently running tools and their progress.</li> <li>Conversation State: History of interactions with the user.</li> </ol> <p>State changes are synchronized through the event bus, ensuring all components have access to the most current information.</p>"},{"location":"agent/agent-lifecycle/#error-handling-and-recovery","title":"Error Handling and Recovery","text":"<p>The agent includes comprehensive error handling:</p> <ol> <li>Tool Errors: Caught and converted to <code>ToolCallException</code> with detailed error messages.</li> <li>Permission Violations: Detected and prevented before tool execution.</li> <li>Path Security Violations: Prevented through path validation.</li> <li>Loop Protection: Prevents infinite execution loops through decorator-based protection.</li> </ol> <p>When errors occur, they are published to the event bus and handled appropriately by the agent's error recovery mechanisms.</p>"},{"location":"agent/agent-lifecycle/#conclusion","title":"Conclusion","text":"<p>The agent lifecycle in Janito is designed to be robust, secure, and extensible. By understanding how state and events are synchronized with tool execution, developers can effectively work with and extend the agent system.</p>"},{"location":"agent/tools-workflow-lifecycle/","title":"Agent and Tools Workflow and Lifecycle","text":"<p>This document explains how tools are integrated into Janito's agent system, covering their workflow from registration to execution and the overall lifecycle.</p>"},{"location":"agent/tools-workflow-lifecycle/#overview","title":"Overview","text":"<p>Janito's agent system uses a modular approach to tool management, allowing for flexible registration, permission control, and execution of various tools. Tools are implemented as classes that inherit from <code>ToolBase</code> and are registered with a tools adapter.</p>"},{"location":"agent/tools-workflow-lifecycle/#tool-registration","title":"Tool Registration","text":""},{"location":"agent/tools-workflow-lifecycle/#1-tool-implementation","title":"1. Tool Implementation","text":"<p>Tools are implemented as classes that inherit from <code>ToolBase</code>:</p> <ul> <li>Must define a <code>permissions</code> attribute of type <code>ToolPermissions</code></li> <li>Must implement a <code>run</code> method with proper type hints and docstrings</li> <li>Should have a unique <code>tool_name</code> class attribute</li> </ul> <p>Example:</p> <pre><code>from janito.tools.tool_base import ToolBase, ToolPermissions\nfrom janito.plugins.adapters.local.adapter import register_local_tool\n\n@register_local_tool\nclass MyTool(ToolBase):\n    \"\"\"\n    Processes a file a given number of times.\n    \"\"\"\n    permissions = ToolPermissions(read=True, write=True)\n    tool_name = \"my_tool\"\n\n    def run(self, filename: str, count: int) -&gt; str:\n        \"\"\"\n        Processes the specified file repeatedly.\n\n        Args:\n            filename (str): The path to the file to process.\n            count (int): How many times to process the file.\n\n        Returns:\n            str: Status message after processing.\n        \"\"\"\n        # Implementation here\n        return f\"Processed {filename} {count} times\"\n</code></pre>"},{"location":"agent/tools-workflow-lifecycle/#2-tool-registration","title":"2. Tool Registration","text":"<p>Tools can be registered in two ways:</p> <ol> <li>Using the <code>@register_local_tool</code> decorator</li> <li>Manually registering with a <code>LocalToolsAdapter</code> instance</li> </ol> <p>The decorator approach automatically registers the tool with the singleton adapter.</p>"},{"location":"agent/tools-workflow-lifecycle/#tool-permissions","title":"Tool Permissions","text":"<p>Each tool defines its required permissions using the <code>ToolPermissions</code> named tuple:</p> <ul> <li><code>read</code>: Permission to read files</li> <li><code>write</code>: Permission to write/modify files</li> <li><code>execute</code>: Permission to execute commands</li> </ul> <p>These permissions are checked against the global allowed permissions at runtime.</p>"},{"location":"agent/tools-workflow-lifecycle/#tool-execution-lifecycle","title":"Tool Execution Lifecycle","text":""},{"location":"agent/tools-workflow-lifecycle/#1-tool-discovery","title":"1. Tool Discovery","text":"<p>When the agent needs to execute a tool, it first looks up the tool by name using the tools adapter.</p>"},{"location":"agent/tools-workflow-lifecycle/#2-permission-validation","title":"2. Permission Validation","text":"<p>The adapter checks if the tool's required permissions are allowed by the current permission settings.</p>"},{"location":"agent/tools-workflow-lifecycle/#3-argument-validation","title":"3. Argument Validation","text":"<p>Before execution, the tool's arguments are validated against both the function signature and any defined schema.</p>"},{"location":"agent/tools-workflow-lifecycle/#4-path-security-check","title":"4. Path Security Check","text":"<p>For tools that work with file paths, path security validation ensures that only allowed paths are accessed.</p>"},{"location":"agent/tools-workflow-lifecycle/#5-execution","title":"5. Execution","text":"<p>The tool is executed with the provided arguments, and the result is returned.</p>"},{"location":"agent/tools-workflow-lifecycle/#6-event-publishing","title":"6. Event Publishing","text":"<p>Throughout the execution process, various events are published to the event bus:</p> <ul> <li><code>ToolCallStarted</code>: When a tool execution begins</li> <li><code>ToolCallFinished</code>: When a tool execution completes successfully</li> <li><code>ToolCallError</code>: When a tool execution encounters an error</li> </ul>"},{"location":"agent/tools-workflow-lifecycle/#error-handling","title":"Error Handling","text":"<p>The tools adapter includes comprehensive error handling:</p> <ul> <li>Missing or invalid arguments are caught and reported</li> <li>Path security violations are detected and prevented</li> <li>Loop protection prevents infinite execution loops</li> <li>Runtime errors in tools are caught and converted to <code>ToolCallException</code></li> </ul>"},{"location":"agent/tools-workflow-lifecycle/#customization","title":"Customization","text":"<p>The tools system can be customized by:</p> <ol> <li>Implementing custom tools adapters for different execution environments</li> <li>Modifying permission settings at runtime</li> <li>Disabling specific tools through configuration</li> <li>Extending the base <code>ToolBase</code> class for specialized functionality</li> </ol>"},{"location":"agent/tools-workflow-lifecycle/#conclusion","title":"Conclusion","text":"<p>Janito's agent and tools system provides a robust, secure, and extensible framework for integrating various functionalities. By following the established patterns for tool implementation and registration, developers can easily add new capabilities while maintaining security and consistency.</p>"},{"location":"changelogs/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelogs/CHANGELOG/#2270-2025-08-16","title":"[2.27.0] - 2025-08-16","text":""},{"location":"changelogs/CHANGELOG/#added","title":"Added","text":"<ul> <li>Enhanced CLI Experience:</li> <li> <p>One-Shot Mode Prefix Support: Added <code>/rwx</code> prefix support to enable all tool permissions in a single command</p> <ul> <li>Use <code>/rwx \"your prompt here\"</code> to enable read, write, and execute permissions in one-shot mode</li> <li>Equivalent to using <code>-r -w -x</code> flags but more convenient for quick tasks</li> <li>Maintains security by requiring explicit user action for each command</li> </ul> </li> <li> <p>Enhanced Web Fetching:</p> </li> <li>Browser-like Session Support: Enhanced <code>fetch_url</code> tool with browser-like session capabilities<ul> <li>Persistent session management for improved reliability</li> <li>Better handling of cookies and session state</li> <li>Enhanced user-agent and header management</li> <li>Improved error handling for network requests</li> </ul> </li> </ul>"},{"location":"changelogs/CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Improved Documentation:</li> <li>Updated CLI documentation to reflect new <code>/rwx</code> prefix and one-shot mode features</li> <li>Enhanced fetch_url tool documentation with new session parameters</li> <li>Improved parameter descriptions and usage examples</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Documentation Fixes:</li> <li>Added missing docstring parameters for fetch_url tool</li> <li>Fixed parameter documentation inconsistencies</li> </ul>"},{"location":"changelogs/CHANGELOG/#2260-2025-08-16","title":"[2.26.0] - 2025-08-16","text":""},{"location":"changelogs/CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Chat Mode Shell Enhancements:</li> <li>Unrestricted Mode Command: Added new <code>/unrestricted</code> command to chat mode shell<ul> <li>Toggle unrestricted mode equivalent to the <code>-u</code> CLI flag</li> <li>Real-time switching between restricted and unrestricted modes</li> <li>Visual feedback with color-coded status messages</li> <li>Integration with URL whitelist manager for comprehensive security control</li> <li>Security Warning: Clear indication when unrestricted mode is enabled (DANGEROUS - no path or URL restrictions)</li> </ul> </li> </ul>"},{"location":"changelogs/CHANGELOG/#security","title":"Security","text":"<ul> <li>Enhanced Security Controls: </li> <li>URL whitelist manager integration with unrestricted mode toggle</li> <li>Path security controls synchronized with shell state</li> <li>Real-time security status updates in chat mode</li> </ul>"},{"location":"changelogs/CHANGELOG/#2250-2025-08-15","title":"[2.25.0] - 2025-08-15","text":""},{"location":"changelogs/CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Loop Protection System: Comprehensive protection against excessive file operations</li> <li>File Creation Protection: Prevents creation of more than 5 files within 10 seconds to the same path</li> <li>File Reading Protection: Prevents reading the same file more than 10 times within 10 seconds</li> <li>Directory Traversal Protection: Prevents excessive directory operations</li> <li> <p>Cross-Tool Protection: Loop protection is shared across all local tools to prevent abuse</p> </li> <li> <p>Enhanced Path Handling: </p> </li> <li>Tilde Expansion: Support for <code>~</code> (user home directory) and <code>~username</code> expansion in file paths</li> <li>Path Validation: Enhanced validation for file paths with better error messages</li> <li> <p>Cross-Platform Support: Improved Windows/Unix path handling</p> </li> <li> <p>Security Improvements:</p> </li> <li>Path Security: Enhanced path validation and sanitization</li> <li>Access Control: Better handling of restricted directories and files</li> <li> <p>Input Validation: Improved validation for all user-provided paths</p> </li> <li> <p>Plugin System Enhancements:</p> </li> <li>Remote Plugin Support: Full support for loading plugins from remote repositories</li> <li>Plugin Configuration: Enhanced configuration management for plugins</li> <li>Security Validation: Built-in validation for plugin sources and configurations</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Tool Adapters: All local tool adapters now use the new path utilities and loop protection</li> <li>Error Handling: Improved error messages with more context and actionable feedback</li> <li>CLI Experience: Enhanced command-line interface with better validation and feedback</li> <li>Configuration: Updated configuration system to support new security features</li> </ul>"},{"location":"changelogs/CHANGELOG/#security_1","title":"Security","text":"<ul> <li>Loop Protection: Prevents denial-of-service attacks through excessive file operations</li> <li>Path Traversal: Enhanced protection against directory traversal attacks</li> <li>Input Sanitization: All user inputs are properly sanitized before processing</li> </ul>"},{"location":"changelogs/CHANGELOG/#developer-experience","title":"Developer Experience","text":"<ul> <li>Testing: Added comprehensive test suite for loop protection and path utilities</li> <li>Documentation: Updated all documentation to reflect new security features</li> <li>Examples: Added example usage patterns for safe file operations</li> </ul>"},{"location":"changelogs/CHANGELOG/#migration-guide","title":"Migration Guide","text":"<p>For users upgrading from previous versions:</p> <ol> <li>Configuration: No breaking changes to existing configuration</li> <li>Backward Compatibility: All existing commands and workflows continue to work</li> <li>New Features: Loop protection is enabled by default for all local tools</li> <li>Path Handling: Tilde expansion works automatically in all file paths</li> </ol>"},{"location":"changelogs/CHANGELOG/#2200-2025-08-10","title":"[2.20.0] - 2025-08-10","text":""},{"location":"changelogs/CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Mistral AI Provider: Added complete support for Mistral AI models</li> <li>General Purpose Models:<ul> <li><code>mistral-large-latest</code>: 128k context, most capable model (default)</li> <li><code>mistral-medium-latest</code>: 32k context, balanced performance</li> <li><code>mistral-small-latest</code>: 32k context, compact and efficient</li> </ul> </li> <li>Code-Focused Models:<ul> <li><code>codestral-latest</code>: 256k context, specialized for code generation</li> <li><code>codestral-2405</code>: Previous version of code-focused model</li> </ul> </li> <li>Development-Focused Models:<ul> <li><code>devstral-small-latest</code>: 128k context, optimized for agentic tool use</li> <li><code>devstral-medium-latest</code>: 128k context, enhanced agentic capabilities</li> </ul> </li> <li>Mistral Setup Guide: Comprehensive documentation for Mistral AI integration</li> <li>Tool Support: Full tool/function calling support across all Mistral models</li> <li>API Integration: Uses OpenAI-compatible API format via Mistral's La Plateforme</li> </ul>"},{"location":"changelogs/CHANGELOG/#2190-2025-08-08","title":"[2.19.0] - 2025-08-08","text":""},{"location":"changelogs/CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Alibaba Cloud Provider: Added support for new Qwen3 1M context models</li> <li><code>qwen3-235b-a22b-thinking-2507</code>: 1M context thinking model</li> <li><code>qwen3-235b-a22b-instruct-2507</code>: 1M context instruct model</li> <li><code>qwen3-30b-a3b-thinking-2507</code>: 1M context thinking model</li> <li><code>qwen3-30b-a3b-instruct-2507</code>: 1M context instruct model</li> <li>Thinking Mode Support: Added thinking mode indicators (\ud83d\udcd6) for models that support chain-of-thought reasoning</li> <li>Default Model Highlighting: Added star (\u2b50) indicators to highlight default models in provider listings</li> <li>Provider Connectivity Testing: Added <code>--ping</code> flag to test connectivity with all providers when used with <code>--list-providers</code></li> <li>Enhanced Model Display: Improved model listing with better formatting of context sizes and response limits</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Alibaba Cloud Provider: Updated default model from <code>qwen3-coder-plus</code> to <code>qwen3-235b-a22b-instruct-2507</code> (129k context)</li> <li>Model Information: Added thinking mode support tracking in LLMModelInfo class</li> <li>Documentation: Updated Alibaba setup guide with comprehensive configuration instructions</li> </ul>"},{"location":"changelogs/CHANGELOG/#2180-2025-08-07","title":"[2.18.0] - 2025-08-07","text":""},{"location":"changelogs/CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Added OpenAI GPT-5 models (gpt-5, gpt-5-mini, gpt-5-nano) and set default model to gpt-5</li> <li>Chat session: improved backend hostname detection</li> <li>Cleaned up test file</li> </ul>"},{"location":"changelogs/CHANGELOG/#2170-2025-08-05","title":"[2.17.0] - 2025-08-05","text":""},{"location":"changelogs/CHANGELOG/#added_6","title":"Added","text":"<ul> <li>New Provider Support</li> <li> <p>Cerebras Provider: Added complete support for Cerebras with qwen-3-coder-480b model</p> <ul> <li>qwen-3-coder-480b: 32k context, reasoning-focused model with function calling support</li> </ul> </li> <li> <p>Enhanced UX</p> </li> <li>Improved error handling for invalid provider names in set-api-key command</li> <li>Better error messages when provider is not found</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Provider Improvements</li> <li>Updated Alibaba endpoint to international URL for better global access</li> <li>Simplified region display to 2-letter codes for cleaner output</li> <li> <p>Improved driver listing and region display functionality</p> </li> <li> <p>Zero Mode Enhancement</p> </li> <li>Zero mode now properly disables system prompt and tools for minimal interaction</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Bug Fixes</li> <li>Added missing tools adapter to Cerebras provider</li> <li>Improved error handling for invalid provider names in set-api-key command</li> </ul>"},{"location":"changelogs/CHANGELOG/#2160-2025-01-08","title":"[2.16.0] - 2025-01-08","text":""},{"location":"changelogs/CHANGELOG/#added_7","title":"Added","text":"<ul> <li>New CLI Features</li> <li><code>--developer</code> flag: Start directly with Python developer profile without manual selection</li> <li><code>--multi</code> option: Enable default multiline input in chat mode</li> <li><code>--list-drivers</code> command: List available LLM drivers and their dependencies</li> <li> <p><code>--list-providers-region</code> command: Show providers with region information</p> </li> <li> <p>New Providers</p> </li> <li>Z.AI Provider: Complete support for Z.AI with GLM-4.5, GLM-4, and GLM-4V models<ul> <li>GLM-4.5: 128k context with thinking support for advanced reasoning</li> <li>GLM-4: General-purpose model with 128k context</li> <li>GLM-4V: Vision model for image understanding with 128k context</li> </ul> </li> <li> <p>Alibaba Cloud Provider: Support for Qwen models including qwen-turbo, qwen-plus, qwen-max, and qwen3-coder-plus</p> </li> <li> <p>Enhanced UX</p> </li> <li>Model information display now includes backend hostname in both chat and single-shot modes</li> <li>Improved region management with geolocation utilities</li> <li>Enhanced error handling for missing API keys and dependencies</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Provider Improvements</li> <li>Updated Z.AI provider to use official SDK with improved model support</li> <li>Changed default GLM model from air to regular version</li> <li>Updated Alibaba endpoint to international URL for better global access</li> <li> <p>Simplified region display to 2-letter codes for cleaner output</p> </li> <li> <p>Documentation</p> </li> <li>Updated documentation URLs to use GitHub Pages default domain</li> <li>Fixed documentation URL to docs.janito.dev</li> <li>Enhanced provider documentation with new Z.AI and Alibaba Cloud details</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Bug Fixes</li> <li>Fixed AttributeError when ZAIProvider API key is missing</li> <li>Removed accidentally committed test files</li> <li>Improved error handling and user experience in profile selection</li> <li> <p>Fixed various import order issues for better code organization</p> </li> <li> <p>Code Quality</p> </li> <li>Refactored provider registry for reduced complexity</li> <li>Improved CLI argument handling and validation</li> <li>Enhanced terminal output styling and formatting</li> </ul>"},{"location":"changelogs/CHANGELOG/#security_2","title":"Security","text":"<ul> <li>Enhanced Security</li> <li>Improved privilege checking and status display in chat sessions</li> <li>Enhanced error handling for missing dependencies and API keys</li> <li>Better validation of provider configurations</li> </ul>"},{"location":"changelogs/CHANGELOG/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Architecture</li> <li>Refactored core CLI and runner modules for better maintainability</li> <li>Improved prompt handling and streamlined main CLI logic</li> <li>Enhanced provider registry with new visual indicators</li> <li> <p>Better separation of concerns in driver and provider implementations</p> </li> <li> <p>Performance</p> </li> <li>Optimized model information retrieval</li> <li>Improved startup performance with better configuration handling</li> <li>Enhanced memory usage in chat sessions</li> </ul>"},{"location":"changelogs/CHANGELOG/#developer-experience_1","title":"Developer Experience","text":"<ul> <li>Testing</li> <li>Added comprehensive tests for new CLI commands</li> <li>Improved test coverage for provider configurations</li> <li> <p>Enhanced error handling in test scenarios</p> </li> <li> <p>Documentation</p> </li> <li>Updated all provider documentation with new features</li> <li>Added comprehensive setup guides for new providers</li> <li>Improved CLI usage examples and syntax highlighting</li> </ul>"},{"location":"changelogs/CHANGELOG/#2150-2025-08-05","title":"[2.15.0] - 2025-08-05","text":""},{"location":"changelogs/CHANGELOG/#2160-2025-01-08_1","title":"[2.16.0] - 2025-01-08","text":""},{"location":"changelogs/CHANGELOG/#added_8","title":"Added","text":"<ul> <li>Added <code>--developer</code> CLI flag to start with the Python developer profile without manual profile selection</li> <li>Added <code>--list-drivers</code> CLI command to list available LLM drivers and their dependencies</li> <li>Added <code>--multi</code> CLI option for default multiline input in chat mode</li> <li>Enhanced model information display with backend hostname in both chat and single-shot modes</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>Updated Z.AI provider to use official SDK with improved model support</li> <li>Changed default GLM model from air to regular version</li> <li>Updated documentation URLs to use GitHub Pages default domain</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed AttributeError when ZAIProvider API key is missing</li> <li>Removed accidentally committed test files</li> <li>Improved error handling and user experience in profile selection</li> </ul>"},{"location":"changelogs/CHANGELOG/#security_3","title":"Security","text":"<ul> <li>Enhanced privilege checking and status display in chat sessions</li> </ul>"},{"location":"changelogs/CHANGELOG/#2150-2025-08-05_1","title":"[2.15.0] - 2025-08-05","text":""},{"location":"changelogs/CHANGELOG/#added_9","title":"Added","text":"<ul> <li>Z.AI Provider: Added complete support for Z.AI with GLM-4.5, GLM-4, and GLM-4V models</li> <li>GLM-4.5: 128k context with thinking support for advanced reasoning</li> <li>GLM-4: General-purpose model with 128k context</li> <li>GLM-4V: Vision model for image understanding with 128k context</li> <li>Alibaba Cloud Provider: Added support for Alibaba Cloud's Qwen models</li> <li>qwen-turbo, qwen-plus, qwen-max, and qwen3-coder-plus models</li> <li>Updated supported providers documentation to include new Z.AI and Alibaba Cloud providers</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Enhanced provider registry with new visual indicators and improved model listing</li> <li>Updated documentation to reflect new provider additions and model availability</li> </ul>"},{"location":"changelogs/CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Removed deprecated PROVIDERS.md file from janito/docs (content merged into supported-providers-models.md)</li> </ul>"},{"location":"changelogs/CHANGELOG/#290-2025-07-16","title":"[2.9.0] - 2025-07-16","text":""},{"location":"changelogs/CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Added new <code>kimi-k2-turbo-preview</code> model to Moonshot provider</li> <li>Added visual indicators for default models in provider registry with star icons</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>Updated default Moonshot model from <code>kimi-k2-0711-preview</code> to <code>kimi-k2-turbo-preview</code></li> <li>Updated all documentation to reflect new Moonshot model names and recommendations</li> <li>Updated project URLs, author email, and documentation for migration to ikignosis organization</li> <li>Updated repository links in documentation and configuration files to point to ikignosis GitHub organization</li> <li>Changed maintainer email in provider modules to janito@ikignosis.org</li> <li>Updated homepage and repo_url in pyproject.toml and mkdocs.yml to new organization URLs</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed duplicate entries in supported providers documentation</li> <li>Fixed formatting in CLI command and privilege status modules</li> </ul>"},{"location":"changelogs/CHANGELOG/#280-2025-07-16","title":"[2.8.0] - 2025-07-16","text":""},{"location":"changelogs/CHANGELOG/#added_11","title":"Added","text":"<ul> <li>Parallel tool calls: Enabled for OpenAI provider when tools are available.</li> <li>No-tools mode: New CLI option to disable all tool usage.</li> <li>Disabled tools functionality: Support for selectively disabling specific tools.</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Configuration system: Simplified by removing provider-specific settings.</li> <li>Max wait time: Increased from 300s to 600s in LLMAgent for better handling of long-running operations.</li> <li>Custom system prompt UX: Improved profile selection flow and user experience.</li> <li>OpenAI dependency: Updated to require openai&gt;=1.68.0.</li> <li>Code formatting: Applied black formatting across the codebase.</li> </ul>"},{"location":"changelogs/CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>MistralAI provider: Completely removed from the codebase.</li> <li>Provider-specific settings: Simplified configuration system.</li> </ul>"},{"location":"changelogs/CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Updated Moonshot setup guide with platform.moonshot.ai domain.</li> <li>Improved CLI usage documentation and fixed syntax highlighting.</li> <li>Removed broken references to model_info.py files in supported-providers-models.md.</li> <li>Added comprehensive documentation updates across the project.</li> </ul>"},{"location":"changelogs/CHANGELOG/#250-2025-07-01","title":"[2.5.0] - 2025-07-01","text":""},{"location":"changelogs/CHANGELOG/#added_12","title":"Added","text":"<ul> <li>Show working directory in chat mode startup message.</li> <li>Bang (<code>!</code>) shell command handler for direct shell access from the chat interface.</li> <li>Elapsed time reporting to token usage summary and improved terminal output styling.</li> <li>CLI support for reading prompt from stdin and suppressing token usage summary in non-interactive mode.</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Import <code>os</code> in help command handler for future extensibility.</li> <li>Refactored <code>ChatSession._chat_loop</code> to reduce complexity by extracting command and prompt handling methods.</li> <li>Refactored profile selection, removed <code>ProfileShellHandler</code>, and improved terminal reporter output for STDOUT/STDERR.</li> <li>Refactored to remove <code>exec_enabled</code> argument from agent and CLI setup; now uses <code>args.exec</code> directly.</li> <li>Improved terminal output: added <code>delete_current_line</code> to <code>RichTerminalReporter</code> for cleaner UI.</li> <li>Refactored and cleaned up: removed redundant import of <code>handle_command</code>, removed backup, structure, and test strategy files, and added <code>.vscode/settings.json</code> for VSCode excludes.</li> </ul>"},{"location":"changelogs/CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li>MistralAI provider and driver references and related files.</li> <li>Conversation history persistence and updated input history path.</li> </ul>"},{"location":"changelogs/CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Removed inline web file viewer documentation from <code>README.md</code> for clarity and focus on core options.</li> </ul>"},{"location":"changelogs/CHANGELOG/#240","title":"[2.4.0]","text":""},{"location":"changelogs/CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Refactored tool permission management: migrated to a permission-based model (read/write/execute), updated CLI and docs, removed legacy execution toggling.</li> <li>Enhanced tool permissions: tools are now grouped by permission, config supports tool_permissions, ask_user is read-only, and permissions are applied at startup.</li> <li>Refined permission and tool output messages in shell commands; improved tool listing by permission class in tools.py.</li> <li>Refactored agent and prompt handler setup, improved model switching, and enhanced user interrupt handling. Includes new /model shell command and fixes for provider registry ASCII fallback.</li> <li>Refactored agent system prompt and permissions logic, switched to profile-based template selection, removed unused templates, and added --profile CLI support.</li> <li>Refactored chat mode startup messages and permission reset handling for improved clarity.</li> <li>Refactored ChatSession and ChatShellState: removed allow_execution logic and related assignments, use exec_enabled directly for execution control.</li> <li>Refactored tool system to use latest git tag for version detection in release script.</li> <li>Refined release script to recommend creating a new git tag if version exists on PyPI.</li> <li>Removed termweb: web file viewer and related CLI/editor features, updated docs and config accordingly.</li> <li>Removed test file x.txt.</li> <li>Restored tool permissions to CLI defaults on /restart; store and retrieve default tool permissions in AllowedPermissionsState. Runner now sets and saves default permissions for restoration. Updated conversation_restart to restore or fallback to all-off permissions.</li> <li>Updated disabled execution tools message for clarity.</li> <li>Docs and UX: clarified permissions (read/write/exec), added profiles doc links, and removed localhost references from UI/toolbar.</li> </ul>"},{"location":"changelogs/CHANGELOG/#added_13","title":"Added","text":"<ul> <li>Agent/driver: drain driver's input queue before sending new messages in chat() to prevent stale DriverInput processing.</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Ensure tools adapter is always available in provider classes, even if driver is missing. Prevents AttributeError in generic code paths relying on execute_tool().</li> </ul>"},{"location":"changelogs/CHANGELOG/#231-2025-06-25","title":"[2.3.1] - 2025-06-25","text":""},{"location":"changelogs/CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Bumped version to 2.3.1 in <code>version.py</code>, <code>pyproject.toml</code>, and <code>__init__.py</code>.</li> </ul>"},{"location":"changelogs/CHANGELOG/#230-2025-06-25","title":"[2.3.0] - 2025-06-25","text":""},{"location":"changelogs/CHANGELOG/#added_14","title":"Added","text":"<ul> <li>requirements-dev.txt with development dependencies (pytest, pre-commit, ruff, detect-secrets, codespell, black) for code quality and testing</li> <li>Java outline support to get_file_outline tool, including package-private methods</li> <li>create_driver method to AzureOpenAIProvider for driver instantiation</li> <li>CLI --version test and suppress pytest-asyncio deprecation warning</li> <li>New dependencies: prompt_toolkit, lxml, requests, bs4 to requirements.txt</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Improved error messages and documentation</li> <li>Refined error handling in open_html_in_browser.py and open_url.py</li> <li>Refactor remove_file tool: use ReportAction.DELETE for all file removal actions</li> <li>Remove redundant _prepare_api_kwargs override in AzureOpenAIModelDriver</li> <li>Refactor(azure_openai): use 'model' directly in API kwargs, remove deployment_name remapping</li> <li>Add public read-only driver_config property to AzureOpenAIProvider</li> <li>Add _prepare_api_kwargs to support deployment_name for Azure OpenAI API compatibility</li> <li>Update toolbar bindings: add CTRL-C for interrupt/exit, clarify F1 usage</li> <li>Update pyproject.toml optional-dependencies section for setuptools compatibility</li> <li>Remove references to max_results in FindFilesTool docstring</li> <li>Refactor: use .jsonl extension for input history files instead of .log</li> <li>Refactor get_file_outline core logic to remove duplication and add tests</li> <li>Test CLI: Ensure error on missing provider and validate supported models output for each provider</li> <li>Configure dynamic dependencies in pyproject.toml</li> <li>Define dependencies in requirements.txt: attrs, rich, pathspec, setuptools, pyyaml, jinja2</li> <li>Add workdir support to LocalToolsAdapter and CLI; improve Python tool adapters</li> <li>Friendly error message when the provider is not present from the available ones</li> </ul>"},{"location":"changelogs/CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Ensure error on missing provider and validate supported models output for each provider</li> <li>Update supported models table; remove o4-mini-high model from code and docs</li> </ul>"},{"location":"changelogs/CHANGELOG/#211-2024-06-23","title":"[2.1.1] - 2024-06-23","text":""},{"location":"changelogs/CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>Bumped version to 2.1.1 in <code>version.py</code>, <code>pyproject.toml</code>, and <code>__init__.py</code>.</li> <li>docs: add DeepSeek setup guide, update navigation and references<ul> <li>Add docs/deepseek-setup.md with setup instructions for DeepSeek provider</li> <li>Link DeepSeek setup in docs/index.md and mkdocs.yml navigation</li> <li>Fix model name: change 'deepseek-coder' to 'deepseek-reasoner' in DeepSeek provider and model_info</li> <li>Update DeepSeek provider docstrings and options to match supported models</li> </ul> </li> </ul>"},{"location":"changelogs/CHANGELOG/#210-2024-06-09","title":"[2.1.0] - 2024-06-09","text":""},{"location":"changelogs/CHANGELOG/#added_15","title":"Added","text":""},{"location":"changelogs/CHANGELOG/#changed_14","title":"Changed","text":"<ul> <li>Bumped version to 2.1.0 in <code>version.py</code>, <code>pyproject.toml</code>, and <code>__init__.py</code>.</li> </ul> <p>Older changes may not be listed.</p>"},{"location":"changelogs/CHANGELOG/#changelog-v2230","title":"Changelog v2.23.0","text":""},{"location":"changelogs/CHANGELOG/#2230-2025-08-14","title":"[2.23.0] - 2025-08-14","text":""},{"location":"changelogs/CHANGELOG/#added_16","title":"Added","text":"<ul> <li>Remote Plugin Repository Support: Added comprehensive support for loading plugins from the official <code>ikignosis/janito-plugins</code> repository</li> <li>Automatic Discovery: Plugins can be automatically discovered and loaded from remote GitHub repository</li> <li>Configuration Management: New configuration options for remote plugin management</li> <li>Security Features: Built-in verification and sandboxing for remote plugins</li> <li> <p>Update Mechanism: Automatic and manual update capabilities for remote plugins</p> </li> <li> <p>Plugin System Enhancements:</p> </li> <li>Plugin Categories: Official and community plugin categorization</li> <li>Configuration Schemas: JSON schema validation for plugin configuration</li> <li>Hot Loading: Dynamic plugin loading/unloading without restart</li> <li> <p>CLI Integration: New commands for plugin management (<code>--list-remote-plugins</code>, <code>--update-remote-plugins</code>)</p> </li> <li> <p>Documentation: Comprehensive guides for remote plugin usage</p> </li> <li>Remote Plugins Guide - Complete documentation for remote plugin usage</li> <li>Updated Plugin System Guide with remote plugin integration</li> <li>Enhanced README-PLUGINS.md with remote repository references</li> </ul>"},{"location":"changelogs/CHANGELOG/#changed_15","title":"Changed","text":"<ul> <li>Plugin Discovery: Enhanced plugin discovery system to support both local and remote sources</li> <li>Configuration Format: Extended <code>janito.json</code> to support remote plugin configuration</li> <li>CLI Interface: Added new plugin management commands and improved existing ones</li> </ul>"},{"location":"changelogs/CHANGELOG/#security_4","title":"Security","text":"<ul> <li>Repository Verification: Added verification for remote plugin sources</li> <li>Access Control: Implemented proper access controls for remote plugin loading</li> <li>Configuration Validation: Enhanced validation for plugin configuration parameters</li> </ul>"},{"location":"changelogs/CHANGELOG/#developer-experience_2","title":"Developer Experience","text":"<ul> <li>Plugin Templates: Added example plugin structure in <code>plugins/example_plugin.py</code></li> <li>Testing Framework: Comprehensive test suite for plugin system in <code>tests/test_plugin_system.py</code></li> <li>Documentation: Detailed API documentation and usage examples</li> </ul>"},{"location":"changelogs/CHANGELOG/#migration-guide_1","title":"Migration Guide","text":"<p>For users upgrading from previous versions:</p> <ol> <li> <p>Configuration Update: Add remote plugin configuration to <code>janito.json</code>:    <code>json    {      \"plugins\": {        \"remote\": {          \"enabled\": true,          \"repository\": \"https://github.com/ikignosis/janito-plugins.git\"        }      }    }</code></p> </li> <li> <p>Plugin Discovery: Existing local plugins continue to work unchanged</p> </li> <li>CLI Commands: New commands are backward compatible with existing usage</li> </ol>"},{"location":"changelogs/CHANGELOG/#contributors","title":"Contributors","text":"<ul> <li>Enhanced plugin system architecture</li> <li>Added remote repository integration</li> <li>Improved documentation and examples</li> <li>Strengthened security and validation features</li> </ul> <p>Full Changelog: https://github.com/ikignosis/janito/compare/v2.22.0...v2.23.0</p>"},{"location":"changelogs/CHANGELOG_2.16.0/","title":"Changelog v2.16.0","text":""},{"location":"changelogs/CHANGELOG_2.16.0/#2160-2025-01-08","title":"[2.16.0] - 2025-01-08","text":""},{"location":"changelogs/CHANGELOG_2.16.0/#added","title":"Added","text":"<ul> <li>New CLI Features</li> <li><code>--developer</code> flag: Start directly with Python developer profile without manual selection</li> <li><code>--multi</code> option: Enable default multiline input in chat mode</li> <li><code>--list-drivers</code> command: List available LLM drivers and their dependencies</li> <li> <p><code>--list-providers-region</code> command: Show providers with region information</p> </li> <li> <p>New Providers</p> </li> <li>Z.AI Provider: Complete support for Z.AI with GLM-4.5, GLM-4, and GLM-4V models<ul> <li>GLM-4.5: 128k context with thinking support for advanced reasoning</li> <li>GLM-4: General-purpose model with 128k context</li> <li>GLM-4V: Vision model for image understanding with 128k context</li> </ul> </li> <li> <p>Alibaba Cloud Provider: Support for Qwen models including qwen-turbo, qwen-plus, qwen-max, and qwen3-coder-plus</p> </li> <li> <p>Enhanced UX</p> </li> <li>Model information display now includes backend hostname in both chat and single-shot modes</li> <li>Improved region management with geolocation utilities</li> <li>Enhanced error handling for missing API keys and dependencies</li> </ul>"},{"location":"changelogs/CHANGELOG_2.16.0/#changed","title":"Changed","text":"<ul> <li>Provider Improvements</li> <li>Updated Z.AI provider to use official SDK with improved model support</li> <li>Changed default GLM model from air to regular version</li> <li>Updated Alibaba endpoint to international URL for better global access</li> <li> <p>Simplified region display to 2-letter codes for cleaner output</p> </li> <li> <p>Documentation</p> </li> <li>Updated documentation URLs to use GitHub Pages default domain</li> <li>Fixed documentation URL to docs.janito.dev</li> <li>Enhanced provider documentation with new Z.AI and Alibaba Cloud details</li> </ul>"},{"location":"changelogs/CHANGELOG_2.16.0/#fixed","title":"Fixed","text":"<ul> <li>Bug Fixes</li> <li>Fixed AttributeError when ZAIProvider API key is missing</li> <li>Removed accidentally committed test files</li> <li>Improved error handling and user experience in profile selection</li> <li> <p>Fixed various import order issues for better code organization</p> </li> <li> <p>Code Quality</p> </li> <li>Refactored provider registry for reduced complexity</li> <li>Improved CLI argument handling and validation</li> <li>Enhanced terminal output styling and formatting</li> </ul>"},{"location":"changelogs/CHANGELOG_2.16.0/#security","title":"Security","text":"<ul> <li>Enhanced Security</li> <li>Improved privilege checking and status display in chat sessions</li> <li>Enhanced error handling for missing dependencies and API keys</li> <li>Better validation of provider configurations</li> </ul>"},{"location":"changelogs/CHANGELOG_2.16.0/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Architecture</li> <li>Refactored core CLI and runner modules for better maintainability</li> <li>Improved prompt handling and streamlined main CLI logic</li> <li>Enhanced provider registry with new visual indicators</li> <li> <p>Better separation of concerns in driver and provider implementations</p> </li> <li> <p>Performance</p> </li> <li>Optimized model information retrieval</li> <li>Improved startup performance with better configuration handling</li> <li>Enhanced memory usage in chat sessions</li> </ul>"},{"location":"changelogs/CHANGELOG_2.16.0/#developer-experience","title":"Developer Experience","text":"<ul> <li>Testing</li> <li>Added comprehensive tests for new CLI commands</li> <li>Improved test coverage for provider configurations</li> <li> <p>Enhanced error handling in test scenarios</p> </li> <li> <p>Documentation</p> </li> <li>Updated all provider documentation with new features</li> <li>Added comprehensive setup guides for new providers</li> <li>Improved CLI usage examples and syntax highlighting</li> </ul>"},{"location":"changelogs/CHANGELOG_2.23.0/","title":"Changelog v2.23.0","text":""},{"location":"changelogs/CHANGELOG_2.23.0/#2230-2025-08-14","title":"[2.23.0] - 2025-08-14","text":""},{"location":"changelogs/CHANGELOG_2.23.0/#added","title":"Added","text":"<ul> <li>Remote Plugin Repository Support: Added comprehensive support for loading plugins from the official <code>ikignosis/janito-plugins</code> repository</li> <li>Automatic Discovery: Plugins can be automatically discovered and loaded from remote GitHub repository</li> <li>Configuration Management: New configuration options for remote plugin management</li> <li>Security Features: Built-in verification and sandboxing for remote plugins</li> <li> <p>Update Mechanism: Automatic and manual update capabilities for remote plugins</p> </li> <li> <p>Plugin System Enhancements:</p> </li> <li>Plugin Categories: Official and community plugin categorization</li> <li>Configuration Schemas: JSON schema validation for plugin configuration</li> <li>Hot Loading: Dynamic plugin loading/unloading without restart</li> <li> <p>CLI Integration: New commands for plugin management (<code>--list-remote-plugins</code>, <code>--update-remote-plugins</code>)</p> </li> <li> <p>Documentation: Comprehensive guides for remote plugin usage</p> </li> <li>Remote Plugins Guide - Complete documentation for remote plugin usage</li> <li>Updated Plugin System Guide with remote plugin integration</li> <li>Enhanced README-PLUGINS.md with remote repository references</li> </ul>"},{"location":"changelogs/CHANGELOG_2.23.0/#changed","title":"Changed","text":"<ul> <li>Plugin Discovery: Enhanced plugin discovery system to support both local and remote sources</li> <li>Configuration Format: Extended <code>janito.json</code> to support remote plugin configuration</li> <li>CLI Interface: Added new plugin management commands and improved existing ones</li> </ul>"},{"location":"changelogs/CHANGELOG_2.23.0/#security","title":"Security","text":"<ul> <li>Repository Verification: Added verification for remote plugin sources</li> <li>Access Control: Implemented proper access controls for remote plugin loading</li> <li>Configuration Validation: Enhanced validation for plugin configuration parameters</li> </ul>"},{"location":"changelogs/CHANGELOG_2.23.0/#developer-experience","title":"Developer Experience","text":"<ul> <li>Plugin Templates: Added example plugin structure in <code>plugins/example_plugin.py</code></li> <li>Testing Framework: Comprehensive test suite for plugin system in <code>tests/test_plugin_system.py</code></li> <li>Documentation: Detailed API documentation and usage examples</li> </ul>"},{"location":"changelogs/CHANGELOG_2.23.0/#migration-guide","title":"Migration Guide","text":"<p>For users upgrading from previous versions:</p> <ol> <li> <p>Configuration Update: Add remote plugin configuration to <code>janito.json</code>:    <code>json    {      \"plugins\": {        \"remote\": {          \"enabled\": true,          \"repository\": \"https://github.com/ikignosis/janito-plugins.git\"        }      }    }</code></p> </li> <li> <p>Plugin Discovery: Existing local plugins continue to work unchanged</p> </li> <li>CLI Commands: New commands are backward compatible with existing usage</li> </ol>"},{"location":"changelogs/CHANGELOG_2.23.0/#contributors","title":"Contributors","text":"<ul> <li>Enhanced plugin system architecture</li> <li>Added remote repository integration</li> <li>Improved documentation and examples</li> <li>Strengthened security and validation features</li> </ul> <p>Full Changelog: https://github.com/ikignosis/janito/compare/v2.22.0...v2.23.0</p>"},{"location":"changelogs/CHANGELOG_2.26.0/","title":"Changelog v2.26.0","text":""},{"location":"changelogs/CHANGELOG_2.26.0/#2260-2025-08-16","title":"[2.26.0] - 2025-08-16","text":""},{"location":"changelogs/CHANGELOG_2.26.0/#added","title":"Added","text":"<ul> <li>Chat Mode Shell Enhancements:</li> <li>Unrestricted Mode Command: Added new <code>/unrestricted</code> command to chat mode shell<ul> <li>Toggle unrestricted mode equivalent to the <code>-u</code> CLI flag</li> <li>Real-time switching between restricted and unrestricted modes</li> <li>Visual feedback with color-coded status messages</li> <li>Integration with URL whitelist manager for comprehensive security control</li> <li>Security Warning: Clear indication when unrestricted mode is enabled (DANGEROUS - no path or URL restrictions)</li> </ul> </li> </ul>"},{"location":"changelogs/CHANGELOG_2.26.0/#security","title":"Security","text":"<ul> <li>Enhanced Security Controls: </li> <li>URL whitelist manager integration with unrestricted mode toggle</li> <li>Path security controls synchronized with shell state</li> <li>Real-time security status updates in chat mode</li> </ul>"},{"location":"changelogs/CHANGELOG_2.26.0/#developer-experience","title":"Developer Experience","text":"<ul> <li>Chat Mode Usability: </li> <li>Seamless switching between security modes without restart</li> <li>Clear visual indicators for current security state</li> <li>Consistent behavior between CLI flags and shell commands</li> </ul>"},{"location":"changelogs/CHANGELOG_2.26.0/#technical-details","title":"Technical Details","text":"<ul> <li>Implementation: New <code>UnrestrictedShellHandler</code> class in <code>janito.cli.chat_mode.shell.commands.unrestricted</code></li> <li>Integration: Full integration with existing shell state management</li> <li>Compatibility: Backward compatible with existing <code>-u</code> CLI flag behavior</li> </ul>"},{"location":"changelogs/CHANGELOG_2.26.0/#migration-guide","title":"Migration Guide","text":"<p>For users upgrading from v2.25.0:</p> <ol> <li>No Breaking Changes: All existing functionality remains unchanged</li> <li>New Command: Use <code>/unrestricted</code> in chat mode shell to toggle unrestricted mode</li> <li>CLI Flag: The <code>-u</code> CLI flag continues to work as before</li> <li>Security: Unrestricted mode is clearly indicated with red warning text</li> </ol>"},{"location":"changelogs/CHANGELOG_2.26.0/#contributors","title":"Contributors","text":"<ul> <li>Added unrestricted mode command for enhanced chat mode flexibility</li> <li>Improved security state management in shell commands</li> <li>Enhanced user feedback for security-sensitive operations</li> </ul> <p>Full Changelog: https://github.com/ikignosis/janito/compare/v2.25.0...v2.26.0</p>"},{"location":"changelogs/CHANGELOG_2.27.0/","title":"Changelog v2.27.0","text":""},{"location":"changelogs/CHANGELOG_2.27.0/#2270-2025-08-16","title":"[2.27.0] - 2025-08-16","text":""},{"location":"changelogs/CHANGELOG_2.27.0/#added","title":"Added","text":"<ul> <li>Enhanced CLI Experience:</li> <li> <p>One-Shot Mode Prefix Support: Added <code>/rwx</code> prefix support to enable all tool permissions in a single command</p> <ul> <li>Use <code>/rwx \"your prompt here\"</code> to enable read, write, and execute permissions in one-shot mode</li> <li>Equivalent to using <code>-r -w -x</code> flags but more convenient for quick tasks</li> <li>Maintains security by requiring explicit user action for each command</li> </ul> </li> <li> <p>Enhanced Web Fetching:</p> </li> <li>Browser-like Session Support: Enhanced <code>fetch_url</code> tool with browser-like session capabilities<ul> <li>Persistent session management for improved reliability</li> <li>Better handling of cookies and session state</li> <li>Enhanced user-agent and header management</li> <li>Improved error handling for network requests</li> </ul> </li> </ul>"},{"location":"changelogs/CHANGELOG_2.27.0/#changed","title":"Changed","text":"<ul> <li>Improved Documentation:</li> <li>Updated CLI documentation to reflect new <code>/rwx</code> prefix and one-shot mode features</li> <li>Enhanced fetch_url tool documentation with new session parameters</li> <li>Improved parameter descriptions and usage examples</li> </ul>"},{"location":"changelogs/CHANGELOG_2.27.0/#fixed","title":"Fixed","text":"<ul> <li>Documentation Fixes:</li> <li>Added missing docstring parameters for fetch_url tool</li> <li>Fixed parameter documentation inconsistencies</li> </ul>"},{"location":"changelogs/CHANGELOG_2.27.0/#developer-experience","title":"Developer Experience","text":"<ul> <li>CLI Usability: </li> <li>Streamlined one-shot mode with convenient prefix commands</li> <li>Consistent behavior between interactive and non-interactive modes</li> <li>Clear documentation for new features</li> </ul>"},{"location":"changelogs/CHANGELOG_2.27.0/#technical-details","title":"Technical Details","text":"<ul> <li>Implementation: Enhanced CLI argument parsing to support <code>/rwx</code> prefix</li> <li>Integration: Full integration with existing permission system</li> <li>Compatibility: Backward compatible with existing CLI flags and commands</li> </ul>"},{"location":"changelogs/CHANGELOG_2.27.0/#migration-guide","title":"Migration Guide","text":"<p>For users upgrading from v2.26.0:</p> <ol> <li>No Breaking Changes: All existing functionality remains unchanged</li> <li>New Prefix: Use <code>/rwx \"prompt\"</code> for one-shot mode with all permissions</li> <li>Existing Flags: <code>-r -w -x</code> flags continue to work as before</li> <li>fetch_url Tool: Enhanced session support is automatic, no configuration needed</li> </ol>"},{"location":"changelogs/CHANGELOG_2.27.0/#contributors","title":"Contributors","text":"<ul> <li>Added convenient one-shot mode prefix for improved CLI experience</li> <li>Enhanced web fetching capabilities with browser-like session support</li> <li>Improved documentation and parameter descriptions</li> <li>Fixed documentation inconsistencies</li> </ul> <p>Full Changelog: https://github.com/ikignosis/janito/compare/v2.26.0...v2.27.0</p>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/","title":"Janito v2.22.0 Release Notes","text":""},{"location":"changelogs/RELEASE_NOTES_2.22.0/#new-features","title":"\ud83d\ude80 New Features","text":""},{"location":"changelogs/RELEASE_NOTES_2.22.0/#ibm-watsonx-provider-support","title":"IBM WatsonX Provider Support","text":"<ul> <li>New Provider: Added comprehensive IBM WatsonX provider integration</li> <li>Model Support: Includes IBM Granite models and various open-source models available through WatsonX</li> <li>Documentation: Complete setup guide with authentication and configuration instructions</li> <li>Enhanced Capabilities: Access to enterprise-grade AI models for business and financial analysis</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#market-analyst-profile","title":"Market Analyst Profile","text":"<ul> <li>New Profile: Added specialized Market Analyst profile for financial analysis workflows</li> <li>Financial Analysis: Optimized for stock market analysis, financial data interpretation, and market research</li> <li>Data Sources: Integrated support for public financial data sources and market APIs</li> <li>Templates: Comprehensive system prompt template for market-focused conversations</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#improvements","title":"\ud83d\udd27 Improvements","text":""},{"location":"changelogs/RELEASE_NOTES_2.22.0/#enhanced-fetch_url-tool","title":"Enhanced fetch_url Tool","text":"<ul> <li>Error Handling: Added intelligent error caching for 403 (Forbidden) and 404 (Not Found) responses</li> <li>Performance: Reduced redundant network requests when URLs are known to be inaccessible</li> <li>Reliability: Better handling of rate limiting and session-based access restrictions</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#documentation-updates","title":"Documentation Updates","text":"<ul> <li>IBM Setup Guide: Complete step-by-step documentation for IBM WatsonX configuration</li> <li>Market Data Sources: Comprehensive guide to public financial data sources</li> <li>Stock Market Guide: Detailed instructions for stock market analysis workflows</li> <li>Provider Platform Access: Updated documentation covering all supported providers</li> <li>Portuguese Translation: Updated README-pt.md with latest features</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Profile Selection: Fixed profile template path resolution in session selection</li> <li>Template Loading: Improved handling of profile template paths across different environments</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"changelogs/RELEASE_NOTES_2.22.0/#new-documentation-files","title":"New Documentation Files","text":"<ul> <li><code>docs/ibm-setup.md</code> - Complete IBM WatsonX setup guide</li> <li><code>docs/guides/market-data-sources.md</code> - Public financial data sources guide</li> <li><code>docs/guides/stock-market-guide.md</code> - Stock market analysis workflows</li> <li><code>docs/public-sources.md</code> - Comprehensive public data sources documentation</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#updated-documentation","title":"Updated Documentation","text":"<ul> <li><code>docs/drivers.md</code> - Updated with IBM WatsonX driver information</li> <li><code>docs/index.md</code> - Enhanced with new provider and profile information</li> <li><code>docs/provider-platform-access.md</code> - Updated provider comparison table</li> <li><code>docs/supported-providers-models.md</code> - Added IBM WatsonX model listings</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#usage-examples","title":"\ud83c\udfaf Usage Examples","text":""},{"location":"changelogs/RELEASE_NOTES_2.22.0/#ibm-watsonx-configuration","title":"IBM WatsonX Configuration","text":"<pre><code># Set up IBM WatsonX provider\njanito config set provider ibm\njanito config set model ibm/granite-3-8b-instruct\njanito config set api_key YOUR_IBM_API_KEY\n</code></pre>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#market-analyst-profile_1","title":"Market Analyst Profile","text":"<pre><code># Use the new Market Analyst profile\njanito --profile market_analyst \"Analyze AAPL stock performance for Q3 2024\"\n</code></pre>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#technical-details","title":"\ud83d\udd0d Technical Details","text":""},{"location":"changelogs/RELEASE_NOTES_2.22.0/#files-addedmodified","title":"Files Added/Modified","text":"<ul> <li><code>janito/providers/ibm/model_info.py</code> - IBM WatsonX model definitions</li> <li><code>janito/agent/templates/profiles/system_prompt_template_market_analyst.txt.j2</code> - Market analyst profile template</li> <li><code>janito/cli/chat_mode/session_profile_select.py</code> - Fixed profile selection logic</li> <li><code>janito/tools/adapters/local/fetch_url.py</code> - Enhanced error handling and caching</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#dependencies","title":"Dependencies","text":"<ul> <li>No new dependencies added</li> <li>Compatible with existing Janito installations</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.22.0/#acknowledgments","title":"\ud83c\udf89 Acknowledgments","text":"<p>Special thanks to the community for feedback and contributions that helped shape this release, particularly around financial analysis use cases and enterprise AI integration.</p> <p>Full Changelog: https://github.com/ikignosis/janito/compare/v2.21.0...v2.22.0</p> <p>Installation: <code>uv pip install janito==2.22.0</code> or <code>uv pip install --upgrade janito</code></p>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/","title":"Janito v2.24.1 Release Notes","text":""},{"location":"changelogs/RELEASE_NOTES_2.24.1/#new-features","title":"\ud83d\ude80 New Features","text":""},{"location":"changelogs/RELEASE_NOTES_2.24.1/#loop-protection-for-local-tools","title":"Loop Protection for Local Tools","text":"<ul> <li>Enhanced Safety: Implemented comprehensive loop protection mechanisms for all local tools to prevent infinite loops and excessive resource consumption</li> <li>Decorator System: Added <code>@loop_protection</code> decorator that can be applied to tool functions to automatically monitor and limit execution cycles</li> <li>Configurable Limits: Set maximum execution times and iteration counts for protected tools with customizable thresholds</li> <li>Smart Detection: Automatic detection of repetitive patterns and potential infinite loops in tool execution</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#improved-error-reporting","title":"Improved Error Reporting","text":"<ul> <li>Detailed Diagnostics: Enhanced error messages now include context information, execution stack traces, and resource usage statistics</li> <li>Protection Status: Clear indication when loop protection mechanisms are triggered, with detailed information about what caused the intervention</li> <li>Recovery Suggestions: Error reports now include actionable suggestions for resolving loop-related issues</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#improvements","title":"\ud83d\udd27 Improvements","text":""},{"location":"changelogs/RELEASE_NOTES_2.24.1/#tool-adapter-enhancements","title":"Tool Adapter Enhancements","text":"<ul> <li>Performance Monitoring: Added execution time tracking for all local tool adapters</li> <li>Resource Management: Improved memory and CPU usage monitoring during tool execution</li> <li>Graceful Degradation: Better handling of resource exhaustion scenarios with informative user feedback</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#developer-experience","title":"Developer Experience","text":"<ul> <li>Example Scripts: Added comprehensive example scripts demonstrating loop protection usage (<code>examples/loop_protection_example.py</code>)</li> <li>Tool Examples: Practical examples showing how to implement loop protection in custom tools (<code>examples/loop_protection_tool_example.py</code>)</li> <li>Documentation: Updated developer documentation with loop protection implementation guidelines</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Resource Leaks: Fixed potential memory leaks in long-running tool executions</li> <li>Exception Handling: Improved exception handling in tool adapters to prevent crashes during protection interventions</li> <li>Status Reporting: Corrected issues with protection status reporting in complex execution scenarios</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"changelogs/RELEASE_NOTES_2.24.1/#new-documentation-files","title":"New Documentation Files","text":"<ul> <li><code>docs/guides/tools-developer-guide.md</code> - Comprehensive guide for developing tools with loop protection</li> <li><code>docs/tools/loop-protection.md</code> - Detailed documentation on loop protection mechanisms and usage</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#updated-documentation","title":"Updated Documentation","text":"<ul> <li><code>README-dev.md</code> - Enhanced with loop protection development guidelines</li> <li><code>janito/tools/README.md</code> - Updated with loop protection implementation details</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#technical-details","title":"\ud83d\udd0d Technical Details","text":""},{"location":"changelogs/RELEASE_NOTES_2.24.1/#files-addedmodified","title":"Files Added/Modified","text":"<ul> <li><code>janito/tools/loop_protection.py</code> - Core loop protection implementation</li> <li><code>janito/tools/loop_protection_decorator.py</code> - Decorator for applying loop protection to functions</li> <li><code>examples/loop_protection_example.py</code> - Example demonstrating loop protection usage</li> <li><code>examples/loop_protection_tool_example.py</code> - Tool-specific loop protection example</li> <li><code>janito/tools/adapters/local/*.py</code> - All local tool adapters updated with loop protection integration</li> <li><code>test_loop_protection_return.py</code> - Test suite for loop protection functionality</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#dependencies","title":"Dependencies","text":"<ul> <li>No new dependencies added</li> <li>Compatible with existing Janito installations</li> </ul>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#usage-examples","title":"\ud83c\udfaf Usage Examples","text":""},{"location":"changelogs/RELEASE_NOTES_2.24.1/#applying-loop-protection-to-custom-tools","title":"Applying Loop Protection to Custom Tools","text":"<pre><code>from janito.tools.loop_protection_decorator import loop_protection\n\n@loop_protection(max_iterations=100, timeout_seconds=30)\ndef my_custom_tool(data):\n    # Your tool implementation here\n    # Loop protection will automatically monitor execution\n    pass\n</code></pre>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#configuration-options","title":"Configuration Options","text":"<pre><code># Set global loop protection limits\njanito config set loop_protection.max_iterations 500\njanito config set loop_protection.timeout_seconds 60\n</code></pre>"},{"location":"changelogs/RELEASE_NOTES_2.24.1/#acknowledgments","title":"\ud83c\udf89 Acknowledgments","text":"<p>Special thanks to the community for feedback and contributions that helped shape this release, particularly around safety and reliability improvements.</p> <p>Full Changelog: https://github.com/ikignosis/janito/compare/v2.24.0...v2.24.1</p> <p>Installation: <code>uv pip install janito==2.24.1</code> or <code>uv pip install --upgrade janito</code></p>"},{"location":"code_intelligence/agentic-frameworks-comparison/","title":"Why Janito Uses a Built-in Agentic Framework for Code","text":""},{"location":"code_intelligence/agentic-frameworks-comparison/#overview","title":"Overview","text":"<p>Janito is designed with a built-in agentic framework tailored specifically for code generation, analysis, and editing. This approach is fundamentally different from most general-purpose agentic frameworks, which are typically optimized for structured data extraction and workflow automation.</p>"},{"location":"code_intelligence/agentic-frameworks-comparison/#general-purpose-agentic-frameworks","title":"General-purpose Agentic Frameworks","text":"<ul> <li>Primary Focus:</li> <li>Extracting structured data from unstructured text (e.g., forms, tables, summaries).</li> <li>Automating business processes, information retrieval, or conversational flows.</li> <li>Strengths:</li> <li>Well-suited for tasks where the output is a set of fields, entities, or facts.</li> <li>Often rely on templates, schemas, or predefined extraction rules.</li> <li>Limitations for Code:</li> <li>Lack deep understanding of code semantics, dependencies, and context.</li> <li>Not designed for precise, context-aware code editing or refactoring.</li> <li>Struggle with the fragility and interconnectedness of code (see Challenges of Code Generation and Editing for LLMs).</li> </ul>"},{"location":"code_intelligence/agentic-frameworks-comparison/#janitos-built-in-agentic-framework","title":"Janito\u2019s Built-in Agentic Framework","text":"<ul> <li>Primary Focus:</li> <li>Code search, analysis, editing, and refactoring.</li> <li>Maintaining traceability and explicit error handling.</li> <li>Supporting developer workflows and codebase evolution.</li> <li>Key Features:</li> <li>Step-by-step code search and inference, with user-visible progress (see Code Generation Observability).</li> <li>Validation and testing of code changes.</li> <li>Awareness of code structure, dependencies, and side effects.</li> <li>Designed for iterative, collaborative development.</li> </ul>"},{"location":"code_intelligence/agentic-frameworks-comparison/#why-this-matters","title":"Why This Matters","text":"<ul> <li>Reliability: Code changes require precision and context-awareness\u2014mistakes can break systems.</li> <li>Traceability: Developers need to understand and audit every change, not just the final output.</li> <li>Developer Experience: Janito\u2019s workflow is optimized for real-world coding, not just data extraction.</li> </ul>"},{"location":"code_intelligence/agentic-frameworks-comparison/#conclusion","title":"Conclusion","text":"<p>Janito\u2019s tailored agentic framework is purpose-built for the unique challenges of code generation and editing. It provides the transparency, precision, and control that developers need\u2014going far beyond what general-purpose agentic frameworks can offer for code-centric tasks.</p> <p>generated by janito.dev</p>"},{"location":"code_intelligence/code-generation-challenges/","title":"Challenges of Code Generation and Editing for LLMs","text":"<p>Code Intelligence provides human-in-control intelligence for code understanding, editing, and reliability.</p>"},{"location":"code_intelligence/code-generation-challenges/#what-is-code","title":"What is \"Code\"?","text":"<p>\"Code\" refers to formal instructions written in programming languages. Unlike natural language, code is designed for unambiguous interpretation by machines. Code has strict syntax, grammar, and semantics, and even small deviations can cause errors or unintended behavior.</p>"},{"location":"code_intelligence/code-generation-challenges/#code-semantics-vs-natural-language-semantics","title":"Code Semantics vs. Natural Language Semantics","text":"Aspect Natural Language Code Flexibility Flexible, redundant, context-dependent Precise, rigid, context-sensitive Distribution of Meaning Distributed across words, sentences, and context Concentrated; each token can have a critical role Error Tolerance Minor errors (typos, word swaps) often ignored/understood Small changes (e.g., missing semicolon) can break code Ambiguity Common, resolved by context or intent Not tolerated; requires exactness"},{"location":"code_intelligence/code-generation-challenges/#distribution-and-impact-of-changes","title":"Distribution and Impact of Changes","text":"<ul> <li>Natural Language:</li> <li>Meaning is distributed; a single word rarely changes the entire message.</li> <li>Redundancy allows for graceful degradation\u2014messages are often recoverable.</li> <li> <p>Editing is forgiving; paraphrasing or rewording usually preserves intent.</p> </li> <li> <p>Code:</p> </li> <li>Meaning is concentrated; a single character can change program logic or cause failure.</li> <li>No redundancy\u2014every symbol matters.</li> <li>Editing is fragile; even minor changes can have cascading effects (syntax errors, logic bugs, security vulnerabilities).</li> </ul>"},{"location":"code_intelligence/code-generation-challenges/#challenges-for-llms","title":"Challenges for LLMs","text":"<ol> <li>Syntax Sensitivity:</li> <li>LLMs must generate code that is syntactically valid for the target language.</li> <li> <p>Minor mistakes can render code non-functional.</p> </li> <li> <p>Semantic Precision:</p> </li> <li>LLMs must understand the intent and context to generate correct logic.</li> <li> <p>Misunderstanding requirements can lead to subtle bugs.</p> </li> <li> <p>Context Management:</p> </li> <li>Code often depends on definitions and context spread across files or modules.</li> <li> <p>LLMs must track and respect scope, imports, and dependencies.</p> </li> <li> <p>Refactoring and Editing:</p> </li> <li>Editing code requires understanding dependencies and side effects.</li> <li> <p>LLMs must avoid introducing regressions when making changes.</p> </li> <li> <p>Testing and Validation:</p> </li> <li>Unlike natural language, code must be tested (compiled, run) to verify correctness.</li> <li>LLMs should ideally validate or simulate code execution.</li> </ol>"},{"location":"code_intelligence/code-generation-challenges/#why-these-challenges-matter","title":"Why These Challenges Matter","text":"<ul> <li>Reliability: Small errors can cause major failures in software systems.</li> <li>Safety: Bugs in code can lead to security vulnerabilities or data loss.</li> <li>Collaboration: Code is read and maintained by teams; clarity and correctness are essential.</li> </ul> <p>generated by janito.dev</p>"},{"location":"code_intelligence/code-generation-observability/","title":"Code Generation Observability","text":""},{"location":"code_intelligence/code-generation-observability/#overview","title":"Overview","text":"<p>Code Generation Observability is a feature that provides users with transparent, step-by-step visibility into the assistant's code search, analysis, and generation process. This allows users to:</p> <ul> <li>See which files, lines, and patterns are being searched.</li> <li>Observe the assistant's inference and workflow as it investigates issues or implements features.</li> <li>Intervene or redirect the assistant by providing feedback at each step, improving the quality and relevance of the results.</li> </ul>"},{"location":"code_intelligence/code-generation-observability/#benefits","title":"Benefits","text":"<ul> <li>Transparency: Users understand how results are produced.</li> <li>Debuggability: Easier to spot where misunderstandings or errors occur.</li> <li>Control: Users can guide the assistant more effectively.</li> </ul>"},{"location":"code_intelligence/code-generation-observability/#example-workflow","title":"Example Workflow","text":"<p>When investigating a problem (e.g., a missing keyboard shortcut), the assistant will:</p> <ol> <li>Search for relevant keywords or patterns in the codebase.</li> <li>Display search results, including file names and matching lines.</li> <li>Summarize findings and request user input if multiple directions are possible.</li> <li>Continue investigation or implementation based on user feedback.</li> </ol>"},{"location":"code_intelligence/code-generation-observability/#screenshot","title":"Screenshot","text":"<p>generated by janito.dev</p>"},{"location":"code_intelligence/our-approach/","title":"Our Approach to Code Intelligence and Editing","text":""},{"location":"code_intelligence/our-approach/#overview","title":"Overview","text":"<p>Janito\u2019s approach to code intelligence is designed to maximize transparency, traceability, and user alignment. We leverage methods and primitives that are familiar to developers and closely aligned with human inference and established tooling.</p>"},{"location":"code_intelligence/our-approach/#context-building-with-human-like-primitives","title":"Context Building with Human-like Primitives","text":"<ul> <li>Search Text &amp; Search File:</li> <li>We use explicit text and file search operations to build context, similar to how developers use <code>grep</code>, <code>find</code>, or IDE search.</li> <li>This makes every step visible and auditable, allowing users to understand and guide the assistant\u2019s inference.</li> </ul>"},{"location":"code_intelligence/our-approach/#string-replacement-over-diff","title":"String Replacement over Diff","text":"<ul> <li>Natural Language Alignment:</li> <li>Instead of relying solely on code diffs, we use string replacement primitives.</li> <li>This approach is more aligned with how humans describe changes (\"replace X with Y\"), and is easier to validate and review.</li> <li>It reduces ambiguity and makes the change process more transparent.</li> </ul>"},{"location":"code_intelligence/our-approach/#range-selection-and-contextual-references","title":"Range Selection and Contextual References","text":"<ul> <li>Filename:Line Number:Context:</li> <li>We adopt conventions like <code>filename:line_nr:context</code> for referencing code locations.</li> <li>This is inspired by tools like <code>grep</code> and error reporting systems in Python, JavaScript, and other languages.</li> <li>It enables precise, context-rich navigation and error reporting.</li> </ul>"},{"location":"code_intelligence/our-approach/#benefits-of-our-approach","title":"Benefits of Our Approach","text":"<ul> <li>Transparency: Every step is explicit and visible to the user.</li> <li>Traceability: Changes and inference can be audited and reviewed.</li> <li>User Alignment: Methods are familiar to developers, reducing friction and cognitive load.</li> <li>Reliability: By mirroring established developer workflows, we minimize surprises and errors.</li> </ul> <p>generated by janito.dev</p>"},{"location":"code_intelligence/why-string-replacement/","title":"Why Janito Prefers String\u2011Replacement Rules over Unified Diffs","text":""},{"location":"code_intelligence/why-string-replacement/#overview","title":"Overview","text":"<p>Janito is an LLM\u2011driven code\u2011editing agent. Instead of asking the model to provide a unified diff, Janito provides tooling primitives that steer the model to emit a set of deterministic plain\u2011string find/replace rules, which Janito then applies atomically. This choice maximises reliability, prompt economy, and alignment with the model\u2019s learned behaviour.</p>"},{"location":"code_intelligence/why-string-replacement/#1-trainingsignal-alignment","title":"1  Training\u2011Signal Alignment","text":"<ul> <li>Dominant exposure to raw code. In public\u2011code crawls, plain source lines outnumber diff tokens by ~20\u201140\u202f:\u202f1. The model has far richer \u201cmuscle memory\u201d for patterns like <code>foo(bar)</code> than for hunk headers such as <code>@@ -42,7 +42,8 @@</code>.</li> <li>Micro\u2011edit datasets reinforce replacements. Fine\u2011tune corpora like Google Codediffs and CommitPack present before/after snippets aligned token\u2011by\u2011token. The most common gradient update is \u201csubstitute X with Y,\u201d not \u201cparse and merge a patch.\u201d</li> <li>Pull\u2011request &amp; review corpora add contextual edits. Large crawls ingest GitHub PR diffs, mailing\u2011list patches (e.g., LKML), and Stack\u202fOverflow suggested edits. These sources boost the model\u2019s familiarity with diff syntax, but they remain a minority slice of the overall training mix and are often noisier than pristine source.</li> <li>Forums &amp; step\u2011by\u2011step tutorials reinforce direct replacements. Blog posts and Q&amp;A answers frequently present code \u201cbefore\u201d and \u201cafter,\u201d or instruct: \u201cChange <code>foo = false</code> to <code>foo = true</code> in your config.\u201d These snippets rarely include full diff headers; they mirror the granularity of plain string edits, further tuning the model toward replacement\u2011style transformations.</li> </ul> <p>Implication: A replacement rule asks the model to perform the transformation it has practised millions of times; interpreting a diff asks it to switch to a much rarer skill.</p>"},{"location":"code_intelligence/why-string-replacement/#2-tokenbudget-efficiency","title":"2  Token\u2011Budget Efficiency","text":"Expression of the same change Typical token cost Unified diff (6\u2011line hunk) ~70\u201390 tokens Plain string\u2011replacement rule ~10\u201315 tokens <p>Shorter prompts leave more room for actual code and high\u2011level instructions, reducing context\u2011window pressure and latency.</p>"},{"location":"code_intelligence/why-string-replacement/#3-robustness-in-real-codebases","title":"3  Robustness in Real Codebases","text":"<ul> <li>Line\u2011shift tolerance. If the file drifts after the diff was generated, context lines may no longer match. A string rule keyed to the target pattern still fires.</li> <li>Noise immunity. Email trailers, MIME boundaries, or CI banners embedded in patches confuse parsers but do not affect literal pattern matching.</li> <li>Encoding quirks. Different EOL conventions or charset mishaps break patch offsets; a plain string match usually survives them.</li> </ul>"},{"location":"code_intelligence/why-string-replacement/#takeaway","title":"Takeaway","text":"<p>Plain string\u2011replacement rules line up with the LLM\u2019s most frequent training examples, use a fraction of the tokens, and sidestep brittle patch\u2011parsing failure modes. That is why Janito\u2019s selected edit strategy is rule\u2011first.</p>"},{"location":"concepts/","title":"Concepts &amp; Terminology","text":"<p>This section collects foundational explanations, terminology, and conventions used throughout the documentation. It is intended to help new users and developers understand the key ideas and language model concepts relevant to Janito and similar tools.</p>"},{"location":"concepts/#available-topics","title":"Available Topics","text":"<ul> <li> <p>What Is a Language Model Client?</p> </li> <li> <p>Prompt Analysis Style</p> </li> <li> <p>Prompt Design Style</p> </li> <li> <p>Human-Guided AI Principle</p> </li> </ul> <p>More topics will be added here as the documentation evolves.</p>"},{"location":"concepts/analysis-style/","title":"Analysis Prompting Style: Declaring Role and Knowledge Domain","text":""},{"location":"concepts/analysis-style/#overview","title":"Overview","text":"<p>For effective and reliable AI-driven analysis, prompts should begin by explicitly declaring the intended role and the relevant knowledge domain. This establishes context, sets expectations, and guides the model\u2019s reasoning and language style.</p>"},{"location":"concepts/analysis-style/#why-declare-role-and-domain","title":"Why Declare Role and Domain?","text":"<ul> <li>Role Declaration: Instructs the model to adopt a specific perspective (e.g., software engineer, security auditor, data scientist).</li> <li>Domain Declaration: Focuses the model\u2019s attention on the relevant field or subject matter (e.g., Python projects, web security, machine learning).</li> </ul> <p>Explicitly stating both helps: - Reduce ambiguity - Improve relevance and accuracy - Align output with user intent</p>"},{"location":"concepts/analysis-style/#example-structure","title":"Example Structure","text":"<pre><code>You are a(n) [role] with expertise in [domain]. Your task is to...\n</code></pre>"},{"location":"concepts/analysis-style/#example-prompts","title":"Example Prompts","text":"<ul> <li>You are an expert software project analyst. Your task is to analyze the provided project files and identify the core technologies used in the project.</li> <li>You are a security auditor specializing in web applications. Review the configuration files for potential vulnerabilities.</li> <li>You are a data scientist with experience in time series analysis. Examine the dataset and summarize key trends.</li> </ul>"},{"location":"concepts/analysis-style/#extending-with-analysis-actions","title":"Extending with Analysis Actions","text":"<p>After declaring the role and domain, extend the prompt with clear, actionable analysis instructions. </p>"},{"location":"concepts/analysis-style/#guidance","title":"Guidance:","text":"<ul> <li>Clearly state the analysis objective (e.g., \"identify core technologies\", \"summarize vulnerabilities\", \"extract key metrics\").</li> <li>Specify the expected output format (e.g., bullet points, summary, table).</li> <li>Avoid ambiguity\u2014list exactly what should be included or excluded.</li> <li>Use the condition-before-action (CBA) structure for any prerequisites or constraints.</li> </ul>"},{"location":"concepts/analysis-style/#best-practices","title":"Best Practices","text":"<ul> <li>Always start with a clear role and domain statement.</li> <li>Extend with explicit analysis actions and output requirements.</li> <li>Use precise, unambiguous language.</li> <li>Follow with condition-before-action (CBA) structure for instructions (see Prompt Design Style).</li> <li>Avoid vague roles (e.g., \"expert\"). Specify the field or context when possible.</li> </ul>"},{"location":"concepts/human-guided-ai/","title":"Human-Guided AI: A Principle for Empowerment Through Tools and Instruments","text":"<p>In the accelerating world of artificial intelligence, the Human-Guided AI principle emphasizes that AI systems exist as extensions of human intent, designed to deliver powerful tools and instruments under human direction. This framework not only clarifies the role of AI in society but also anchors ethical responsibility and governance firmly with users and designers.</p>"},{"location":"concepts/human-guided-ai/#human-guided-ai-principle","title":"Human-Guided AI Principle","text":"<p>At the core, the Human-Guided AI principle asserts that every AI system should operate as a tool for human purposes, avoiding undue autonomy\u2014that is, preventing the system from acting or making decisions beyond the scope of intended human oversight and control. AI under this principle is valued for its capacity to augment human capabilities, automate repetitive tasks, and generate novel insights\u2014all while remaining firmly under human oversight and ethical accountability.</p>"},{"location":"concepts/human-guided-ai/#what-are-ai-instruments","title":"What Are AI Instruments?","text":"<p>Under the Human-Guided AI principle, an AI instrument is any system explicitly designed as a tool for human use, with clear boundaries of operation defined by its creators and users. Unlike autonomous AI agents, which may perceive environments and pursue goals independently, AI instruments function strictly as means to human-defined ends.</p> <p>Instrumentality: Under Human-Guided AI, every algorithm and model is a means to amplify human skill and judgment, never to supplant it.</p>"},{"location":"concepts/human-guided-ai/#examples-of-ai-instruments","title":"Examples of AI Instruments","text":"<p>AI instruments manifest across diverse domains, each embodying the Human-Guided AI principle in action:</p> <ul> <li> <p>Scientific Discovery Tools   AI-driven simulations, drug-design algorithms, and protein-folding models (e.g., AlphaFold) accelerate human-led research and hypothesis testing.</p> </li> <li> <p>Creative Assistance   Generative text, image, and music platforms serve as digital co-creators, enabling artists and writers to explore new creative horizons.</p> </li> <li> <p>Data Analysis   Machine learning frameworks that surface patterns in massive datasets support economists, epidemiologists, and climate scientists in human-led decision making.</p> </li> <li> <p>Accessibility Technology   Speech-to-text converters, real-time translators, and other assistive AIs extend communication capabilities, underpinned by human values of inclusion.</p> </li> </ul>"},{"location":"concepts/human-guided-ai/#instruments-and-agents-complementary-roles-under-human-guided-ai","title":"Instruments and Agents: Complementary Roles under Human-Guided AI","text":"<p>While similar technologies underlie both AI instruments and AI agents, the Human-Guided AI principle differentiates them by intent and control:</p> Aspect AI Instrument (Human-Guided) AI Agent Role Tool under human direction Autonomous actor Control Defined and managed by users Independent decision making Responsibility Clearly human Shared or ambiguous Examples ChatGPT as co-writer, AI art apps Self-driving vehicles, trading bots <p>This spectrum underscores that applying the Human-Guided AI principle ensures clarity in both design and governance.</p>"},{"location":"concepts/human-guided-ai/#why-human-guided-ai-matters","title":"Why Human-Guided AI Matters","text":"<p>Framing AI through this principle:</p> <ol> <li>Centers human creativity and judgment.</li> <li>Anchors accountability with tool operators and designers.</li> <li>Guides policy toward regulating instruments rather than hypothetical actors.</li> </ol> <p>By viewing AI as instruments of human agency, stakeholders can better craft regulations, standards, and best practices that prioritize human welfare and ethical use.</p>"},{"location":"concepts/human-guided-ai/#toward-a-responsible-future","title":"Toward a Responsible Future","text":"<p>Integrating the Human-Guided AI principle into development and governance prompts key questions:</p> <ul> <li>Are our systems built to amplify human potential or to operate with hidden objectives?</li> <li>Do we embed technical controls in AI tools and instruments to require explicit user validation and prevent blind acceptance of AI outputs?</li> </ul> <p>Adopting Human-Guided AI as a guiding philosophy empowers researchers, policymakers, and communities to ensure that AI technologies remain true to human values and oversight.</p>"},{"location":"concepts/human-guided-ai/#security-safety-considerations","title":"Security &amp; Safety Considerations","text":"<p>Although AI instruments amplify human capability, they can, like any other tool, be mis-used to cause harm. The Human-Guided AI principle therefore makes no claim of providing additional, intrinsic technical safeguards beyond those that already apply at the point of use. Ultimate responsibility for secure, lawful, and ethical operation lies with each user. Every deployment must adhere to the laws, regulations, and policies that govern the user\u2019s jurisdiction and domain.</p>"},{"location":"concepts/human-guided-ai/#conclusion","title":"Conclusion","text":"<p>The Human-Guided AI principle reframes artificial intelligence not as an independent mind but as a suite of instruments and tools\u2014each a testament to human ingenuity and responsibility. As we harness these capabilities, we must remember:</p> <p>Tools are only as good as the skill and integrity of those who wield them.</p>"},{"location":"concepts/language-model-clients/","title":"What Is a Language Model Client?","text":""},{"location":"concepts/language-model-clients/#what-is-a-language-model-client","title":"What Is a Language Model Client?","text":"<p>A Language Model client is a software component or application that interacts with a language model via a RESTful API. The client sends requests over HTTP(S), supplying a prompt and optional parameters, and then processes the response returned by the service. This architecture abstracts away the complexities of model hosting, scaling, and updates, allowing developers to focus on application logic.</p>"},{"location":"concepts/language-model-clients/#thin-vs-thick-clients","title":"Thin vs. Thick Clients","text":"<p>Language Model clients generally fall into two categories based on where and how much processing they handle: Thin Clients and Thick Clients.</p>"},{"location":"concepts/language-model-clients/#thin-clients","title":"Thin Clients","text":"<p>A thin client is designed to be lightweight and stateless. It primarily acts as a straightforward conduit that relays user prompts and parameters directly to the language model service and passes the raw response back to the application, similar to how a remote control sends commands without processing them. Key characteristics include:</p> <ul> <li>Minimal Processing: Performs little to no transformation on the input prompt or the output response beyond basic formatting and validation.</li> <li>Low Resource Usage: Requires minimal CPU and memory, making it easy to deploy in resource-constrained environments like IoT devices or edge servers.</li> <li>Model Support: Supports both small-footprint models (e.g., <code>*-mini</code>, <code>*-nano</code>) for low-latency tasks and larger models (e.g., GPT O3 Pro, Sonnet 4 Opus) when higher accuracy or more complex reasoning is required.</li> <li>Agentic Capabilities: Supports function calls for agentic workflows, enabling dynamic tool or API integrations that allow the client to perform actions based on LLM responses.</li> <li>Ease of Maintenance: Simple codebase with few dependencies, leading to easier updates and debugging.</li> <li>Self-Sufficiency: Can operate independently without bundling additional applications, ideal for lightweight deployments.</li> </ul> <p>Use Case: A CLI code assistant like aider.chat, which runs as a command-line tool, maintains session context, refines developer prompts, handles fallbacks, and integrates with local code repositories before sending requests to the LLM and processing responses for display in the terminal.</p>"},{"location":"concepts/language-model-clients/#thick-clients","title":"Thick Clients","text":"<p>A thick client handles more logic locally before and after communicating with the LLM service. It may preprocess prompts, manage context, cache results, or post-process responses to enrich functionality. Key characteristics include:</p> <ul> <li>Higher Resource Usage: Requires more CPU, memory, and possibly GPU resources, as it performs advanced processing locally.</li> <li>Model Requirements: Typically designed to work with larger, full-weight models (e.g., GPT-4, Llama 65B), leveraging richer capabilities at the cost of increased latency and resource consumption.</li> <li>Enhanced Functionality: Offers capabilities like local caching for rate limiting, advanced analytics on responses, or integration with other local services (e.g., databases, file systems).</li> <li>Inter-Client Communication: Supports Model Context Protocol (MCP) or Agent-to-Agent (A2A) workflows, enabling coordination and task delegation among multiple agent instances.</li> <li>Bundled Integration: Often bundled or coupled with desktop or web applications to provide a richer user interface and additional features.</li> </ul> <p>Use Case: A desktop application that manages multi-turn conversations, maintains state across sessions, and integrates user-specific data before sending refined prompts to the LLM and processing the returned content for display.</p> <p>Next, we can explore considerations such as security, scaling, and best practices for choosing between thin and thick clients.</p>"},{"location":"concepts/prompt-design-style/","title":"Prompt Design Style: Condition Before Action","text":""},{"location":"concepts/prompt-design-style/#a-key-ordering-principle-in-language-and-prompt-engineering","title":"A Key Ordering Principle in Language and Prompt Engineering","text":"<p>In both natural language and prompt engineering, the structure and order of words significantly impact clarity and effectiveness. One notable pattern is the presentation of a condition before the subsequent action\u2014commonly known as the condition before action order. This article explores the prevalence and importance of this structure, especially in contexts where precise instructions or prompts are required.</p>"},{"location":"concepts/prompt-design-style/#what-does-condition-before-action-mean","title":"What Does Condition Before Action Mean?","text":"<p>The condition before action structure is when a statement specifies a prerequisite or context (the condition) prior to describing the main step or activity (the action). For example:</p> <ul> <li>Condition before action: Before removing or renaming files, update all references and validate the relevant aspects of the system.</li> <li>Action before condition: Update all references and validate the relevant aspects of the system before removing or renaming files.</li> </ul> <p>While both structures can be grammatically correct and convey the intended meaning, the former more explicitly signals to the reader or listener that fulfillment of the condition must precede the action. This is particularly valuable in technical writing, safety protocols, and instructions that must be followed precisely.</p>"},{"location":"concepts/prompt-design-style/#linguistic-perspective","title":"Linguistic Perspective","text":"<p>From a linguistic standpoint, fronting the condition is a way to foreground critical context. This satisfies a reader's expectation for information sequence: context first, then the result or necessary action. Linguists often refer to this as maintaining logical and temporal coherence, which is essential to effective communication.</p>"},{"location":"concepts/prompt-design-style/#implications-for-prompt-engineering","title":"Implications for Prompt Engineering","text":"<p>Prompt engineering\u2014the art of crafting effective inputs for large language models (LLMs)\u2014relies on linguistic patterns present in training corpora. Because much of the high-quality material these models learn from (technical documentation, instructions, programming guides) uses condition before action ordering, LLMs are more likely to interpret and execute prompts that follow this structure accurately.</p> <p>For example, prompting an LLM with:</p> <p>Before you create the report, ensure the data is validated.</p> <p>provides a clear sequence, reducing ambiguity compared to:</p> <p>Ensure the data is validated before you create the report.</p> <p>While LLMs can process both forms, explicit and sequential phrasing aligns better with their linguistic training and often yields more reliable results.</p>"},{"location":"concepts/prompt-design-style/#why-order-matters","title":"Why Order Matters","text":"<p>Generalizing beyond just condition before action, order-of-words is a critical factor in communicating instructions, expressing logic, and minimizing misunderstandings. Other important orders include:</p> <ul> <li>Cause before effect: Because the file was missing, the build failed.</li> <li>Reason before request: Since you're available, could you review this?</li> <li>Qualifier before command: If possible, finish this by noon.</li> </ul> <p>Each of these helps set context and prevent errors\u2014essential in instructive writing and conversational AI interactions.</p>"},{"location":"concepts/prompt-design-style/#avoiding-ambiguity-be-explicit-with-actions-and-objects","title":"Avoiding Ambiguity: Be Explicit with Actions and Objects","text":"<p>A common source of ambiguity in prompts is the use of vague verbs such as \"validate\", \"check\", or \"review\" without specifying what is being validated, checked, or reviewed, and by what criteria. For example, the instruction \"validate the system\" is ambiguous: what aspects of the system should be validated, and how?</p>"},{"location":"concepts/prompt-design-style/#guideline","title":"Guideline:","text":"<ul> <li>Avoid vague verbs without a clear object and criteria. Instead, specify what should be validated and how. For example, use \"validate the relevant configuration files for syntax errors\" or \"validate the output matches the expected format\".</li> <li>When using the condition-before-action structure, ensure both the condition and the action are explicit and unambiguous.</li> </ul>"},{"location":"concepts/prompt-design-style/#example-generalized","title":"Example (generalized):","text":"<ul> <li>Ambiguous: Before removing or renaming files, validate the system.</li> <li>Improved: Before removing or renaming files, validate the relevant aspects of the system (e.g., configuration, dependencies, and references).</li> </ul>"},{"location":"concepts/prompt-design-style/#note","title":"Note:","text":"<p>The phrase \"validate the system before removing or renaming files\" does follow the condition-before-action structure, but the object (\"the system\") should be made more explicit for clarity and reliability.</p>"},{"location":"concepts/prompt-design-style/#qualifiers-determinism-and-llm-behavior","title":"Qualifiers, Determinism, and LLM Behavior","text":""},{"location":"concepts/prompt-design-style/#are-always-and-never-conditions","title":"Are \"Always\" and \"Never\" Conditions?","text":"<p>Words like \"Always\" and \"Never\" are absolute qualifiers, not true conditions. While they may appear to set clear, deterministic boundaries, their interpretation by large language models (LLMs) is not guaranteed to be consistent. LLMs operate probabilistically, so even instructions with absolute qualifiers can yield unexpected or inconsistent results.</p>"},{"location":"concepts/prompt-design-style/#are-qualifiers-ambiguous","title":"Are Qualifiers Ambiguous?","text":"<p>Qualifiers such as \"if possible,\" \"always,\" or \"never\" can introduce ambiguity, especially in the context of LLMs. While these words are often clear to humans, LLMs may interpret or prioritize them differently depending on context, training data, and prompt structure. This means that even deterministic-sounding qualifiers may not produce deterministic outcomes.</p>"},{"location":"concepts/prompt-design-style/#preferred-strategies-for-prompt-engineering","title":"Preferred Strategies for Prompt Engineering","text":"<p>Given the non-deterministic, probabilistic nature of LLMs, it is advisable to: - Prefer explicit, context-setting conditions (e.g., \"Before you do X, ensure Y\") over absolute or vague modifiers. - Avoid relying solely on words like \"always\" or \"never\" to enforce strict behavior. - Structure prompts to minimize ambiguity and maximize clarity, aligning with the sequential logic that LLMs are most likely to follow reliably.</p> <p>This approach reduces the risk of unexpected results and improves the reliability of LLM outputs.</p>"},{"location":"concepts/prompt-design-style/#conclusion","title":"Conclusion","text":"<p>Whether you're writing documentation, crafting conversational prompts for AI, or giving instructions, placing conditions before actions is an effective way to convey clear, sequential logic. Not only does this habit align with natural linguistic expectations, but it also optimizes your communication for language models trained on human language patterns. In both human communication and AI prompting, condition before action is a foundational principle that promotes understanding and successful outcomes.</p>"},{"location":"drivers/events/","title":"Events","text":"<p>\u2022 text: Plain text (can also be code).  \u2022 inline_data: Inlined bytes data (e.g., binary blobs).  \u2022 file_data: URI-based data (e.g., a file reference).  \u2022 video_metadata: Metadata for a video.  \u2022 code_execution_result: The result of executing code (stdout, stderr, etc.).  \u2022 executable_code: Code generated by the model, meant to be executed.  \u2022 function_call: A predicted function call (name and arguments).  \u2022 function_response: The result/output of a function call.  \u2022 thought: A boolean flag indicating if the part is a \"thought\" from the model.</p>"},{"location":"guides/configuration/","title":"Configuration Guide","text":"<p>Janito can be configured using command-line options, environment variables, or configuration files. This guide shows you how to set up API keys, select providers and models, and adjust other settings.</p>"},{"location":"guides/configuration/#1-command-line-options-recommended-for-most-users","title":"1. Command-Line Options (Recommended for Most Users)","text":"<p>Set API keys, providers, and models directly when running Janito:</p> <pre><code>janito --set-api-key YOUR_API_KEY -p PROVIDER_NAME\njanito --set provider=openai\njanito -p openai -m gpt-3.5-turbo \"Your prompt here\"\n</code></pre> <ul> <li>Use <code>-p PROVIDER_NAME</code> to select a provider.</li> <li>Use <code>-m MODEL_NAME</code> to select a model for the provider.</li> <li>See CLI Options for the full list of flags.</li> </ul>"},{"location":"guides/configuration/#2-using-custom-configuration-files","title":"2. Using Custom Configuration Files","text":"<p>You can use the <code>-c NAME</code> or <code>--config NAME</code> option to load and save configuration from a custom file:</p> <pre><code>janito -c myproject \"Prompt for my project\"\n</code></pre> <p>This will use the config file at: - Windows: <code>C:\\Users\\&lt;YourUser&gt;\\.janito\\configs\\myproject.json</code> - Linux/macOS: <code>/home/&lt;youruser&gt;/.janito/configs/myproject.json</code></p> <p>If the file does not exist, it will be created automatically when you save settings.</p>"},{"location":"guides/configuration/#3-default-configuration-file","title":"3. Default Configuration File","text":"<p>By default, Janito uses a <code>config.json</code> file located in the <code>.janito</code> directory under your home folder for persistent settings.</p> <p>Path:</p> <ul> <li>Windows: <code>C:\\Users\\&lt;YourUser&gt;\\.janito\\config.json</code></li> <li>Linux/macOS: <code>/home/&lt;youruser&gt;/.janito/config.json</code></li> </ul> <p>You can edit this file directly or use Janito CLI commands to update your configuration.</p>"},{"location":"guides/configuration/#viewing-effective-configuration","title":"Viewing Effective Configuration","text":"<p>Show the current configuration with:</p> <pre><code>janito --show-config\n</code></pre> <p>This will display the config file path at the top. If you use <code>-c NAME</code>, this will show the configuration for that custom file and its path.</p>"},{"location":"guides/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"guides/configuration/#disabling-tools","title":"Disabling Tools","text":"<p>You can selectively disable specific tools to customize your workflow or enhance security:</p> <pre><code># Disable a single tool\njanito --set disabled_tools=ask_user\n\n# Disable multiple tools\njanito --set disabled_tools=\"ask_user,python_code_run\"\n\n# Disable shell command execution\njanito --set disabled_tools=\"run_bash_command,run_powershell_command\"\n\n# View disabled tools\njanito --show-config\n</code></pre> <p>See the Disabling Tools Guide for complete details.</p>"},{"location":"guides/configuration/#more-information","title":"More Information","text":"<ul> <li>See CLI Options Reference for all configuration flags.</li> <li>For provider-specific settings, see the Supported Providers &amp; Models page.</li> <li>For troubleshooting, use <code>janito --help</code> or consult the Usage Guide.</li> </ul>"},{"location":"guides/developing/","title":"Developing &amp; Extending Janito","text":"<p>This guide explains how to set up Janito for development and install the latest version from GitHub.</p>"},{"location":"guides/developing/#installing-the-latest-development-version","title":"Installing the Latest Development Version","text":"<p>To install the most recent development version from the GitHub main branch, run:</p> <pre><code>uv pip install git+git@github.com:ikignosis/janito.git@main\n</code></pre>"},{"location":"guides/developing/#editable-install-for-local-development","title":"Editable Install for Local Development","text":"<p>To make code changes and see them reflected immediately (without reinstalling), use an editable install:</p> <pre><code>git clone git@github.com:ikignosis/janito.git\ncd janito\ngit checkout main\nuv pip install -e .\n</code></pre> <p>This installs Janito in \"editable\" mode, so changes to the source code are instantly available in your environment.</p>"},{"location":"guides/developing/#additional-development-setup","title":"Additional Development Setup","text":"<ul> <li>Ensure you are on the correct branch (e.g., <code>main</code>) for the latest development version.</li> <li>For linting, pre-commit hooks, and other developer tools, see the Developer Toolchain Guide in the meta directory.</li> </ul>"},{"location":"guides/disabled-tools/","title":"Disabling Tools Guide","text":"<p>Janito allows you to disable specific tools to customize your workflow or enhance security. This guide explains how to disable and manage tools using configuration settings.</p>"},{"location":"guides/disabled-tools/#overview","title":"Overview","text":"<p>By default, all tools are enabled based on their permission requirements (read, write, execute). However, you can selectively disable individual tools using the <code>disabled_tools</code> configuration setting.</p>"},{"location":"guides/disabled-tools/#setting-disabled-tools","title":"Setting Disabled Tools","text":""},{"location":"guides/disabled-tools/#via-cli","title":"Via CLI","text":"<p>Use the <code>--set</code> command to disable tools:</p> <pre><code># Disable a single tool\njanito --set disabled_tools=ask_user\n\n# Disable multiple tools (comma-separated)\njanito --set disabled_tools=\"ask_user,python_code_run\"\n\n# Clear all disabled tools\njanito --set disabled_tools=\"\"\n</code></pre>"},{"location":"guides/disabled-tools/#via-configuration-file","title":"Via Configuration File","text":"<p>Edit your configuration file (by default <code>~/.janito/config.json</code>, or a custom file if using <code>-c NAME</code> such as <code>~/.janito/configs/NAME.json</code>) and add the <code>disabled_tools</code> key:</p> <pre><code>{\n  \"disabled_tools\": \"ask_user,python_code_run\",\n  \"provider\": \"openai\",\n  \"model\": \"gpt-4.1\"\n}\n</code></pre> <p>If you use <code>-c NAME</code>, the disabled tools will be saved and loaded from that custom config file.</p>"},{"location":"guides/disabled-tools/#viewing-disabled-tools","title":"Viewing Disabled Tools","text":"<p>Check which tools are currently disabled:</p> <pre><code>janito --show-config\n</code></pre> <p>This will display the config file path and a section showing your disabled tools, for example:</p> <pre><code>Config file: /home/youruser/.janito/config.json\nDisabled tools: ask_user, python_code_run\n</code></pre>"},{"location":"guides/disabled-tools/#listing-available-tools","title":"Listing Available Tools","text":"<p>To see which tools are currently available (excluding disabled ones):</p> <pre><code>janito --list-tools\n</code></pre> <p>Disabled tools will not appear in the tool listing.</p>"},{"location":"guides/disabled-tools/#common-use-cases","title":"Common Use Cases","text":""},{"location":"guides/disabled-tools/#security-enhancement","title":"Security Enhancement","text":"<p>Disable potentially dangerous tools in production environments:</p> <pre><code>janito --set disabled_tools=\"python_code_run,run_powershell_command,run_bash_command\"\n</code></pre>"},{"location":"guides/disabled-tools/#workflow-customization","title":"Workflow Customization","text":"<p>Disable tools you don't use to reduce clutter:</p> <pre><code>janito --set disabled_tools=\"open_url,open_html_in_browser\"\n</code></pre>"},{"location":"guides/disabled-tools/#session-based-disabling","title":"Session-Based Disabling","text":"<p>Disable tools for specific sessions:</p> <pre><code>janito --set disabled_tools=ask_user \"Generate code without user interaction\"\n</code></pre>"},{"location":"guides/disabled-tools/#tool-names","title":"Tool Names","text":"<p>Use the exact tool names as shown in <code>janito --list-tools</code>. Common tool names include:</p> <ul> <li><code>ask_user</code> - Interactive user prompts</li> <li><code>python_code_run</code> - Execute Python code</li> <li><code>run_powershell_command</code> - Execute PowerShell commands</li> <li><code>run_bash_command</code> - Execute bash commands</li> <li><code>create_file</code> - Create new files</li> <li><code>remove_file</code> - Delete files</li> <li><code>open_url</code> - Open URLs in browser</li> <li>And many more...</li> </ul>"},{"location":"guides/disabled-tools/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Test Before Disabling: Always test your workflow after disabling tools to ensure essential functionality isn't broken.</p> </li> <li> <p>Document Changes: Keep track of which tools you've disabled and why.</p> </li> <li> <p>Use Sparingly: Only disable tools that pose security risks or aren't needed for your specific use case.</p> </li> <li> <p>Review Regularly: Periodically review your disabled tools list to ensure it still meets your needs.</p> </li> </ol>"},{"location":"guides/disabled-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/disabled-tools/#tool-still-appears-available","title":"Tool Still Appears Available","text":"<ul> <li>Ensure you're using the exact tool name (case-sensitive)</li> <li>Check that the configuration was saved: <code>janito --show-config</code></li> <li>Restart your terminal session if needed</li> </ul>"},{"location":"guides/disabled-tools/#accidentally-disabled-essential-tools","title":"Accidentally Disabled Essential Tools","text":"<ul> <li>Clear all disabled tools: <code>janito --set disabled_tools=\"\"</code></li> <li>Or selectively re-enable by removing from the comma-separated list</li> </ul>"},{"location":"guides/disabled-tools/#configuration-not-persisting","title":"Configuration Not Persisting","text":"<ul> <li>Verify the config file path: <code>janito --show-config</code> shows the config file location at the top (if using <code>-c NAME</code>, it will show the custom config file)</li> <li>Check file permissions for your config file</li> <li>Ensure no syntax errors in the JSON configuration</li> </ul>"},{"location":"guides/installation/","title":"Installation Guide","text":"<p>This guide explains how to install Janito and verify your setup.</p>"},{"location":"guides/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or newer</li> <li>Terminal: Windows Terminal (primary supported), PowerShell, Command Prompt, or any Unicode-capable terminal emulator</li> <li>Shell Support: Bash (for <code>run_bash_command</code> tool) and/or PowerShell (for <code>run_powershell_command</code> tool) depending on your platform and intended usage</li> </ul>"},{"location":"guides/installation/#installation-methods","title":"Installation Methods","text":"<p>You can install Janito using pip from either PyPI (for stable releases) or directly from GitHub (for the latest development version).</p>"},{"location":"guides/installation/#from-pypi-stable","title":"From PyPI (Stable)","text":"<pre><code>uv pip install janito\n</code></pre>"},{"location":"guides/installation/#from-github-development-version","title":"From GitHub (Development Version)","text":"<pre><code>uv pip install git+git@github.com:ikignosis/janito.git\n</code></pre> <p>For development setup and contributing, see Developing &amp; Extending.</p>"},{"location":"guides/installation/#verifying-your-installation","title":"Verifying Your Installation","text":"<p>To confirm Janito is installed correctly, run:</p> <pre><code>janito --help\n</code></pre> <p>You should see the Janito CLI help message.</p>"},{"location":"guides/installation/#related-guides","title":"Related Guides","text":"<ul> <li>Configuration Guide</li> <li>Usage Guide</li> <li>Developing &amp; Extending</li> </ul>"},{"location":"guides/market-data-sources/","title":"Market Data Sources Guide","text":"<p>This guide provides information about reliable sources for accessing financial market data and stock information.</p>"},{"location":"guides/market-data-sources/#reliable-market-data-sources","title":"Reliable Market Data Sources","text":""},{"location":"guides/market-data-sources/#government-regulatory-sources","title":"Government &amp; Regulatory Sources","text":"Source URL Data Type Access Method Notes SEC EDGAR https://www.sec.gov/edgar/searchedgar/companysearch.html Company filings, 10-K, 10-Q, 8-K reports Web scraping + official API Official financial statements, insider trading reports Federal Reserve FRED https://fred.stlouisfed.org/ Economic indicators, interest rates, market indices Free API with registration Comprehensive economic and market data"},{"location":"guides/market-data-sources/#public-financial-data-sources","title":"Public Financial Data Sources","text":"Source URL Data Type Access Method Coverage TradingView https://www.tradingview.com/markets/ Real-time quotes, charts, technical analysis Web scraping friendly Global markets with proper user-agent Investing.com https://www.investing.com/indices/ Global indices, commodities, currencies, stocks Web scraping International markets and real-time data Yahoo Finance https://finance.yahoo.com/ Stock prices, historical data Limited access May have restrictions, use alternatives"},{"location":"guides/market-data-sources/#financial-apis-with-free-tiers","title":"Financial APIs with Free Tiers","text":"API Provider URL Free Tier Limits Data Types Rate Limits Alpha Vantage https://www.alphavantage.co/ 5 calls/min, 500/day Stocks, forex, crypto, historical 5 API calls per minute Financial Modeling Prep https://financialmodelingprep.com/developer/docs/ Limited daily calls Financial statements, ratios, prices Daily quota system Twelve Data https://twelvedata.com/ 8 calls/minute Stocks, forex, crypto, real-time 8 API calls per minute"},{"location":"guides/market-data-sources/#working-with-market-data-in-janito","title":"Working with Market Data in Janito","text":""},{"location":"guides/market-data-sources/#security-configuration","title":"Security Configuration","text":"<p>Before accessing market data, configure trusted sources using the <code>/security</code> command:</p> <pre><code>/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n/security allowed-sites add alphavantage.co\n/security allowed-sites add financialmodelingprep.com\n/security allowed-sites add twelvedata.com\n\n# Verify configuration\n/security allowed-sites list\n</code></pre>"},{"location":"guides/market-data-sources/#quick-stock-price-check","title":"Quick Stock Price Check","text":"<pre><code># Get current Apple stock information\nFetch Apple's current stock price and key metrics from tradingview.com\n\n# Get market indices overview\nRetrieve current S&amp;P 500, Dow Jones, and Nasdaq values from investing.com\n</code></pre>"},{"location":"guides/market-data-sources/#historical-data-access","title":"Historical Data Access","text":"<pre><code># Get historical price data\nFind historical stock price data for Apple from FRED database\n\n# Access SEC filings\nDownload Apple's latest 10-K filing from SEC EDGAR\n</code></pre>"},{"location":"guides/market-data-sources/#economic-indicators","title":"Economic Indicators","text":"<pre><code># Get Federal Reserve data\nFetch current federal funds rate and economic indicators from FRED\n\n# Market analysis\nAnalyze current market conditions using available public data sources\n</code></pre>"},{"location":"guides/market-data-sources/#data-source-reliability","title":"Data Source Reliability","text":"Tier Sources Reliability Access Notes Tier 1 SEC, FRED, Census Bureau, Official APIs Most Reliable Government sources with documented endpoints Tier 2 TradingView, Investing.com, Alpha Vantage Reliable with Limitations Good for current data, web scraping friendly, free tier limits Tier 3 Yahoo Finance, Bloomberg, Reuters Use with Caution Access restrictions, typically blocked for automated access"},{"location":"guides/market-data-sources/#best-practices","title":"Best Practices","text":""},{"location":"guides/market-data-sources/#data-collection-best-practices","title":"Data Collection Best Practices","text":"Practice Description Implementation Official APIs Use provided APIs when available Check developer documentation for endpoints Rate Limiting Implement delays to avoid blocks Add sleep timers between requests Data Caching Store frequently accessed data locally Use local files or databases for storage Cross-Reference Verify data from multiple sources Compare results across different providers Terms Compliance Respect robots.txt and service terms Review and follow usage guidelines"},{"location":"guides/market-data-sources/#error-handling","title":"Error Handling","text":"<pre><code># Handle blocked access gracefully\njanito \"If tradingview.com is blocked, try investing.com for Apple stock data\"\n\n# Fallback sources\njanito \"Get Apple's financial data from SEC filings if market data sources are unavailable\"\n</code></pre>"},{"location":"guides/market-data-sources/#integration-examples","title":"Integration Examples","text":""},{"location":"guides/market-data-sources/#portfolio-tracking","title":"Portfolio Tracking","text":"<pre><code># Track multiple stocks\nMonitor AAPL, MSFT, GOOGL, and TSLA using available public sources\n\n# Market overview\nGenerate a daily market summary using government and public data sources\n</code></pre>"},{"location":"guides/market-data-sources/#economic-analysis","title":"Economic Analysis","text":"<pre><code># Economic indicators\nAnalyze the relationship between Federal Reserve data and market performance\n\n# Sector analysis\nCompare technology sector performance using SEC filings and market data\n</code></pre>"},{"location":"guides/market-data-sources/#security-configuration_1","title":"Security Configuration","text":"<p>For enhanced security, use the <code>/security</code> command in chat mode to restrict access to trusted sources:</p> <ul> <li>Security Commands Guide - Manage allowed sites for fetch_url</li> <li>URL Whitelist Guide - Detailed whitelist configuration</li> </ul>"},{"location":"guides/market-data-sources/#related-documentation","title":"Related Documentation","text":"<ul> <li>Stock Market Guide - Comprehensive guide to accessing financial data</li> <li>Public Sources - Government and institutional data sources</li> <li>Using Tools - How to use Janito's data fetching capabilities</li> <li>CLI Options - Command-line options for data access</li> </ul>"},{"location":"guides/market-data-sources/#getting-help","title":"Getting Help","text":"<p>For assistance with market data access:</p> <ol> <li>Configure trusted sources with <code>/security allowed-sites add &lt;site&gt;</code></li> <li>Use <code>/security allowed-sites list</code> to verify configuration</li> <li>Check the troubleshooting section</li> <li>Open GitHub issues for specific data source requests</li> </ol>"},{"location":"guides/profiles/","title":"Using Profiles in Janito","text":"<p>Janito supports both general-purpose and specialized workflows through the use of profiles. Profiles allow you to tailor the assistant's behavior, system prompt, and capabilities for different roles or tasks, such as software development, writing, data analysis, or any custom workflow you define.</p>"},{"location":"guides/profiles/#what-is-a-profile","title":"What is a Profile?","text":"<p>A profile in Janito is a named configuration that determines the system prompt and context for the agent. By selecting a profile, you can: - Switch between general-purpose and specialized assistance - Load a role-specific system prompt template - Enable context, tools, or behaviors suited to a particular workflow (e.g., \"developer\", \"writer\", \"analyst\")</p>"},{"location":"guides/profiles/#why-use-profiles","title":"Why Use Profiles?","text":"<ul> <li>General-purpose assistant: Omit the <code>--profile</code> option to use Janito as a flexible, all-purpose AI assistant.</li> <li>Specialized workflows: Use <code>--profile &lt;name&gt;</code> to activate a profile designed for a specific role or domain, improving relevance and productivity.</li> <li>Custom roles: Create your own profiles by adding prompt templates in the <code>janito/agent/templates/profiles/</code> directory.</li> </ul>"},{"location":"guides/profiles/#how-to-use-profiles","title":"How to Use Profiles","text":""},{"location":"guides/profiles/#selecting-a-profile","title":"Selecting a Profile","text":"<p>You can select a profile at launch using the <code>--profile</code> option:</p> <pre><code>janito --profile developer \"Refactor this code for better readability.\"\njanito --profile writer \"Draft a blog post about AI in healthcare.\"\n</code></pre> <p>If you omit <code>--profile</code>, Janito uses the default (general-purpose) behavior.</p>"},{"location":"guides/profiles/#listing-and-customizing-profiles","title":"Listing and Customizing Profiles","text":"<ul> <li>To see available profiles, check the <code>janito/agent/templates/profiles/</code> directory or refer to the documentation.</li> <li>Each profile corresponds to a Jinja2 template file named <code>system_prompt_template_&lt;profile&gt;.txt.j2</code>.</li> <li>You can create new profiles by adding new template files in this directory.</li> </ul>"},{"location":"guides/profiles/#interactive-profile-selection","title":"Interactive Profile Selection","text":"<p>In interactive chat mode, you can select or switch profiles using the <code>/profile</code> command:</p> <pre><code>/profile\n</code></pre> <p>This will show the current and available profiles, and may prompt you to select one interactively.</p>"},{"location":"guides/profiles/#example-creating-a-custom-profile","title":"Example: Creating a Custom Profile","text":"<ol> <li>Create a new file in <code>janito/agent/templates/profiles/</code> named <code>system_prompt_template_dataanalyst.txt.j2</code>:</li> </ol> <pre><code>You are a data analyst. Answer questions with a focus on data-driven reasoning and clear explanations.\n</code></pre> <ol> <li>Launch Janito with your new profile:</li> </ol> <pre><code>janito --profile dataanalyst \"Analyze this sales dataset and summarize key trends.\"\n</code></pre>"},{"location":"guides/profiles/#profile-precedence-and-system-prompt","title":"Profile Precedence and System Prompt","text":"<ul> <li>If you specify both <code>--profile</code> and <code>--system</code>, the explicit system prompt may override the profile template.</li> <li>Profiles are the recommended way to manage reusable, role-specific system prompts.</li> </ul>"},{"location":"guides/profiles/#best-practices","title":"Best Practices","text":"<ul> <li>Use profiles for repeatable workflows or when you want consistent behavior for a given role.</li> <li>Keep your profile templates concise and focused on the desired behavior or domain.</li> <li>Review and update your profiles as your needs evolve.</li> </ul>"},{"location":"guides/profiles/#further-reading","title":"Further Reading","text":"<ul> <li>Prompt Design Style: Condition Before Action</li> <li>Terminal Shell Guide</li> <li>CLI Options Reference</li> </ul> <p>Profiles make Janito adaptable for both general and specialized tasks. Leverage them to get the most out of your AI assistant!</p>"},{"location":"guides/releasing/","title":"Releasing Janito","text":"<p>This guide explains the release process for Janito, including how to create new releases and what the automated release script does.</p>"},{"location":"guides/releasing/#prerequisites","title":"Prerequisites","text":"<p>Before you can create a release, you need to:</p> <ol> <li> <p>Set up a GitHub Personal Access Token (PAT):</p> </li> <li> <p>Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens</p> </li> <li>Generate a new token with <code>repo</code> scope</li> <li> <p>Store it securely</p> </li> <li> <p>Set the GITHUB_TOKEN environment variable:    <code>bash    export GITHUB_TOKEN=\"your-token-here\"</code></p> </li> <li> <p>Install required Python packages:    <code>bash    pip install requests twine build</code></p> </li> </ol>"},{"location":"guides/releasing/#release-process","title":"Release Process","text":"<p>The release process is automated through the <code>tools/release.py</code> script. Here's how it works:</p>"},{"location":"guides/releasing/#1-create-a-git-tag","title":"1. Create a Git Tag","text":"<p>First, create a new git tag following semantic versioning (vX.Y.Z):</p> <pre><code># Check current latest tag\ngit tag -l \"v*\" --sort=-v:refname | head -n 1\n\n# Create new tag (increment patch version)\ngit tag vX.Y.Z\n\n# Push the tag to remote\ngit push origin vX.Y.Z\n</code></pre>"},{"location":"guides/releasing/#2-run-the-release-script","title":"2. Run the Release Script","text":"<p>Execute the release script:</p> <pre><code>python tools/release.py\n</code></pre> <p>The script will:</p> <ul> <li>Verify you have the required tools installed</li> <li>Check that there are no uncommitted changes</li> <li>Get the version from the latest git tag</li> <li>Verify the tag points to the current commit</li> <li>Build the package</li> <li>Upload to PyPI</li> <li>Create a GitHub release</li> </ul>"},{"location":"guides/releasing/#3-what-the-github-release-includes","title":"3. What the GitHub Release Includes","text":"<p>The automated GitHub release will:</p> <ul> <li>Use the tag name as the release title</li> <li>Include a basic changelog message linking to CHANGELOG.md</li> <li>Be marked as a production release (not draft or prerelease)</li> </ul>"},{"location":"guides/releasing/#build-only-mode","title":"Build Only Mode","text":"<p>If you want to build the package without uploading it, use:</p> <pre><code>python tools/release.py --build-only\n</code></pre> <p>This is useful for testing the build process locally.</p>"},{"location":"guides/releasing/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ul> <li>GITHUB_TOKEN not set: Make sure you've exported the environment variable</li> <li>Tag doesn't point to current commit: Make sure you're on the correct commit before tagging</li> <li>Version already exists on PyPI: Increment the version number in your tag</li> <li>Uncommitted changes: Commit or stash your changes before releasing</li> </ul>"},{"location":"guides/security-commands/","title":"Security Commands Guide","text":"<p>This guide explains how to use the <code>/security</code> command in chat mode to manage security settings, particularly for restricting the <code>fetch_url</code> tool to trusted domains.</p>"},{"location":"guides/security-commands/#overview","title":"Overview","text":"<p>The <code>/security</code> command provides a centralized way to manage security settings in chat mode. Currently, it supports managing allowed sites for the <code>fetch_url</code> tool, which is particularly useful for market analysts who should only access trusted financial data sources.</p>"},{"location":"guides/security-commands/#security-command-structure","title":"Security Command Structure","text":"<pre><code>/security &lt;subcommand&gt; [arguments...]\n</code></pre>"},{"location":"guides/security-commands/#available-subcommands","title":"Available Subcommands","text":"<ul> <li><code>allowed-sites</code> - Manage the URL whitelist for fetch_url tool</li> </ul>"},{"location":"guides/security-commands/#allowed-sites-management","title":"Allowed Sites Management","text":"<p>The <code>/security allowed-sites</code> subcommand allows you to control which websites the <code>fetch_url</code> tool can access.</p>"},{"location":"guides/security-commands/#commands","title":"Commands","text":"<pre><code>/security allowed-sites list                    # Show all allowed sites\n/security allowed-sites add &lt;site&gt;             # Add a site to whitelist\n/security allowed-sites remove &lt;site&gt;          # Remove a site from whitelist\n/security allowed-sites clear                  # Clear all restrictions\n</code></pre>"},{"location":"guides/security-commands/#quick-start-for-market-analysts","title":"Quick Start for Market Analysts","text":""},{"location":"guides/security-commands/#step-1-configure-trusted-market-data-sources","title":"Step 1: Configure Trusted Market Data Sources","text":"<pre><code>/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n/security allowed-sites add alphavantage.co\n/security allowed-sites add financialmodelingprep.com\n/security allowed-sites add twelvedata.com\n</code></pre>"},{"location":"guides/security-commands/#step-2-verify-configuration","title":"Step 2: Verify Configuration","text":"<pre><code>/security allowed-sites list\n</code></pre>"},{"location":"guides/security-commands/#step-3-test-with-market-analysis","title":"Step 3: Test with Market Analysis","text":"<pre><code>Fetch Apple's current stock price from tradingview.com\n</code></pre>"},{"location":"guides/security-commands/#market-data-sources","title":"Market Data Sources","text":""},{"location":"guides/security-commands/#tier-1-government-official-sources","title":"Tier 1: Government &amp; Official Sources","text":"<ul> <li>sec.gov - SEC EDGAR filings and company reports</li> <li>fred.stlouisfed.org - Federal Reserve economic data</li> </ul>"},{"location":"guides/security-commands/#tier-2-public-financial-data","title":"Tier 2: Public Financial Data","text":"<ul> <li>tradingview.com - Real-time quotes and charts</li> <li>investing.com - Global indices and market data</li> <li>yahoo.com - Stock prices and historical data (use with caution)</li> </ul>"},{"location":"guides/security-commands/#tier-3-financial-apis","title":"Tier 3: Financial APIs","text":"<ul> <li>alphavantage.co - Free tier API for stocks and forex</li> <li>financialmodelingprep.com - Financial statements and ratios</li> <li>twelvedata.com - Real-time and historical data</li> </ul>"},{"location":"guides/security-commands/#usage-examples","title":"Usage Examples","text":""},{"location":"guides/security-commands/#adding-sites","title":"Adding Sites","text":"<pre><code># Add a single trusted source\n/security allowed-sites add sec.gov\n\n# Add multiple sources one by one\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n/security allowed-sites add alphavantage.co\n</code></pre>"},{"location":"guides/security-commands/#removing-sites","title":"Removing Sites","text":"<pre><code># Remove a specific site\n/security allowed-sites remove yahoo.com\n\n# Verify removal\n/security allowed-sites list\n</code></pre>"},{"location":"guides/security-commands/#managing-restrictions","title":"Managing Restrictions","text":"<pre><code># List current restrictions\n/security allowed-sites list\n\n# Allow all sites for testing\n/security allowed-sites clear\n\n# Re-establish restrictions\n/security allowed-sites add sec.gov\n/security allowed-sites add tradingview.com\n</code></pre>"},{"location":"guides/security-commands/#best-practices","title":"Best Practices","text":""},{"location":"guides/security-commands/#for-market-analysts","title":"For Market Analysts","text":"<ol> <li>Start with Tier 1 sources: Begin with government sources for reliability</li> <li>Add Tier 2 gradually: Include public sources as needed</li> <li>Document changes: Keep track of which sites are added/removed</li> <li>Regular review: Periodically review the whitelist for relevance</li> </ol>"},{"location":"guides/security-commands/#security-guidelines","title":"Security Guidelines","text":"<ol> <li>Principle of least privilege: Only add sites you actually need</li> <li>Domain specificity: Use specific domains rather than wildcards</li> <li>Regular audits: Review the whitelist regularly</li> <li>Backup configuration: Save your whitelist configuration</li> </ol>"},{"location":"guides/security-commands/#configuration-persistence","title":"Configuration Persistence","text":"<p>The whitelist configuration is stored in <code>~/.janito/url_whitelist.json</code> and persists across sessions:</p> <pre><code>{\n  \"allowed_sites\": [\n    \"sec.gov\",\n    \"fred.stlouisfed.org\",\n    \"tradingview.com\",\n    \"investing.com\"\n  ]\n}\n</code></pre>"},{"location":"guides/security-commands/#integration-with-profiles","title":"Integration with Profiles","text":"<p>When using the Market Analyst profile, you can pre-configure trusted sources:</p> <pre><code># Set up security before using market analyst\n/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n\n# Then use market analyst profile\n/profile market-analyst\nAnalyze Apple's financial performance\n</code></pre>"},{"location":"guides/security-commands/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/security-commands/#common-issues","title":"Common Issues","text":"<p>Problem: <code>fetch_url</code> returns \"URL blocked by whitelist\"</p> <pre><code># Check current whitelist\n/security allowed-sites list\n\n# Add the missing site\n/security allowed-sites add missing-site.com\n</code></pre> <p>Problem: Need to allow subdomains</p> <pre><code># The whitelist automatically includes subdomains\n# Adding \"tradingview.com\" also allows \"www.tradingview.com\", \"api.tradingview.com\", etc.\n</code></pre> <p>Problem: Want to disable whitelist temporarily</p> <pre><code># Clear all restrictions\n/security allowed-sites clear\n\n# Restore later by adding sites back\n/security allowed-sites add sec.gov\n/security allowed-sites add tradingview.com\n</code></pre>"},{"location":"guides/security-commands/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/security-commands/#batch-configuration","title":"Batch Configuration","text":"<pre><code># Configure comprehensive market sources\n/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n/security allowed-sites add alphavantage.co\n/security allowed-sites add financialmodelingprep.com\n/security allowed-sites add twelvedata.com\n</code></pre>"},{"location":"guides/security-commands/#team-configuration-sharing","title":"Team Configuration Sharing","text":"<pre><code># Share configuration with team\n/security allowed-sites list\n# Copy the output and share with team members\n\n# Team members can then configure their instances\n/security allowed-sites add sec.gov\n/security allowed-sites add tradingview.com\n# ... etc\n</code></pre>"},{"location":"guides/security-commands/#related-documentation","title":"Related Documentation","text":"<ul> <li>Market Data Sources Guide - Comprehensive list of reliable sources</li> <li>URL Whitelist Guide - Detailed whitelist configuration</li> <li>Using Tools - General tool usage documentation</li> <li>CLI Options - Complete CLI reference</li> </ul>"},{"location":"guides/single-shot-terminal/","title":"\u26a1 One-Shot Terminal","text":"<p>If you want to run a single command or prompt in the terminal shell without entering interactive mode, you can use the \"one-shot\" feature. This is useful for quick tasks or scripting.</p> <p>To use one-shot mode, simply provide your prompt as a command-line argument:</p> <pre><code>janito \"what are the key classes of this project?\"\n</code></pre> <p>Janito will process your request and exit after displaying the result.</p>"},{"location":"guides/single-shot-terminal/#model-and-provider-selection","title":"Model and Provider Selection","text":"<p>You can specify which model and provider to use for your one-shot command:</p> <pre><code># Traditional approach\njanito -p openai -m gpt-4 \"what are the key classes of this project?\"\n\n# Shorthand syntax (model@provider)\njanito -m gpt-4@openai \"what are the key classes of this project?\"\n\n# Using a different provider\njanito -m claude-3-5-sonnet-20241022@anthropic \"analyze this codebase\"\n</code></pre>"},{"location":"guides/single-shot-terminal/#shell-command-execution","title":"Shell Command Execution","text":"<p>Janito supports executing shell commands in one-shot mode using the built-in <code>run_bash_command</code> and <code>run_powershell_command</code> tools:</p> <pre><code># Execute a bash command\njanito \"run_bash_command('ls -la')\"\n\n# Execute a PowerShell command  \njanito \"run_powershell_command('Get-Process | Select-Object Name, CPU')\"\n</code></pre>"},{"location":"guides/single-shot-terminal/#quick-permission-setup","title":"Quick Permission Setup","text":"<p>For one-shot mode, you can quickly enable all tool permissions using the <code>/rwx</code> prefix:</p> <pre><code># Enable read, write, and execute permissions\njanito /rwx \"create a python script and run it\"\n\n# Or use individual flags\njanito -r -w -x \"create a python script and run it\"\n</code></pre> <p>\u26a0\ufe0f Warning: Some models may not complete all required steps in a single-shot (one-off) run. If the model does not act as expected, try appending \"; just do it\" to your command-line prompt to encourage direct action.</p> <p></p> <p>generated by janito.dev</p>"},{"location":"guides/stock-market-guide/","title":"Stock Market Data Access Guide","text":"<p>This guide explains how to access and work with stock market data using Janito's built-in tools and external resources.</p>"},{"location":"guides/stock-market-guide/#overview","title":"Overview","text":"<p>While Janito doesn't include built-in stock market APIs, you can use its web scraping and data processing capabilities to gather financial information from public sources. This guide covers reliable approaches to access market data.</p>"},{"location":"guides/stock-market-guide/#current-market-data-sources","title":"Current Market Data Sources","text":"Source Type Platform URL Data Available Access Method Government SEC EDGAR https://www.sec.gov/edgar/searchedgar/companysearch.html Company filings, 10-K, 10-Q reports Web scraping + official API Government Federal Reserve FRED https://fred.stlouisfed.org/ Economic indicators, market data Free API with registration Public TradingView https://www.tradingview.com/markets/ Real-time quotes, charts, analysis Web scraping friendly Public Investing.com https://www.investing.com/indices/ Global indices, commodities, stocks Web scraping <p>Note: Many major financial sites (Yahoo Finance, Bloomberg, MarketWatch) have implemented strict anti-bot measures that may block automated access.</p>"},{"location":"guides/stock-market-guide/#recommended-approach","title":"Recommended Approach","text":"<ol> <li> <p>Use TradingView for current market data <code>bash    janito \"Fetch Apple's current stock information from tradingview.com\"</code></p> </li> <li> <p>Access SEC filings for fundamental data <code>bash    janito \"Get the latest 10-K filing for Apple Inc from SEC EDGAR\"</code></p> </li> <li> <p>Use Federal Reserve data for economic indicators <code>bash    janito \"Fetch current S&amp;P 500 data from FRED API\"</code></p> </li> </ol>"},{"location":"guides/stock-market-guide/#working-with-stock-data","title":"Working with Stock Data","text":""},{"location":"guides/stock-market-guide/#basic-stock-information","title":"Basic Stock Information","text":"<p>To get basic stock information, you can use:</p> <pre><code># Get Apple's current trading information\njanito \"Visit https://www.tradingview.com/symbols/NASDAQ-AAPL/ and extract key metrics\"\n\n# Get market indices\njanito \"Fetch current S&amp;P 500, Dow Jones, and Nasdaq values from investing.com\"\n</code></pre>"},{"location":"guides/stock-market-guide/#historical-data","title":"Historical Data","text":"<p>For historical data, use:</p> <pre><code># Get historical price data\njanito \"Find Apple's stock price history for the last 30 days from a reliable source\"\n\n# Access SEC filings for quarterly reports\njanito \"Download Apple's latest quarterly report from SEC EDGAR\"\n</code></pre>"},{"location":"guides/stock-market-guide/#alternative-data-sources","title":"Alternative Data Sources","text":"Source Category Provider Data Types Access Method Key Features Government SEC EDGAR Company filings, 10-K, 10-Q reports Web + API Official financial statements Government Federal Reserve Economic indicators, interest rates API + Web Monetary policy data Government Bureau of Labor Statistics Employment data API + Downloads Labor market indicators Government Treasury Department Bond yields, economic data API + Reports Treasury rates and auctions API Provider Free Tier Limits Data Types Registration Required Rate Limits Alpha Vantage 5 calls/min, 500/day Stocks, forex, crypto Yes - API key 5 API calls per minute Financial Modeling Prep Limited daily calls Financial statements, ratios Yes - API key Daily quota system Twelve Data 8 calls/minute Real-time and historical Yes - API key 8 API calls per minute"},{"location":"guides/stock-market-guide/#example-workflows","title":"Example Workflows","text":""},{"location":"guides/stock-market-guide/#quick-stock-check","title":"Quick Stock Check","text":"<pre><code># Check current Apple stock price\njanito \"What is Apple's current stock price and recent performance?\"\n\n# Get market overview\njanito \"Show me today's market summary including major indices\"\n</code></pre>"},{"location":"guides/stock-market-guide/#detailed-analysis","title":"Detailed Analysis","text":"<pre><code># Comprehensive stock analysis\njanito \"Analyze Apple's financial performance using latest SEC filings and market data\"\n\n# Compare multiple stocks\njanito \"Compare performance of AAPL, MSFT, GOOGL, and TSLA over the past month\"\n</code></pre>"},{"location":"guides/stock-market-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/stock-market-guide/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":"Issue Description Solution Blocked Access Many financial sites block automated requests Use public APIs or government sources Rate Limiting Free APIs have usage limits Implement caching or use multiple sources Data Accuracy Ensure reliable data sources Cross-reference multiple sources"},{"location":"guides/stock-market-guide/#best-practices","title":"Best Practices","text":"Practice Description Implementation Source Verification Always verify data from multiple sources Compare results across different providers Government Sources Use official sources for regulatory filings SEC EDGAR for company filings Rate Limiting Implement delays to avoid blocks Add sleep timers between requests Data Caching Cache frequently accessed data locally Use local files or databases for storage"},{"location":"guides/stock-market-guide/#related-documentation","title":"Related Documentation","text":"<ul> <li>Public Data Sources - Government and public financial data</li> <li>Using Tools - How to use Janito's web scraping capabilities</li> <li>CLI Options - Command-line options for data fetching</li> </ul>"},{"location":"guides/stock-market-guide/#getting-help","title":"Getting Help","text":"<p>If you need help accessing specific financial data:</p> <ol> <li>Check the troubleshooting section for common issues</li> <li>Use <code>janito --help</code> to see available options</li> <li>Open an issue on GitHub for specific data access requests</li> </ol>"},{"location":"guides/terminal-shell/","title":"\ud83d\udda5\ufe0f Terminal Shell (Interactive Mode)","text":"<p>The interactive shell lets you have a continuous conversation with Janito, just like chatting with a smart assistant. This mode is ideal for deep dives, brainstorming, or when you want to iteratively refine your requests.</p>"},{"location":"guides/terminal-shell/#terminal-compatibility","title":"Terminal Compatibility","text":"<p>Janito works best with modern Unicode-capable terminals. Windows Terminal is the primary supported terminal and provides the optimal experience with full Unicode support, rich colors, and proper styling. The shell mode is also compatible with other terminals including PowerShell, Command Prompt, macOS Terminal, iTerm2, and various Linux terminals.</p>"},{"location":"guides/terminal-shell/#shell-command-support","title":"Shell Command Support","text":"<p>Janito includes built-in support for executing shell commands across platforms:</p> <ul> <li>Bash commands (<code>run_bash_command</code>) - Execute bash shell commands on Linux, macOS, and Windows (via WSL/Git Bash)</li> <li>PowerShell commands (<code>run_powershell_command</code>) - Execute PowerShell commands on Windows and cross-platform (requires PowerShell Core)</li> </ul> <p>These tools can be enabled/disabled via configuration and provide live output streaming, timeout handling, and security controls.</p>"},{"location":"guides/terminal-shell/#features","title":"\u2728 Features","text":"<ul> <li>\ud83d\udd04 Multi-turn conversations: Build on previous answers and context</li> <li>\u2b06\ufe0f\u2b07\ufe0f Command history: Use the up/down arrows to revisit previous prompts</li> <li>\ud83c\udfa8 Syntax highlighting for code responses</li> <li>\ud83d\udccb Copy code snippets easily</li> <li>\ud83d\udca1 Context-aware suggestions (where supported)</li> <li>\ud83d\udcbe Conversation state is saved/restored between sessions</li> </ul>"},{"location":"guides/terminal-shell/#built-in-commands","title":"\ud83d\udcdd Built-in Commands","text":"<p>You can use these commands at any time (prefix with <code>/</code> or just type the name):</p> <p>Tip: Use <code>/exec on</code> to enable code/shell execution tools at runtime. Use <code>/tools</code> to see which tools are currently enabled or disabled.</p> Command Description <code>/exit</code>, <code>exit</code> Exit chat mode <code>/restart</code> Restart the CLI <code>/help</code> Show help message with available commands <code>/continue</code> Restore last saved conversation <code>/history [N]</code> Show input history for this session (default: last 5 entries) <code>/prompt</code> Show the current system prompt <code>/role &lt;description&gt;</code> Change the system role (e.g., \"You are a code reviewer\") <code>/lang &lt;code&gt;</code> Change the interface language (e.g., <code>/lang pt</code>, <code>/lang en</code>) <code>/clear</code> Clear the terminal screen <code>/multi</code> Enter multiline input mode (write multi-line text, Esc+Enter) <code>--multi</code> (CLI arg) Start chat mode with multiline input as default (no need for /multi) <code>/config</code> Show or set configuration (see: <code>/config show</code>, <code>/config set local|global key=value</code>) <code>/edit &lt;filename&gt;</code> Open a file in the browser-based editor <code>/view</code> Print the current LLM conversation history <code>/profile</code> Show the current and available Agent Profile <code>/execute [on|off] | /read [on|off] | /write [on|off]</code> Enable or disable code/shell execution tools at runtime <code>/tools</code> List all registered tools and show which are enabled/disabled"},{"location":"guides/terminal-shell/#usage-example","title":"\ud83d\udcbb Usage Example","text":""},{"location":"guides/terminal-shell/#enabling-execution-tools","title":"Enabling Execution Tools","text":"<p>By default, tools that can execute code or shell commands are disabled for safety. To enable these tools (such as code execution, shell commands, etc.), use the <code>/execute on</code> command at any time in the shell:</p> <pre><code>/execute on\n</code></pre> <p>To disable execution tools again, use:</p> <pre><code>/execute off\n</code></pre> <p>You can also control read and write permissions for tools:</p> <ul> <li>To enable reading: <code>/read on</code></li> <li>To disable reading: <code>/read off</code></li> <li>To enable writing: <code>/write on</code></li> <li>To disable writing: <code>/write off</code></li> </ul> <p>Use <code>/tools</code> to see which tools are currently enabled or disabled.</p> <pre><code>janito\n</code></pre> <p>You\u2019ll be dropped into a conversational prompt where you can interact with Janito step by step. Type <code>/help</code> to see available commands at any time. Use <code>/restart</code> to start a new task or reset context.</p> <p></p> <p>Screenshot: Janito interactive shell in action</p> <p>generated by janito.dev</p>"},{"location":"guides/tools-developer-guide/","title":"Tools Developer Guide","text":"<p>This guide explains how to add a new tool (functionality) to Janito so it can be used by the agent and OpenAI-compatible APIs.</p> <p>For a list of all built-in tools and their usage, see the Tools Reference. For a technical overview, see the Architecture Guide in the documentation navigation.</p>"},{"location":"guides/tools-developer-guide/#requirements","title":"Requirements","text":"<ul> <li>Class-based tools: Implement tools as classes inheriting from <code>ToolBase</code> (see <code>janito/agent/tool_base.py</code>).</li> <li>Type hints: All parameters to the <code>run</code> method must have Python type hints.</li> <li>Docstrings:</li> <li>The tool class must have a class-level docstring summarizing its purpose and behavior (user-facing).</li> <li>The <code>run</code> method must have a Google-style docstring with an <code>Args:</code> section describing each parameter.</li> <li>Parameter descriptions: Every parameter must have a corresponding description in the docstring. If any are missing, registration will fail.</li> </ul>"},{"location":"guides/tools-developer-guide/#example-creating-a-tool","title":"Example: Creating a Tool","text":"<pre><code>from janito.tools.tool_base import ToolBase, ToolPermissions\nfrom janito.plugins.adapters.local.adapter import register_local_tool\n\n@register_local_tool\nclass MyTool(ToolBase):\n    \"\"\"\n    Processes a file a given number of times.\n    \"\"\"\n    permissions = ToolPermissions(read=True, write=True)\n    tool_name = \"my_tool\"\n\n    def run(self, filename: str, count: int) -&gt; str:\n        \"\"\"\n        Processes the specified file repeatedly.\n\n        Args:\n            filename (str): The path to the file to process.\n            count (int): How many times to process the file.\n\n        Returns:\n            str: Status message after processing.\n        \"\"\"\n        # Implementation here\n        return f\"Processed {filename} {count} times\"\n</code></pre>"},{"location":"guides/tools-developer-guide/#steps-to-add-a-tool","title":"Steps to Add a Tool","text":"<ol> <li>Define your tool as a class inheriting from <code>ToolBase</code>.</li> <li>Add a class-level docstring summarizing the tool's purpose (user-facing).</li> <li>Implement the <code>run</code> method with type hints and a Google-style docstring, including an <code>Args:</code> section for every parameter.</li> <li>Set permissions using <code>permissions = ToolPermissions(read=True, write=True, execute=True)</code> as needed.</li> <li>Register your tool with <code>@register_local_tool</code> from <code>janito.plugins.adapters.local.adapter</code>. Set a unique class attribute <code>tool_name = \"your_tool_name\"</code>.</li> <li>Document your tool: Update <code>docs/tools-index.md</code> with a short description and usage for your new tool.</li> </ol>"},{"location":"guides/tools-developer-guide/#docstring-style","title":"Docstring Style","text":"<p>Use the Google style for docstrings:</p> <pre><code>\"\"\"\nFunction summary.\n\nArgs:\n    param1 (type): Description of param1.\n    param2 (type): Description of param2.\n\"\"\"\n</code></pre> <ul> <li>The <code>Args:</code> section must list each parameter, its type, and a description.</li> <li>The class docstring is prepended to the tool's description in the OpenAI schema and is user-facing.</li> </ul>"},{"location":"guides/tools-developer-guide/#what-happens-if-you-omit-a-description","title":"What Happens If You Omit a Description?","text":"<p>If you forget to document a parameter, you will see an error like:</p> <pre><code>ValueError: Parameter 'count' in tool 'MyTool' is missing a description in the docstring.\n</code></pre>"},{"location":"guides/tools-developer-guide/#tool-reference","title":"Tool Reference","text":"<p>See the Tools Reference page in the documentation navigation for a list of built-in tools and their usage.</p>"},{"location":"guides/tools-developer-guide/#tool-call-limits","title":"Tool Call Limits","text":"<p>You can use <code>--max-tools</code> to limit the total number of tool runs allowed in a chat session. If the limit is reached, further tool runs will be prevented.</p>"},{"location":"guides/tools-developer-guide/#system-prompt-precedence","title":"System Prompt Precedence","text":"<ul> <li>If <code>--system-file</code> is provided, the file's content is used as the system prompt (highest priority).</li> <li>Otherwise, if <code>--system</code> or the config value is set, that string is used.</li> <li>Otherwise, a default prompt is used from the template at <code>janito/agent/templates/prompt_prompt_template.j2</code>.</li> </ul>"},{"location":"guides/tools-developer-guide/#interactive-shell-config-commands","title":"Interactive Shell Config Commands","text":"<p>Within the interactive chat shell, you can use special commands: - <code>/config show</code> \u2014 Show effective configuration (local, global, defaults) - <code>/config set local key=value</code> \u2014 Set a local config value - <code>/config set global key=value</code> \u2014 Set a global config value - <code>/continue</code> \u2014 Restore the last saved conversation - <code>/start</code> \u2014 Reset conversation history - <code>/prompt</code> \u2014 Show the current system prompt - <code>/help</code> \u2014 Show help message</p>"},{"location":"guides/tools-developer-guide/#summary","title":"Summary","text":"<ul> <li>Implement tools as classes inheriting from <code>ToolBase</code>.</li> <li>Provide type hints and parameter descriptions for the <code>run</code> method.</li> <li>Use Google-style docstrings for both the class and the <code>run</code> method.</li> <li>Registration will fail if any parameter is undocumented.</li> <li>Update the tools README after adding a new tool.</li> </ul>"},{"location":"guides/url-whitelist/","title":"URL Whitelist Guide","text":"<p>This guide explains how to use the URL whitelist feature to restrict the <code>fetch_url</code> tool to specific domains, particularly useful for market analysts who should only access trusted financial data sources.</p> <p>Note: For interactive use in chat mode, we recommend using the <code>/security</code> command instead of CLI options. See Security Commands Guide for details.</p>"},{"location":"guides/url-whitelist/#overview","title":"Overview","text":"<p>The URL whitelist feature allows you to restrict which websites the <code>fetch_url</code> tool can access. This is particularly useful for:</p> <ul> <li>Security: Prevent access to potentially malicious sites</li> <li>Compliance: Ensure only approved data sources are used</li> <li>Focus: Restrict market analysts to reliable financial data sources</li> </ul>"},{"location":"guides/url-whitelist/#quick-start","title":"Quick Start","text":""},{"location":"guides/url-whitelist/#setting-up-market-data-sources","title":"Setting Up Market Data Sources","text":"<p>Use the <code>/security</code> command in chat mode:</p> <pre><code>/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n/security allowed-sites add alphavantage.co\n/security allowed-sites add financialmodelingprep.com\n/security allowed-sites add twelvedata.com\n\n# Verify configuration\n/security allowed-sites list\n</code></pre>"},{"location":"guides/url-whitelist/#managing-allowed-sites","title":"Managing Allowed Sites","text":"<pre><code># List all allowed sites\n/security allowed-sites list\n\n# Add a single site\n/security allowed-sites add yahoo.com\n\n# Remove a site\n/security allowed-sites remove yahoo.com\n\n# Clear all restrictions (allow all sites)\n/security allowed-sites clear\n</code></pre>"},{"location":"guides/url-whitelist/#configuration-methods","title":"Configuration Methods","text":""},{"location":"guides/url-whitelist/#method-1-using-set-recommended-for-cli","title":"Method 1: Using --set (Recommended for CLI)","text":"<pre><code># Set multiple sites at once\njanito --set allowed_sites=site1.com,site2.com,site3.com\n\n# Example for market data\njanito --set allowed_sites=sec.gov,fred.stlouisfed.org,tradingview.com\n</code></pre>"},{"location":"guides/url-whitelist/#method-2-using-chat-mode-commands-recommended","title":"Method 2: Using Chat Mode Commands (Recommended)","text":"<pre><code># Add sites one by one\n/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n</code></pre>"},{"location":"guides/url-whitelist/#market-data-sources","title":"Market Data Sources","text":""},{"location":"guides/url-whitelist/#tier-1-government-official-sources","title":"Tier 1: Government &amp; Official Sources","text":"<ul> <li>sec.gov - SEC EDGAR filings and company reports</li> <li>fred.stlouisfed.org - Federal Reserve economic data</li> </ul>"},{"location":"guides/url-whitelist/#tier-2-public-financial-data","title":"Tier 2: Public Financial Data","text":"<ul> <li>tradingview.com - Real-time quotes and charts</li> <li>investing.com - Global indices and market data</li> <li>yahoo.com - Stock prices and historical data (use with caution)</li> </ul>"},{"location":"guides/url-whitelist/#tier-3-financial-apis","title":"Tier 3: Financial APIs","text":"<ul> <li>alphavantage.co - Free tier API for stocks and forex</li> <li>financialmodelingprep.com - Financial statements and ratios</li> <li>twelvedata.com - Real-time and historical data</li> </ul>"},{"location":"guides/url-whitelist/#usage-examples","title":"Usage Examples","text":""},{"location":"guides/url-whitelist/#setting-up-for-market-analysis","title":"Setting Up for Market Analysis","text":"<pre><code># Configure for comprehensive market analysis\njanito --set allowed_sites=sec.gov,fred.stlouisfed.org,tradingview.com,investing.com,alphavantage.co\n\n# Test the configuration\njanito \"Fetch Apple's current stock price from tradingview.com\"\n</code></pre>"},{"location":"guides/url-whitelist/#restricting-to-government-sources-only","title":"Restricting to Government Sources Only","text":"<pre><code># Ultra-secure configuration\njanito --set allowed_sites=sec.gov,fred.stlouisfed.org\n\n# This will block non-government sources\njanito \"Get Apple's 10-K filing\"  # \u2705 Works (sec.gov)\njanito \"Get Apple's stock price\"  # \u274c Blocked (needs tradingview.com)\n</code></pre>"},{"location":"guides/url-whitelist/#testing-access","title":"Testing Access","text":"<pre><code># Add a site for testing\njanito --add-allowed-site test-site.com\n\n# Use it for testing\njanito \"Test data from test-site.com\"\n\n# Remove when done\njanito --remove-allowed-site test-site.com\n</code></pre>"},{"location":"guides/url-whitelist/#configuration-file","title":"Configuration File","text":"<p>The whitelist is stored in <code>~/.janito/url_whitelist.json</code>:</p> <pre><code>{\n  \"allowed_sites\": [\n    \"sec.gov\",\n    \"fred.stlouisfed.org\",\n    \"tradingview.com\",\n    \"investing.com\"\n  ]\n}\n</code></pre>"},{"location":"guides/url-whitelist/#best-practices","title":"Best Practices","text":""},{"location":"guides/url-whitelist/#for-market-analysts","title":"For Market Analysts","text":"<ol> <li>Start with Tier 1 sources: Begin with government sources for reliability</li> <li>Add Tier 2 gradually: Include public sources as needed</li> <li>Document changes: Keep track of which sites are added/removed</li> <li>Regular review: Periodically review the whitelist for relevance</li> </ol>"},{"location":"guides/url-whitelist/#for-security","title":"For Security","text":"<ol> <li>Principle of least privilege: Only add sites you actually need</li> <li>Domain specificity: Use specific domains (e.g., <code>tradingview.com</code>) rather than wildcards</li> <li>Regular audits: Review the whitelist regularly</li> <li>Backup configuration: Save your whitelist configuration</li> </ol>"},{"location":"guides/url-whitelist/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/url-whitelist/#common-issues","title":"Common Issues","text":"<p>Problem: <code>fetch_url</code> returns \"URL blocked by whitelist\"</p> <pre><code># Check current whitelist\njanito --list-allowed-sites\n\n# Add the missing site\njanito --add-allowed-site missing-site.com\n</code></pre> <p>Problem: Need to allow subdomains</p> <pre><code># The whitelist automatically includes subdomains\n# Adding \"tradingview.com\" also allows \"www.tradingview.com\", \"api.tradingview.com\", etc.\n</code></pre> <p>Problem: Want to disable whitelist temporarily</p> <pre><code># Clear all restrictions\njanito --clear-allowed-sites\n\n# Restore later by setting allowed sites again\njanito --set allowed_sites=your-previous-list\n</code></pre>"},{"location":"guides/url-whitelist/#integration-with-profiles","title":"Integration with Profiles","text":""},{"location":"guides/url-whitelist/#market-analyst-profile","title":"Market Analyst Profile","text":"<p>When using the Market Analyst profile, you can pre-configure trusted sources:</p> <pre><code># Set up security in chat mode\n/security allowed-sites add sec.gov\n/security allowed-sites add fred.stlouisfed.org\n/security allowed-sites add tradingview.com\n/security allowed-sites add investing.com\n\n# Then use market analyst profile\n/profile market-analyst\nAnalyze Apple's financial performance\n</code></pre>"},{"location":"guides/url-whitelist/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guides/url-whitelist/#scripting","title":"Scripting","text":"<pre><code>#!/bin/bash\n# setup-market-sources.sh\n\nSITES=(\n    \"sec.gov\"\n    \"fred.stlouisfed.org\"\n    \"tradingview.com\"\n    \"investing.com\"\n    \"alphavantage.co\"\n    \"financialmodelingprep.com\"\n    \"twelvedata.com\"\n)\n\n# Join array with commas\nALLOWED_SITES=$(IFS=,; echo \"${SITES[*]}\")\n\n# Set configuration\njanito --set allowed_sites=\"$ALLOWED_SITES\"\n\necho \"Market data sources configured:\"\njanito --list-allowed-sites\n</code></pre>"},{"location":"guides/url-whitelist/#team-configuration","title":"Team Configuration","text":"<p>Share configurations across teams:</p> <pre><code># Export current whitelist\njanito --list-allowed-sites &gt; market-sources.txt\n\n# Import on another machine\njanito --set allowed_sites=$(cat market-sources.txt | tr '\\n' ',' | sed 's/,$//')\n</code></pre>"},{"location":"guides/url-whitelist/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Commands Guide - Manage allowed sites with <code>/security</code> command</li> <li>Market Data Sources Guide - Comprehensive list of reliable sources</li> <li>Using Tools - General tool usage documentation</li> <li>CLI Options - Complete CLI reference</li> </ul>"},{"location":"guides/using/","title":"Using Janito: Quickstart &amp; Basic Usage","text":"<p>This guide explains how to start using Janito after installation. For an overview, see the Introduction. For setup, see the Installation Guide and Configuration Guide.</p>"},{"location":"guides/using/#quickstart","title":"Quickstart","text":"<p>After installing Janito, you can use it from the command line:</p>"},{"location":"guides/using/#run-a-one-off-prompt","title":"Run a One-Off Prompt","text":"<pre><code>janito \"Refactor the data processing module to improve readability.\"\n</code></pre>"},{"location":"guides/using/#start-the-interactive-chat-shell","title":"Start the Interactive Chat Shell","text":"<pre><code>janito\n</code></pre>"},{"location":"guides/using/#basic-usage-tips","title":"Basic Usage Tips","text":"<ul> <li>Use natural language to describe what you want Janito to do (e.g., \"Add type hints to all functions in utils.py\").</li> <li>In the chat shell, use <code>/help</code> for available commands. Use <code>/exec on</code> to enable code/shell execution tools at runtime.</li> <li>Use CLI flags to customize behavior (see CLI Options).</li> <li>Shell commands can be executed using the built-in <code>run_bash_command</code> and <code>run_powershell_command</code> tools (when enabled).</li> </ul>"},{"location":"guides/using/#model-and-provider-selection","title":"Model and Provider Selection","text":"<p>You can specify which model and provider to use in two ways:</p> <p>Traditional approach:</p> <pre><code>janito -p openai -m gpt-4 \"Your prompt here\"\n</code></pre> <p>Shorthand syntax:</p> <pre><code>janito -m gpt-4@openai \"Your prompt here\"\n</code></pre> <p>The <code>model@provider</code> syntax is particularly useful for quick one-off commands and follows conventions used by tools like Docker.</p>"},{"location":"guides/using/#more-resources","title":"More Resources","text":"<ul> <li>How Janito Uses Tools: Automatic tool selection details.</li> <li>Supported Models: See documentation navigation for LLM compatibility.</li> <li>Costs &amp; Value Transparency: Pricing and efficiency details.</li> </ul>"},{"location":"guides/using_tools/","title":"\ud83d\udee0\ufe0f How Janito Uses Tools","text":"<p>Janito is designed to work for you automatically. When you ask a question or make a request, Janito selects and uses the most relevant tools behind the scenes\u2014no manual setup required.</p>"},{"location":"guides/using_tools/#why-list-the-tools","title":"\ud83d\udc40 Why List the Tools?","text":"<p>The following tools are listed for transparency and to help you understand how Janito works. You don\u2019t need to invoke them directly; Janito chooses the right tool based on your prompt and the current context.</p>"},{"location":"guides/using_tools/#types-of-tools","title":"\ud83e\uddf0 Types of Tools","text":"<ul> <li>\ud83d\udd0d File Search &amp; Content Extraction: Janito can search for files, read their contents, and extract relevant code or documentation.</li> <li>\ud83c\udfd7\ufe0f Code Outline &amp; Structure: Tools analyze Python files to provide outlines of classes, functions, and methods.</li> <li>\u2699\ufe0f Configuration &amp; Environment: Janito can inspect and report on project configuration files and runtime settings.</li> <li>\ud83c\udf10 Web Fetching: Some tools fetch and parse web content for research or documentation purposes.</li> <li>\ud83c\udfa8 Rich Output: Tools format and present results in a readable, actionable way (e.g., code blocks, tables).</li> <li>\ud83d\udcca Data Visualization: Tools display charts and graphs directly in the terminal using rich formatting.</li> <li>\ud83d\udcbb Shell Command Execution: Tools execute bash and PowerShell commands with live output streaming, timeout handling, and security controls.</li> </ul>"},{"location":"guides/using_tools/#full-reference","title":"\ud83d\udcd6 Full Reference","text":"<p>For a detailed list of all available tools and their options, see the Tools Reference.</p>"},{"location":"guides/prompting/","title":"Prompting Guide","text":"<p>This section contains detailed guides and best practices for prompt engineering, system prompt design, and domain-specific prompting strategies for Janito.</p>"},{"location":"guides/prompting/#contents","title":"Contents","text":"<ul> <li>Prompt Design Style: Condition Before Action</li> <li>Using Profiles in Janito</li> <li>(Add more guides for specific instructions, roles, and domains)</li> </ul> <p>This directory is intended for all documentation related to prompt construction, style, and advanced usage.</p>"},{"location":"meta/developer-toolchain/","title":"Developer Toolchain Guide","text":"<p>For tool development, see the Tools Developer Guide.</p>"},{"location":"meta/developer-toolchain/#code-style-linting-and-pre-commit-hooks","title":"Code Style, Linting, and Pre-commit Hooks","text":"<p>This project uses pre-commit to enforce code style and linting automatically using Black (formatter) and Ruff (linter).</p>"},{"location":"meta/developer-toolchain/#setup","title":"Setup","text":"<ol> <li>Install pre-commit if you haven't already:</li> </ol> <pre><code>uv pip install pre-commit\n</code></pre> <ol> <li>Install the hooks:</li> </ol> <pre><code>pre-commit install\n</code></pre>"},{"location":"meta/developer-toolchain/#usage","title":"Usage","text":"<ul> <li>Hooks will run automatically on <code>git commit</code>.</li> <li>To manually check all files:</li> </ul> <pre><code>pre-commit run --all-files\n</code></pre> <ul> <li>If any issues are found, pre-commit will attempt to fix them or display errors to resolve.</li> </ul>"},{"location":"meta/developer-toolchain/#notes","title":"Notes","text":"<ul> <li>Always run the hooks before pushing code to ensure consistent style and linting.</li> <li>See <code>.pre-commit-config.yaml</code> for configuration details.</li> </ul>"},{"location":"models/supported_models/","title":"Supported LLM Models","text":"<p>This document lists all supported large language models (LLMs) across providers, as defined in the codebase.</p>"},{"location":"models/supported_models/#openai","title":"OpenAI","text":"Model Name Context Window Max Response Thinking Supported <code>gpt-3.5-turbo</code> 16,385 4,096 No <code>gpt-4.1</code> 1,047,576 32,768 No <code>gpt-4.1-mini</code> 1,047,576 32,768 No <code>gpt-4.1-nano</code> 1,047,576 32,768 No <code>gpt-4-turbo</code> 128,000 N/A No <code>gpt-4o</code> 128,000 4,096 No <code>gpt-4o-mini</code> 128,000 16,384 No <code>o3-mini</code> 200,000 100,000 Yes <code>o3</code> 200,000 100,000 Yes <code>o4-mini</code> 200,000 100,000 Yes <code>gpt-5</code> 200,000 100,000 Yes <code>gpt-5-mini</code> 200,000 100,000 Yes <code>gpt-5-nano</code> 200,000 100,000 Yes <p>Note: <code>gpt-4-turbo-alt</code> is a duplicate entry for internal use and should not be selected by users.</p>"},{"location":"models/supported_models/#anthropic","title":"Anthropic","text":"Model Name Max Response Thinking Supported <code>claude-opus-4-20250514</code> 32,000 No <code>claude-sonnet-4-20250514</code> 64,000 No <code>claude-3-7-sonnet-20250219</code> 64,000 No <code>claude-3-5-haiku-20241022</code> 8,192 No <code>claude-3-5-sonnet-20241022</code> 8,192 No <code>claude-3-haiku-20240307</code> 4,096 No"},{"location":"models/supported_models/#google-gemini","title":"Google Gemini","text":"Model Name Max Response Max COT Thinking Supported <code>gemini-2.5-flash</code> 8,192 24,576 Yes <code>gemini-2.5-pro</code> 65,536 196,608 Yes <code>gemini-2.5-flash-lite-preview-06-17</code> 64,000 192,000 Yes"},{"location":"models/supported_models/#mistral","title":"Mistral","text":"Model Name Context Window Max Input Max Response Thinking Supported <code>codestral-latest</code> 256,000 250,000 4,096 No <code>codestral-2405</code> 256,000 250,000 4,096 No <code>mistral-small-latest</code> 32,000 28,000 4,096 No <code>mistral-medium-latest</code> 32,000 28,000 4,096 No <code>mistral-large-latest</code> 128,000 120,000 4,096 No <code>devstral-small-latest</code> 128,000 120,000 4,096 No <code>devstral-medium-latest</code> 128,000 120,000 4,096 No"},{"location":"models/supported_models/#cerebras","title":"Cerebras","text":"Model Name Max Input Max Response Description <code>qwen-3-32b</code> 128,000 16,384 Qwen 3 32B model for general instruction following <code>qwen-3-235b-a22b-instruct-2507</code> 128,000 16,384 Qwen 3 235B A22B instruction-tuned model (preview) <code>qwen-3-235b-a22b-thinking-2507</code> 128,000 16,384 Qwen 3 235B A22B thinking model for reasoning tasks (preview) <code>qwen-3-coder-480b</code> 128,000 16,384 Qwen 3 Coder 480B model for programming tasks (preview) <code>gpt-oss-120b</code> 128,000 16,384 GPT-OSS 120B open-source model (preview)"},{"location":"models/supported_models/#zai","title":"Z.AI","text":"Model Name Context Window Max Input Max COT Max Response Thinking Supported Supports Tools Supports Images <code>glm-4.5</code> 128,000 128,000 4,096 4,096 Yes Yes Yes <code>glm-4.5-air</code> 128,000 128,000 4,096 4,096 Yes Yes Yes"},{"location":"models/supported_models/#alibaba-qwen","title":"Alibaba Qwen","text":"Model Name Context Window Max Response Category <code>qwen-turbo</code> 1,008,192 8,192 Alibaba Qwen Turbo Model (OpenAI-compatible) <code>qwen-plus</code> 131,072 8,192 Alibaba Qwen Plus Model (OpenAI-compatible) <code>qwen-flash</code> 1,000,000 8,192 Alibaba Qwen Flash Model (OpenAI-compatible) <code>qwen-max</code> 32,768 8,192 Alibaba Qwen Max Model (OpenAI-compatible) <code>qwen3-coder-plus</code> 1,048,576 65,536 Alibaba Qwen3 Coder Plus Model (OpenAI-compatible) <code>qwen3-coder-480b-a35b-instruct</code> 262,144 65,536 Alibaba Qwen3 Coder 480B A35B Instruct Model (OpenAI-compatible) <code>qwen3-235b-a22b-thinking-2507</code> 131,072 32,768 Alibaba Qwen3 235B A22B Thinking Model (OpenAI-compatible) <code>qwen3-235b-a22b-instruct-2507</code> 129,024 32,768 Alibaba Qwen3 235B A22B Instruct Model (OpenAI-compatible) <code>qwen3-30b-a3b-thinking-2507</code> 126,976 32,768 Alibaba Qwen3 30B A3B Thinking Model (OpenAI-compatible) <code>qwen3-30b-a3b-instruct-2507</code> 129,024 32,768 Alibaba Qwen3 30B A3B Instruct Model (OpenAI-compatible) <code>qwen3-next-80b-a3b-instruct</code> 262,144 65,536 Alibaba Qwen3-Max Preview (256K) - 80B A3B Instruct Model (OpenAI-compatible) <code>qwen3-next-80b-a3b-thinking</code> 262,144 65,536 Alibaba Qwen3-Max Preview (256K) - 80B A3B Thinking Model (OpenAI-compatible) <code>qwen3-max-preview</code> 262,144 65,536 Alibaba Qwen3-Max Preview (256K) - Standard Model (OpenAI-compatible)"},{"location":"models/supported_models/#deepseek","title":"DeepSeek","text":"Model Name Context Window Max Tokens Description <code>deepseek-chat</code> 131,072 4,096 DeepSeek Chat Model (OpenAI-compatible) <code>deepseek-reasoner</code> 131,072 32,768 DeepSeek Reasoner Model (OpenAI-compatible)"},{"location":"models/supported_models/#moonshot","title":"Moonshot","text":"Model Name Context Window Max Input Max Response <code>kimi-k2-0711-preview</code> 128,000 100,000 4,096 <code>kimi-k2-turbo-preview</code> 128,000 100,000 4,096 <code>kimi-k2-0905-preview</code> 128,000 100,000 4,096"},{"location":"models/supported_models/#ibm-watsonx","title":"IBM WatsonX","text":"Model Name Context Window Max Input Max Response Max COT Thinking Supported <code>openai/gpt-oss-120b</code> 128,000 128,000 4,096 4,096 Yes <code>ibm/granite-3-8b-instruct</code> 128,000 128,000 4,096 4,096 No <code>ibm/granite-3-3-8b-instruct</code> 128,000 128,000 4,096 4,096 No <code>meta-llama/llama-3-1-70b-instruct</code> 128,000 128,000 4,096 4,096 No <code>meta-llama/llama-3-3-70b-instruct</code> 128,000 128,000 4,096 4,096 No <code>mistralai/mistral-large</code> 128,000 128,000 4,096 4,096 No <code>mistralai/mistral-large-2407</code> 128,000 128,000 4,096 4,096 No <code>openai/gpt-oss-20b</code> 128,000 128,000 4,096 4,096 Yes"},{"location":"models/supported_models/#azure-openai","title":"Azure OpenAI","text":"<p>Azure OpenAI supports any deployment name configured by the user. The following are known model mappings:</p> Model Name Mapped To Context Window Max Response <code>azure_openai_deployment</code> gpt-4o 128,000 4,096 <p>Note: Azure OpenAI deployments are user-defined. Use <code>--provider azure_openai --model YOUR_DEPLOYMENT_NAME</code> to use any valid deployment.</p> <p>Last updated from source code: September 2025</p>"},{"location":"plugins/","title":"Janito Plugin System Documentation","text":"<p>This directory contains comprehensive documentation for the Janito plugin system, consolidated from multiple sources for easier access.</p>"},{"location":"plugins/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Plugin Development Guide - Complete guide for creating plugins</li> <li>Remote Plugins - Using plugins from remote repositories</li> <li>Built-in Plugins - Documentation for included plugins</li> <li>API Reference - Technical details and interfaces</li> <li>Examples - Working plugin examples</li> </ul>"},{"location":"plugins/#overview","title":"Overview","text":"<p>The Janito plugin system allows you to extend functionality with custom tools, commands, and features. Plugins can be:</p> <ul> <li>Local plugins - Stored in <code>./plugins/</code> or <code>~/.janito/plugins/</code></li> <li>Remote plugins - Loaded from the <code>ikignosis/janito-plugins</code> repository</li> <li>Built-in plugins - Included with janito</li> </ul>"},{"location":"plugins/#quick-start","title":"Quick Start","text":""},{"location":"plugins/#creating-a-basic-plugin","title":"Creating a Basic Plugin","text":"<pre><code>from janito.plugins.base import Plugin, PluginMetadata\nfrom janito.tools.tool_base import ToolBase, ToolPermissions\n\nclass HelloTool(ToolBase):\n    tool_name = \"hello\"\n    permissions = ToolPermissions(read=True, write=False, execute=True)\n\n    def run(self, name=\"World\"):\n        return f\"Hello, {name}!\"\n\nclass HelloPlugin(Plugin):\n    def get_metadata(self):\n        return PluginMetadata(\n            name=\"hello\",\n            version=\"1.0.0\",\n            description=\"A simple greeting plugin\",\n            author=\"You\"\n        )\n\n    def get_tools(self):\n        return [HelloTool]\n</code></pre>"},{"location":"plugins/#enabling-plugins","title":"Enabling Plugins","text":"<p>Add to <code>janito.json</code>:</p> <pre><code>{\n  \"plugins\": {\n    \"load\": {\n      \"hello\": true\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/#available-documentation","title":"Available Documentation","text":""},{"location":"plugins/#core-documentation","title":"Core Documentation","text":"<ul> <li>Plugin Development Guide - Step-by-step plugin creation</li> <li>Remote Plugins - Using community plugins</li> <li>Configuration - Plugin configuration options</li> </ul>"},{"location":"plugins/#built-in-plugins","title":"Built-in Plugins","text":"<ul> <li>Git Analyzer - Git repository analysis</li> <li>Code Navigator - Code navigation tools</li> <li>Example Plugin - Basic plugin example</li> </ul>"},{"location":"plugins/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Plugin Architecture - System design and internals</li> <li>Testing Plugins - Writing tests for plugins</li> <li>Publishing Plugins - Sharing plugins with the community</li> </ul>"},{"location":"plugins/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Report problems on GitHub</li> <li>Discussions: Join community forums</li> <li>Examples: Check the <code>examples/</code> directory for working samples</li> </ul>"},{"location":"plugins/#directory-structure","title":"Directory Structure","text":"<pre><code>docs/plugins/\n\u251c\u2500\u2500 README.md                    # This file\n\u251c\u2500\u2500 plugin-development.md        # Complete development guide\n\u251c\u2500\u2500 remote-plugins.md           # Remote repository usage\n\u251c\u2500\u2500 built-in-plugins/           # Built-in plugin docs\n\u2502   \u251c\u2500\u2500 git-analyzer.md\n\u2502   \u251c\u2500\u2500 code-navigator.md\n\u2502   \u2514\u2500\u2500 example.md\n\u251c\u2500\u2500 examples/                   # Sample plugins\n\u2502   \u251c\u2500\u2500 basic/\n\u2502   \u251c\u2500\u2500 intermediate/\n\u2502   \u2514\u2500\u2500 advanced/\n\u2514\u2500\u2500 api-reference.md          # Technical reference\n</code></pre>"},{"location":"plugins/api-reference/","title":"Plugin API Reference","text":""},{"location":"plugins/api-reference/#overview","title":"Overview","text":"<p>This document provides a comprehensive reference for the Janito plugin API. It details the classes, methods, and interfaces available for plugin development.</p>"},{"location":"plugins/api-reference/#core-classes","title":"Core Classes","text":""},{"location":"plugins/api-reference/#pluginmetadata","title":"PluginMetadata","text":"<p>Data class containing plugin metadata.</p> <pre><code>@dataclass\nclass PluginMetadata:\n    name: str                    # Unique plugin identifier\n    version: str                 # Semantic version (e.g., \"1.0.0\")\n    description: str             # Brief description of the plugin\n    author: str                  # Plugin author name\n    license: str = \"MIT\"         # Software license\n    homepage: Optional[str] = None  # URL to plugin documentation\n    dependencies: List[str] = None  # List of required packages\n</code></pre>"},{"location":"plugins/api-reference/#pluginresource","title":"PluginResource","text":"<p>Represents a resource provided by a plugin.</p> <pre><code>@dataclass\nclass PluginResource:\n    name: str                    # Resource name\n    type: str                    # Resource type (\"tool\", \"command\", \"config\")\n    description: str             # Resource description\n    schema: Optional[Dict[str, Any]] = None  # JSON schema for config resources\n</code></pre>"},{"location":"plugins/api-reference/#plugin-abstract-base-class","title":"Plugin (Abstract Base Class)","text":"<p>Base class for all plugins.</p> <pre><code>class Plugin(ABC):\n    def __init__(self):\n        self.metadata: PluginMetadata = self.get_metadata()\n\n    @abstractmethod\n    def get_metadata(self) -&gt; PluginMetadata:\n        \"\"\"Return metadata describing this plugin.\"\"\"\n\n    def get_tools(self) -&gt; List[Type[ToolBase]]:\n        \"\"\"Return a list of tool classes provided by this plugin.\"\"\"\n\n    def get_commands(self) -&gt; Dict[str, Any]:\n        \"\"\"Return a dictionary of CLI commands provided by this plugin.\"\"\"\n\n    def initialize(self) -&gt; None:\n        \"\"\"Called when the plugin is loaded. Override for initialization.\"\"\"\n\n    def cleanup(self) -&gt; None:\n        \"\"\"Called when the plugin is unloaded. Override for cleanup.\"\"\"\n\n    def get_config_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"Return JSON schema for plugin configuration.\"\"\"\n\n    def validate_config(self, config: Dict[str, Any]) -&gt; bool:\n        \"\"\"Validate plugin configuration.\"\"\"\n\n    def get_resources(self) -&gt; List[PluginResource]:\n        \"\"\"Return a list of resources provided by this plugin.\"\"\"\n</code></pre>"},{"location":"plugins/api-reference/#plugin-lifecycle","title":"Plugin Lifecycle","text":""},{"location":"plugins/api-reference/#initialization","title":"Initialization","text":"<p>The <code>initialize()</code> method is called when the plugin is loaded:</p> <pre><code>def initialize(self) -&gt; None:\n    \"\"\"Called when the plugin is loaded.\"\"\"\n    # Perform any setup needed\n    self.setup_database_connection()\n    self.load_configuration()\n</code></pre>"},{"location":"plugins/api-reference/#cleanup","title":"Cleanup","text":"<p>The <code>cleanup()</code> method is called when the plugin is unloaded:</p> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Called when the plugin is unloaded.\"\"\"\n    # Perform any cleanup needed\n    self.close_database_connection()\n    self.cleanup_temp_files()\n</code></pre>"},{"location":"plugins/api-reference/#resource-contribution-methods","title":"Resource Contribution Methods","text":""},{"location":"plugins/api-reference/#get_tools","title":"get_tools()","text":"<p>Returns a list of tool classes that should be registered:</p> <pre><code>def get_tools(self) -&gt; List[Type[ToolBase]]:\n    return [MyTool1, MyTool2, MyTool3]\n</code></pre>"},{"location":"plugins/api-reference/#get_commands","title":"get_commands()","text":"<p>Returns a dictionary mapping command names to handler functions:</p> <pre><code>def get_commands(self) -&gt; Dict[str, Any]:\n    return {\n        \"mycommand\": self.handle_mycommand,\n        \"another-command\": self.handle_another_command\n    }\n</code></pre>"},{"location":"plugins/api-reference/#get_config_schema","title":"get_config_schema()","text":"<p>Returns a JSON schema describing the plugin's configuration options:</p> <pre><code>def get_config_schema(self) -&gt; Dict[str, Any]:\n    return {\n        \"type\": \"object\",\n        \"properties\": {\n            \"timeout\": {\n                \"type\": \"number\",\n                \"minimum\": 1,\n                \"maximum\": 3600,\n                \"default\": 30\n            },\n            \"api_key\": {\n                \"type\": \"string\",\n                \"minLength\": 32\n            }\n        },\n        \"required\": [\"api_key\"]\n    }\n</code></pre>"},{"location":"plugins/api-reference/#utility-methods","title":"Utility Methods","text":""},{"location":"plugins/api-reference/#get_config","title":"get_config()","text":"<p>Retrieves the plugin's current configuration:</p> <pre><code>def get_config(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the current plugin configuration.\"\"\"\n    # Implementation provided by the plugin system\n    pass\n</code></pre>"},{"location":"plugins/api-reference/#report_action","title":"report_action()","text":"<p>Logs an action performed by a tool (available in ToolBase):</p> <pre><code>def report_action(self, message: str, action_type: str = \"action\") -&gt; None:\n    \"\"\"Report an action performed by the tool.\"\"\"\n    # Implementation provided by the base class\n    pass\n</code></pre>"},{"location":"plugins/api-reference/#best-practices","title":"Best Practices","text":""},{"location":"plugins/api-reference/#error-handling","title":"Error Handling","text":"<p>Always include proper error handling in your tools:</p> <pre><code>class MyTool(ToolBase):\n    def run(self, param: str) -&gt; str:\n        try:\n            # Your logic here\n            result = some_operation(param)\n            return f\"Success: {result}\"\n        except ValueError as e:\n            return f\"Error: Invalid parameter - {str(e)}\"\n        except Exception as e:\n            return f\"Error: Operation failed - {str(e)}\"\n</code></pre>"},{"location":"plugins/api-reference/#documentation","title":"Documentation","text":"<p>Include comprehensive docstrings for all methods:</p> <pre><code>def run(self, name: str = \"World\") -&gt; str:\n    \"\"\"\n    Generate a greeting message.\n\n    Args:\n        name: Name of the person to greet (default: \"World\")\n\n    Returns:\n        Formatted greeting message\n\n    Examples:\n        &gt;&gt;&gt; tool = GreetingTool()\n        &gt;&gt;&gt; tool.run(\"Alice\")\n        'Hello, Alice!'\n    \"\"\"\n</code></pre>"},{"location":"plugins/api-reference/#security","title":"Security","text":"<p>Follow security best practices:</p> <ul> <li>Validate all inputs</li> <li>Use appropriate permissions for tools</li> <li>Sanitize user input</li> <li>Implement timeouts for long-running operations</li> <li>Avoid executing untrusted code</li> </ul> <p>This API reference provides the complete interface for developing plugins, enabling you to create powerful extensions that integrate seamlessly with the Janito system.</p>"},{"location":"plugins/architecture/","title":"Plugin Architecture","text":""},{"location":"plugins/architecture/#overview","title":"Overview","text":"<p>The Janito plugin architecture is designed to provide a flexible and extensible system for adding functionality. The architecture separates the interface definitions from the actual implementations, allowing for organized plugin management while maintaining a clean codebase.</p>"},{"location":"plugins/architecture/#architecture-components","title":"Architecture Components","text":""},{"location":"plugins/architecture/#plugin-interface-layer","title":"Plugin Interface Layer","text":"<p>Located in the <code>plugins/</code> directory, this layer contains the plugin definitions and interfaces. Each plugin is organized by functional domain:</p> <pre><code>plugins/\n\u251c\u2500\u2500 core/           # Core system functionality\n\u2502   \u251c\u2500\u2500 filemanager/\n\u2502   \u251c\u2500\u2500 codeanalyzer/\n\u2502   \u2514\u2500\u2500 system/\n\u251c\u2500\u2500 web/            # Web-related functionality\n\u2502   \u2514\u2500\u2500 webtools/\n\u251c\u2500\u2500 dev/            # Development tools\n\u2502   \u251c\u2500\u2500 pythondev/\n\u2502   \u2514\u2500\u2500 visualization/\n\u2514\u2500\u2500 ui/             # User interface\n    \u2514\u2500\u2500 userinterface/\n</code></pre>"},{"location":"plugins/architecture/#implementation-layer","title":"Implementation Layer","text":"<p>The actual tool implementations are located in <code>janito/plugins/tools/local/</code>. This separation ensures that the core functionality remains stable while the plugin interfaces can be organized and extended.</p> <pre><code>janito/plugins/tools/local/\n\u251c\u2500\u2500 create_file.py\n\u251c\u2500\u2500 read_files.py\n\u251c\u2500\u2500 view_file.py\n\u251c\u2500\u2500 replace_text_in_file.py\n\u251c\u2500\u2500 validate_file_syntax/\n\u251c\u2500\u2500 create_directory.py\n\u251c\u2500\u2500 remove_directory.py\n\u251c\u2500\u2500 remove_file.py\n\u251c\u2500\u2500 copy_file.py\n\u251c\u2500\u2500 move_file.py\n\u251c\u2500\u2500 find_files.py\n\u251c\u2500\u2500 get_file_outline/\n\u251c\u2500\u2500 search_text/\n\u251c\u2500\u2500 run_powershell_command.py\n\u251c\u2500\u2500 fetch_url.py\n\u251c\u2500\u2500 open_url.py\n\u251c\u2500\u2500 open_html_in_browser.py\n\u251c\u2500\u2500 python_code_run.py\n\u251c\u2500\u2500 python_command_run.py\n\u251c\u2500\u2500 python_file_run.py\n\n\u2514\u2500\u2500 ask_user.py\n</code></pre>"},{"location":"plugins/architecture/#resource-flow","title":"Resource Flow","text":"<ol> <li>Plugin Registration: Plugins are registered with the system at startup</li> <li>Tool Discovery: The system discovers available tools from registered plugins</li> <li>Resource Contribution: Each plugin contributes its tools to the global tool registry</li> <li>Tool Execution: When a tool is called, the system routes the request to the appropriate implementation</li> </ol>"},{"location":"plugins/architecture/#plugin-loading-process","title":"Plugin Loading Process","text":"<ol> <li>Discovery: The system scans for plugins in <code>./plugins/</code>, <code>~/.janito/plugins/</code>, and remote repositories</li> <li>Validation: Plugin metadata and interfaces are validated</li> <li>Initialization: The <code>initialize()</code> method is called on each loaded plugin</li> <li>Registration: Tools and commands are registered with the system</li> <li>Availability: Plugins are now available for use</li> </ol>"},{"location":"plugins/architecture/#resource-contribution-mechanism","title":"Resource Contribution Mechanism","text":"<p>Plugins contribute resources through several methods:</p>"},{"location":"plugins/architecture/#tools","title":"Tools","text":"<p>The primary resource type, tools are registered via the <code>get_tools()</code> method:</p> <pre><code>def get_tools(self) -&gt; List[Type[ToolBase]]:\n    return [HelloWorldTool, CalculatorTool]\n</code></pre>"},{"location":"plugins/architecture/#commands","title":"Commands","text":"<p>CLI commands are contributed through <code>get_commands()</code>:</p> <pre><code>def get_commands(self) -&gt; Dict[str, Any]:\n    return {\"mycommand\": my_command_handler}\n</code></pre>"},{"location":"plugins/architecture/#configuration","title":"Configuration","text":"<p>Plugins can define their configuration schema:</p> <pre><code>def get_config_schema(self) -&gt; Dict[str, Any]:\n    return {\n        \"type\": \"object\",\n        \"properties\": {\n            \"timeout\": {\"type\": \"number\", \"default\": 30}\n        }\n    }\n</code></pre>"},{"location":"plugins/architecture/#security-model","title":"Security Model","text":"<p>The architecture includes several security features:</p> <ul> <li>Permission System: Each tool has defined read, write, and execute permissions</li> <li>Path Validation: File operations include path validation to prevent directory traversal</li> <li>Sandboxing: Potentially dangerous operations are sandboxed and monitored</li> <li>User Confirmation: Sensitive operations require explicit user approval</li> <li>Timeouts: Long-running operations are automatically terminated</li> </ul>"},{"location":"plugins/architecture/#extension-points","title":"Extension Points","text":"<p>The architecture supports several extension points:</p> <ul> <li>New Plugins: Add new functionality by creating plugins in the <code>plugins/</code> directory</li> <li>Custom Tools: Implement new tools by extending <code>ToolBase</code></li> <li>Remote Plugins: Load plugins from external repositories</li> <li>Configuration: Customize plugin behavior through configuration files</li> </ul> <p>This architecture enables a powerful, secure, and extensible system for building AI-assisted development tools.</p>"},{"location":"plugins/configuration/","title":"Plugin Configuration","text":""},{"location":"plugins/configuration/#overview","title":"Overview","text":"<p>This document explains how to configure plugins in the Janito system. Plugin configuration allows you to customize the behavior of plugins to suit your specific needs and environment.</p>"},{"location":"plugins/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>Plugins can be configured through the main configuration file <code>janito.json</code>. The configuration is organized under the <code>plugins</code> key:</p> <pre><code>{\n  \"plugins\": {\n    \"load\": {\n      \"core.filemanager\": true,\n      \"core.codeanalyzer\": true,\n      \"core.imagedisplay\": true,\n      \"web.webtools\": false\n    },\n    \"config\": {\n      \"core.filemanager\": {\n        \"max_file_size\": 1000000,\n        \"backup_enabled\": true\n      },\n      \"web.webtools\": {\n        \"timeout\": 30,\n        \"user_agent\": \"Janito/1.0\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"plugins/configuration/#plugin-loading","title":"Plugin Loading","text":"<p>The <code>plugins.load</code> section controls which plugins are enabled:</p> <pre><code>\"plugins\": {\n  \"load\": {\n    \"core.filemanager\": true,\n    \"dev.pythondev\": true,\n    \"ui.userinterface\": true,\n    \"core.imagedisplay\": true\n  }\n}\n</code></pre> <p>Setting a plugin to <code>false</code> disables it completely.</p>"},{"location":"plugins/configuration/#plugin-specific-configuration","title":"Plugin-Specific Configuration","text":"<p>The <code>plugins.config</code> section contains configuration options for individual plugins. Each plugin may have its own set of configurable parameters.</p>"},{"location":"plugins/configuration/#file-manager-plugin","title":"File Manager Plugin","text":"<pre><code>\"core.filemanager\": {\n  \"max_file_size\": 1000000,\n  \"backup_enabled\": true,\n  \"default_encoding\": \"utf-8\"\n}\n</code></pre>"},{"location":"plugins/configuration/#web-tools-plugin","title":"Web Tools Plugin","text":"<pre><code>\"web.webtools\": {\n  \"timeout\": 30,\n  \"user_agent\": \"Janito/1.0\",\n  \"max_redirects\": 5\n}\n</code></pre>"},{"location":"plugins/configuration/#python-development-plugin","title":"Python Development Plugin","text":"<pre><code>\"dev.pythondev\": {\n  \"default_timeout\": 60,\n  \"python_interpreter\": \"python3\"\n}\n</code></pre>"},{"location":"plugins/configuration/#system-tools-plugin","title":"System Tools Plugin","text":"<pre><code>\"core.system\": {\n  \"command_timeout\": 60,\n  \"require_confirmation\": true\n}\n</code></pre>"},{"location":"plugins/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Plugins can define a JSON schema for their configuration. The system validates configurations against these schemas to ensure correctness. If a plugin provides a schema through <code>get_config_schema()</code>, the system will validate the configuration before applying it.</p>"},{"location":"plugins/configuration/#dynamic-configuration","title":"Dynamic Configuration","text":"<p>Plugins can be reconfigured at runtime using CLI commands:</p> <pre><code>janito --set-plugin-config \"core.filemanager.max_file_size=2000000\"\njanito --disable-plugin \"web.webtools\"\njanito --enable-plugin \"dev.visualization\"\n</code></pre>"},{"location":"plugins/configuration/#default-configuration","title":"Default Configuration","text":"<p>If no configuration is provided, plugins use sensible defaults. The default configuration enables all built-in plugins and uses conservative settings for security and performance.</p>"},{"location":"plugins/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":"<ul> <li>Security First: Configure timeouts and limits to prevent denial-of-service conditions</li> <li>Environment Specific: Adjust configuration based on your development environment</li> <li>Documentation: Document custom configurations for team sharing</li> <li>Testing: Test configuration changes in a safe environment before deployment</li> </ul>"},{"location":"plugins/configuration/#troubleshooting","title":"Troubleshooting","text":"<p>If plugins are not behaving as expected:</p> <ol> <li>Check the configuration syntax in <code>janito.json</code></li> <li>Verify that the plugin is enabled in the <code>plugins.load</code> section</li> <li>Check for validation errors in the logs</li> <li>Review the plugin's documentation for required configuration options</li> </ol> <p>Proper configuration ensures that plugins work effectively and securely in your development workflow.</p>"},{"location":"plugins/plugin-development/","title":"Plugin Development Guide","text":""},{"location":"plugins/plugin-development/#overview","title":"Overview","text":"<p>This guide provides comprehensive instructions for developing plugins for the Janito system. Plugins allow you to extend functionality by adding custom tools, commands, and features.</p>"},{"location":"plugins/plugin-development/#plugin-structure","title":"Plugin Structure","text":"<p>A plugin consists of a Python class that inherits from <code>Plugin</code> and implements the required methods. Plugins are typically organized in the <code>plugins/</code> directory with a hierarchical structure:</p> <pre><code>plugins/\n\u2514\u2500\u2500 myplugin/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 tools/\n        \u2514\u2500\u2500 mytool.py\n</code></pre>"},{"location":"plugins/plugin-development/#basic-plugin-example","title":"Basic Plugin Example","text":"<pre><code>from janito.plugins.base import Plugin, PluginMetadata\nfrom janito.tools.tool_base import ToolBase, ToolPermissions\n\n# Define a tool\nclass HelloWorldTool(ToolBase):\n    tool_name = \"hello_world\"\n    permissions = ToolPermissions(read=True, write=False, execute=True)\n\n    def run(self, name: str = \"World\") -&gt; str:\n        \"\"\"Say hello to someone.\"\"\"\n        return f\"Hello, {name}!\"\n\n# Define the plugin\nclass MyPlugin(Plugin):\n    def get_metadata(self) -&gt; PluginMetadata:\n        return PluginMetadata(\n            name=\"myplugin\",\n            version=\"1.0.0\",\n            description=\"My custom plugin\",\n            author=\"Your Name\",\n            license=\"MIT\"\n        )\n\n    def get_tools(self):\n        return [HelloWorldTool]\n\n# Register the plugin\nclass PLUGIN_CLASS(MyPlugin):\n    pass\n</code></pre>"},{"location":"plugins/plugin-development/#plugin-metadata","title":"Plugin Metadata","text":"<p>The <code>get_metadata()</code> method returns a <code>PluginMetadata</code> object with the following fields:</p> <ul> <li>name: Unique plugin identifier</li> <li>version: Semantic version (e.g., \"1.0.0\")</li> <li>description: Brief description of the plugin</li> <li>author: Plugin author name</li> <li>license: Software license (default: \"MIT\")</li> <li>homepage: URL to plugin documentation</li> <li>dependencies: List of required packages</li> </ul>"},{"location":"plugins/plugin-development/#resource-contribution","title":"Resource Contribution","text":"<p>Plugins contribute resources through several methods:</p>"},{"location":"plugins/plugin-development/#tools","title":"Tools","text":"<p>The primary way plugins extend functionality is through tools. Tools are classes that inherit from <code>ToolBase</code> and implement the <code>run()</code> method.</p> <pre><code>def get_tools(self) -&gt; List[Type[ToolBase]]:\n    return [MyTool1, MyTool2]\n</code></pre>"},{"location":"plugins/plugin-development/#commands","title":"Commands","text":"<p>Plugins can add CLI commands:</p> <pre><code>def get_commands(self) -&gt; Dict[str, Any]:\n    return {\"mycommand\": my_command_function}\n</code></pre>"},{"location":"plugins/plugin-development/#configuration","title":"Configuration","text":"<p>Plugins can define configuration schemas:</p> <pre><code>def get_config_schema(self) -&gt; Dict[str, Any]:\n    return {\n        \"type\": \"object\",\n        \"properties\": {\n            \"api_key\": {\"type\": \"string\", \"description\": \"Your API key\"}\n        }\n    }\n</code></pre>"},{"location":"plugins/plugin-development/#plugin-lifecycle","title":"Plugin Lifecycle","text":"<p>Plugins have several lifecycle methods:</p> <ul> <li>initialize(): Called when the plugin is loaded</li> <li>cleanup(): Called when the plugin is unloaded</li> <li>get_metadata(): Returns plugin metadata</li> <li>get_tools(): Returns tool classes</li> </ul>"},{"location":"plugins/plugin-development/#development-best-practices","title":"Development Best Practices","text":"<ul> <li>Clear Naming: Use descriptive names for plugins and tools</li> <li>Documentation: Include docstrings for all methods and classes</li> <li>Error Handling: Implement proper error handling in tools</li> <li>Security: Validate inputs and use appropriate permissions</li> <li>Testing: Write tests for your plugin functionality</li> </ul>"},{"location":"plugins/plugin-development/#testing-plugins","title":"Testing Plugins","text":"<p>Create a test file for your plugin:</p> <pre><code># test_myplugin.py\ndef test_hello_world_tool():\n    tool = HelloWorldTool()\n    result = tool.run(\"Test\")\n    assert \"Hello, Test!\" in result\n</code></pre>"},{"location":"plugins/plugin-development/#distribution","title":"Distribution","text":"<p>To share your plugin:</p> <ol> <li>Package it as a Git repository</li> <li>Include documentation</li> <li>Add to the official plugins repository or share independently</li> </ol>"},{"location":"plugins/plugin-development/#advanced-features","title":"Advanced Features","text":""},{"location":"plugins/plugin-development/#plugin-resources","title":"Plugin Resources","text":"<p>Plugins can explicitly declare the resources they provide:</p> <pre><code>def get_resources(self) -&gt; List[PluginResource]:\n    return [\n        PluginResource(\n            name=\"hello_world\",\n            type=\"tool\",\n            description=\"Says hello to someone\"\n        )\n    ]\n</code></pre>"},{"location":"plugins/plugin-development/#dependency-management","title":"Dependency Management","text":"<p>Specify dependencies in the metadata:</p> <pre><code>def get_metadata(self) -&gt; PluginMetadata:\n    return PluginMetadata(\n        name=\"myplugin\",\n        version=\"1.0.0\",\n        description=\"Plugin with dependencies\",\n        author=\"You\",\n        dependencies=[\"requests&gt;=2.25.0\", \"pydantic\"]\n    )\n</code></pre> <p>This comprehensive guide covers the essentials of plugin development, enabling you to create powerful extensions for the Janito system.</p>"},{"location":"plugins/plugin-resources/","title":"Plugin Resources Overview","text":""},{"location":"plugins/plugin-resources/#introduction","title":"Introduction","text":"<p>This document details the resources provided by each built-in plugin in the Janito system. Plugins contribute various capabilities to extend the functionality of the core system, organized by functional domains.</p>"},{"location":"plugins/plugin-resources/#resource-types","title":"Resource Types","text":"<p>Plugins primarily provide tools that enable specific operations. Each tool is a self-contained function that performs a particular task, with defined inputs, outputs, and security permissions.</p>"},{"location":"plugins/plugin-resources/#plugin-resource-summary","title":"Plugin Resource Summary","text":""},{"location":"plugins/plugin-resources/#file-manager-plugin-corefilemanager","title":"File Manager Plugin (<code>core.filemanager</code>)","text":"<p>Provides essential file and directory operations:</p> <ul> <li>File Operations: create, read, update, delete files</li> <li>Directory Management: create, remove directories (recursive)</li> <li>File Search: find files by pattern, respecting .gitignore</li> <li>Text Replacement: find and replace text in files</li> <li>Syntax Validation: validate syntax of various file types</li> </ul>"},{"location":"plugins/plugin-resources/#code-analyzer-plugin-corecodeanalyzer","title":"Code Analyzer Plugin (<code>core.codeanalyzer</code>)","text":"<p>Provides code structure analysis and searching:</p> <ul> <li>File Outlining: extract classes, functions, methods from files</li> <li>Outline Searching: search for structural elements in code</li> <li>Text Searching: full-text search across files with regex support</li> </ul>"},{"location":"plugins/plugin-resources/#system-tools-plugin-coresystem","title":"System Tools Plugin (<code>core.system</code>)","text":"<p>Provides system-level operations:</p> <ul> <li>Command Execution: run PowerShell commands on Windows</li> </ul>"},{"location":"plugins/plugin-resources/#web-tools-plugin-webwebtools","title":"Web Tools Plugin (<code>web.webtools</code>)","text":"<p>Provides web interaction capabilities:</p> <ul> <li>Web Scraping: fetch content from URLs</li> <li>Browser Integration: open URLs and HTML files in default browser</li> </ul>"},{"location":"plugins/plugin-resources/#python-development-plugin-devpythondev","title":"Python Development Plugin (<code>dev.pythondev</code>)","text":"<p>Provides Python execution tools:</p> <ul> <li>Code Execution: run Python code via stdin</li> <li>Command Execution: execute Python with -c flag</li> <li>Script Running: execute Python script files</li> </ul>"},{"location":"plugins/plugin-resources/#visualization-plugin-devvisualization","title":"Visualization Plugin (<code>dev.visualization</code>)","text":"<p>Provides data visualization:</p> <ul> <li>Chart Rendering: display bar, line, pie charts and tables in terminal</li> </ul>"},{"location":"plugins/plugin-resources/#user-interface-plugin-uiuserinterface","title":"User Interface Plugin (<code>ui.userinterface</code>)","text":"<p>Provides user interaction:</p> <ul> <li>User Input: prompt users for input and clarification</li> </ul>"},{"location":"plugins/plugin-resources/#resource-contribution","title":"Resource Contribution","text":"<p>Each plugin contributes resources that enable specific workflows:</p> <ul> <li>File Manager: enables code editing, project organization, and file manipulation</li> <li>Code Analyzer: supports code navigation, refactoring, and understanding</li> <li>System Tools: allows system administration and environment inspection</li> <li>Web Tools: facilitates research, documentation, and online data collection</li> <li>Python Development: supports development, testing, and automation</li> <li>Visualization: enhances data analysis and reporting</li> <li>User Interface: enables interactive, human-guided workflows</li> </ul> <p>These resources work together to create a comprehensive development environment that combines AI assistance with powerful tooling.</p>"},{"location":"plugins/publishing/","title":"Publishing Plugins","text":""},{"location":"plugins/publishing/#overview","title":"Overview","text":"<p>This guide explains how to publish and share your plugins with the Janito community. Publishing your plugins allows others to benefit from your work and contributes to the ecosystem.</p>"},{"location":"plugins/publishing/#preparation","title":"Preparation","text":"<p>Before publishing, ensure your plugin is ready for distribution:</p>"},{"location":"plugins/publishing/#code-quality","title":"Code Quality","text":"<ul> <li>Testing: Include comprehensive tests in a <code>tests/</code> directory</li> <li>Documentation: Provide clear documentation in your plugin directory</li> <li>Code Style: Follow PEP 8 and project coding standards</li> <li>Error Handling: Implement robust error handling</li> </ul>"},{"location":"plugins/publishing/#metadata","title":"Metadata","text":"<p>Ensure your plugin metadata is complete and accurate:</p> <pre><code>def get_metadata(self) -&gt; PluginMetadata:\n    return PluginMetadata(\n        name=\"myplugin\",                    # Unique, descriptive name\n        version=\"1.0.0\",                   # Follow semantic versioning\n        description=\"A useful plugin\",     # Clear, concise description\n        author=\"Your Name\",                # Your name or organization\n        license=\"MIT\",                     # Choose an appropriate license\n        homepage=\"https://github.com/yourusername/myplugin\",  # Project URL\n        dependencies=[\"requests&gt;=2.25.0\"]  # List dependencies\n    )\n</code></pre>"},{"location":"plugins/publishing/#configuration","title":"Configuration","text":"<p>Provide a clear configuration schema:</p> <pre><code>def get_config_schema(self) -&gt; Dict[str, Any]:\n    return {\n        \"type\": \"object\",\n        \"properties\": {\n            \"api_key\": {\n                \"type\": \"string\",\n                \"description\": \"Your API key for the service\",\n                \"minLength\": 32\n            }\n        },\n        \"required\": [\"api_key\"]\n    }\n</code></pre>"},{"location":"plugins/publishing/#publishing-options","title":"Publishing Options","text":""},{"location":"plugins/publishing/#option-1-official-plugins-repository","title":"Option 1: Official Plugins Repository","text":"<p>The recommended way to publish plugins is to contribute to the official repository:</p> <ol> <li>Fork the Repository: Fork <code>https://github.com/ikignosis/janito-plugins</code></li> <li>Add Your Plugin: Create a directory for your plugin in the appropriate category</li> <li>Submit Pull Request: Submit a PR with your plugin</li> </ol> <pre><code>janito-plugins/\n\u251c\u2500\u2500 core/           # Core functionality plugins\n\u251c\u2500\u2500 dev/            # Development tools\n\u251c\u2500\u2500 web/            # Web-related plugins\n\u251c\u2500\u2500 ui/             # User interface plugins\n\u2514\u2500\u2500 community/      # Community-contributed plugins\n    \u2514\u2500\u2500 yourplugin/ # Your plugin directory\n</code></pre>"},{"location":"plugins/publishing/#option-2-personal-repository","title":"Option 2: Personal Repository","text":"<p>Publish your plugin in your own GitHub repository:</p> <ol> <li>Create Repository: Create a new repository (e.g., <code>janito-myplugin</code>)</li> <li>Organize Structure:</li> </ol> <pre><code>janito-myplugin/\n\u251c\u2500\u2500 plugins/\n\u2502   \u2514\u2500\u2500 myplugin/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 tools/\n\u2502           \u2514\u2500\u2500 mytool.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_myplugin.py\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 README.md\n</code></pre> <ol> <li>Add Installation Instructions:</li> </ol> <pre><code>## Installation\n\n1. Add to your `janito.json`:\n\n```json\n{\n  \"plugins\": {\n    \"repository\": {\n      \"url\": \"https://github.com/yourusername/janito-myplugin.git\"\n    }\n  }\n}\n</code></pre> <pre><code>### Option 3: PyPI Package\n\nPackage your plugin as a Python package:\n\n1. **Create setup.py**:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"janito-myplugin\",\n    version=\"1.0.0\",\n    description=\"My Janito plugin\",\n    packages=find_packages(),\n    install_requires=[\n        \"janito&gt;=2.0.0\",\n        \"requests&gt;=2.25.0\"\n    ],\n    entry_points={\n        \"janito.plugins\": [\n            \"myplugin = plugins.myplugin:PLUGIN_CLASS\"\n        ]\n    }\n)\n</code></pre> <ol> <li>Publish to PyPI:</li> </ol> <pre><code># Build the package\npython setup.py sdist bdist_wheel\n\n# Upload to PyPI\nuv pip install twine\ntwine upload dist/*\n</code></pre> <ol> <li>Installation:</li> </ol> <pre><code>uv pip install janito-myplugin\n</code></pre>"},{"location":"plugins/publishing/#repository-structure","title":"Repository Structure","text":"<p>When publishing, follow this recommended structure:</p> <pre><code>myplugin/\n\u251c\u2500\u2500 plugins/\n\u2502   \u2514\u2500\u2500 myplugin/\n\u2502       \u251c\u2500\u2500 __init__.py           # Plugin interface\n\u2502       \u2514\u2500\u2500 tools/\n\u2502           \u2514\u2500\u2500 *.py              # Tool implementations\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 README.md               # Plugin documentation\n\u2502   \u2514\u2500\u2500 examples.md               # Usage examples\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_*.py               # Test files\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 test.yml            # CI/CD configuration\n\u251c\u2500\u2500 pyproject.toml              # Modern Python packaging\n\u251c\u2500\u2500 README.md                   # Project overview\n\u2514\u2500\u2500 LICENSE                     # License file\n</code></pre>"},{"location":"plugins/publishing/#documentation-requirements","title":"Documentation Requirements","text":"<p>Include comprehensive documentation:</p>"},{"location":"plugins/publishing/#readmemd","title":"README.md","text":"<pre><code># MyPlugin\n\n## Description\n\nA brief description of what your plugin does and why it's useful.\n\n## Features\n\n- Feature 1\n- Feature 2\n- Feature 3\n\n## Installation\n\nInstructions for installing and enabling the plugin.\n\n## Usage\n\nExamples of how to use the plugin's tools and commands.\n\n## Configuration\n\nDetails about configuration options and their defaults.\n\n## License\n\nThe license under which the plugin is distributed.\n</code></pre>"},{"location":"plugins/publishing/#usage-examples","title":"Usage Examples","text":"<p>Provide clear examples in your documentation:</p> <pre><code>{\n  \"tool\": \"mytool\",\n  \"parameter\": \"value\"\n}\n</code></pre>"},{"location":"plugins/publishing/#versioning","title":"Versioning","text":"<p>Follow semantic versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Incompatible API changes</li> <li>MINOR: Backward-compatible functionality additions</li> <li>PATCH: Backward-compatible bug fixes</li> </ul> <p>Update your version in both the code and documentation when releasing new versions.</p>"},{"location":"plugins/publishing/#community-guidelines","title":"Community Guidelines","text":"<p>When contributing to the official repository:</p> <ul> <li>Code Review: Be open to feedback and suggestions</li> <li>Responsiveness: Respond to issues and PRs in a timely manner</li> <li>Maintenance: Keep your plugin updated and compatible</li> <li>Support: Provide reasonable support for users</li> </ul>"},{"location":"plugins/publishing/#promotion","title":"Promotion","text":"<p>Once published, promote your plugin:</p> <ul> <li>Social Media: Share on relevant platforms</li> <li>Forums: Post in developer communities</li> <li>Documentation: Add to the official plugins list</li> <li>Showcase: Include in plugin showcases</li> </ul> <p>Publishing your plugins helps grow the Janito ecosystem and benefits the entire community.</p>"},{"location":"plugins/remote-plugins/","title":"Remote Plugins","text":""},{"location":"plugins/remote-plugins/#overview","title":"Overview","text":"<p>Remote plugins allow you to load functionality from external repositories, extending Janito's capabilities without local installation. This feature enables access to community-developed tools and keeps your system up-to-date with the latest features.</p>"},{"location":"plugins/remote-plugins/#remote-plugin-sources","title":"Remote Plugin Sources","text":"<p>By default, Janito supports loading plugins from the official repository:</p> <ul> <li>GitHub Repository: <code>https://github.com/ikignosis/janito-plugins.git</code></li> </ul>"},{"location":"plugins/remote-plugins/#configuration","title":"Configuration","text":"<p>To enable remote plugins, add the repository configuration to your <code>janito.json</code>:</p> <pre><code>{\n  \"plugins\": {\n    \"repository\": {\n      \"url\": \"https://github.com/ikignosis/janito-plugins.git\",\n      \"branch\": \"main\",\n      \"auto_update\": true\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/remote-plugins/#configuration-options","title":"Configuration Options","text":"<ul> <li>url: The Git repository URL containing the plugins</li> <li>branch: The branch to use (default: \"main\")</li> <li>auto_update: Whether to automatically check for updates (default: true)</li> <li>verify_ssl: Whether to verify SSL certificates (default: true)</li> </ul>"},{"location":"plugins/remote-plugins/#plugin-discovery","title":"Plugin Discovery","text":"<p>Remote plugins are discovered automatically when the system starts. The discovery process:</p> <ol> <li>Clones or updates the remote repository</li> <li>Scans for plugin definitions in the repository</li> <li>Validates plugin metadata and interfaces</li> <li>Registers available plugins</li> </ol>"},{"location":"plugins/remote-plugins/#usage","title":"Usage","text":"<p>Once configured, remote plugins can be enabled like local plugins:</p> <pre><code>{\n  \"plugins\": {\n    \"load\": {\n      \"remote.example-plugin\": true,\n      \"remote.advanced-tools\": true\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/remote-plugins/#security","title":"Security","text":"<p>Remote plugins include several security features:</p> <ul> <li>Source Verification: Repository URLs are validated</li> <li>Sandboxing: Remote plugins run in a restricted environment</li> <li>User Confirmation: First-time use requires explicit approval</li> <li>Signature Verification: Optional GPG signature checking for plugin integrity</li> </ul>"},{"location":"plugins/remote-plugins/#update-management","title":"Update Management","text":"<p>Remote plugins can be updated manually or automatically:</p>"},{"location":"plugins/remote-plugins/#manual-update","title":"Manual Update","text":"<pre><code>janito --update-remote-plugins\n</code></pre>"},{"location":"plugins/remote-plugins/#list-available-plugins","title":"List Available Plugins","text":"<pre><code>janito --list-remote-plugins\n</code></pre>"},{"location":"plugins/remote-plugins/#benefits","title":"Benefits","text":"<ul> <li>Easy Access: Use community plugins without manual installation</li> <li>Automatic Updates: Keep plugins up-to-date with the latest features</li> <li>Version Control: Plugins are managed through Git for reliability</li> <li>Community Sharing: Share your own plugins with the community</li> </ul>"},{"location":"plugins/remote-plugins/#limitations","title":"Limitations","text":"<ul> <li>Network Dependency: Requires internet connection for initial setup and updates</li> <li>Security Review: Always review remote plugin code before use</li> <li>Performance: Slight delay during startup for repository synchronization</li> </ul> <p>Remote plugins extend Janito's functionality while maintaining security and ease of use.</p>"},{"location":"plugins/testing/","title":"Testing Plugins","text":""},{"location":"plugins/testing/#overview","title":"Overview","text":"<p>This guide explains how to test plugins in the Janito system. Comprehensive testing ensures that plugins work correctly and reliably in various scenarios.</p>"},{"location":"plugins/testing/#test-structure","title":"Test Structure","text":"<p>Tests should be organized in the <code>tests/</code> directory with a structure that mirrors the plugin organization:</p> <pre><code>tests/\n\u2514\u2500\u2500 plugins/\n    \u2514\u2500\u2500 myplugin/\n        \u2514\u2500\u2500 test_myplugin.py\n</code></pre>"},{"location":"plugins/testing/#basic-test-example","title":"Basic Test Example","text":"<pre><code># tests/plugins/myplugin/test_myplugin.py\ndef test_hello_world_tool():\n    \"\"\"Test the HelloWorldTool functionality.\"\"\"\n    from plugins.myplugin.tools.hello_world import HelloWorldTool\n\n    tool = HelloWorldTool()\n    result = tool.run(name=\"Test\")\n    assert \"Hello, Test!\" in result\n\ndef test_hello_world_default_name():\n    \"\"\"Test HelloWorldTool with default name.\"\"\"\n    from plugins.myplugin.tools.hello_world import HelloWorldTool\n\n    tool = HelloWorldTool()\n    result = tool.run()\n    assert \"Hello, World!\" in result\n</code></pre>"},{"location":"plugins/testing/#testing-plugin-metadata","title":"Testing Plugin Metadata","text":"<pre><code>def test_plugin_metadata():\n    \"\"\"Test that plugin metadata is correctly defined.\"\"\"\n    from plugins.myplugin.plugin import MyPlugin\n\n    plugin = MyPlugin()\n    metadata = plugin.get_metadata()\n\n    assert metadata.name == \"myplugin\"\n    assert metadata.version == \"1.0.0\"\n    assert \"description\" in metadata.description\n    assert \"author\" in metadata.author\n</code></pre>"},{"location":"plugins/testing/#testing-tool-permissions","title":"Testing Tool Permissions","text":"<pre><code>def test_tool_permissions():\n    \"\"\"Test that tool permissions are correctly set.\"\"\"\n    from plugins.myplugin.tools.hello_world import HelloWorldTool\n\n    tool = HelloWorldTool()\n\n    # Check that the tool has the expected permissions\n    assert tool.permissions.read == True\n    assert tool.permissions.write == False\n    assert tool.permissions.execute == True\n</code></pre>"},{"location":"plugins/testing/#testing-configuration","title":"Testing Configuration","text":"<pre><code>def test_plugin_config_schema():\n    \"\"\"Test that the plugin configuration schema is valid.\"\"\"\n    from plugins.myplugin.plugin import MyPlugin\n    import jsonschema\n\n    plugin = MyPlugin()\n    schema = plugin.get_config_schema()\n\n    # Test that the schema is valid JSON Schema\n    assert \"type\" in schema\n    assert schema[\"type\"] == \"object\"\n\n    # Test that required properties are defined\n    if \"required\" in schema:\n        for prop in schema[\"required\"]:\n            assert prop in schema[\"properties\"]\n\ndef test_config_validation():\n    \"\"\"Test configuration validation.\"\"\"\n    from plugins.myplugin.plugin import MyPlugin\n\n    plugin = MyPlugin()\n\n    # Test valid configuration\n    valid_config = {\"api_key\": \"test1234567890\"}\n    assert plugin.validate_config(valid_config) == True\n\n    # Test invalid configuration\n    invalid_config = {\"wrong_key\": \"value\"}\n    assert plugin.validate_config(invalid_config) == False\n</code></pre>"},{"location":"plugins/testing/#testing-commands","title":"Testing Commands","text":"<pre><code>def test_cli_commands():\n    \"\"\"Test that CLI commands are properly registered.\"\"\"\n    from plugins.myplugin.plugin import MyPlugin\n\n    plugin = MyPlugin()\n    commands = plugin.get_commands()\n\n    assert \"mycommand\" in commands\n    assert callable(commands[\"mycommand\"])\n</code></pre>"},{"location":"plugins/testing/#integration-testing","title":"Integration Testing","text":"<pre><code>def test_plugin_integration():\n    \"\"\"Test the complete plugin integration.\"\"\"\n    from janito.plugins.manager import PluginManager\n    from janito.config import Config\n\n    # Create a test config\n    config = Config()\n    config.set(\"plugins.load.myplugin\", True)\n\n    # Initialize plugin manager\n    manager = PluginManager(config)\n    manager.load_plugins()\n\n    # Check that the plugin was loaded\n    assert \"myplugin\" in manager.get_loaded_plugins()\n\n    # Check that tools are registered\n    tools = manager.get_all_tools()\n    assert \"hello_world\" in [tool.tool_name for tool in tools]\n</code></pre>"},{"location":"plugins/testing/#best-practices","title":"Best Practices","text":""},{"location":"plugins/testing/#test-coverage","title":"Test Coverage","text":"<ul> <li>Unit Tests: Test individual tools and methods</li> <li>Integration Tests: Test plugin loading and registration</li> <li>Edge Cases: Test error conditions and invalid inputs</li> <li>Performance: Test with large inputs and edge cases</li> </ul>"},{"location":"plugins/testing/#mocking-external-dependencies","title":"Mocking External Dependencies","text":"<pre><code>from unittest.mock import patch, Mock\ndef test_weather_tool_with_mock():\n    \"\"\"Test weather tool with mocked API call.\"\"\"\n    from plugins.weather.tools.weather import WeatherTool\n\n    # Mock the requests.get method\n    with patch('requests.get') as mock_get:\n        # Configure the mock response\n        mock_response = Mock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\n            \"main\": {\"temp\": 20},\n            \"weather\": [{\"description\": \"clear sky\"}]\n        }\n        mock_get.return_value = mock_response\n\n        # Create and test the tool\n        tool = WeatherTool()\n        # Set the API key (normally from config)\n        tool.api_key = \"test_key\"\n        result = tool.run(city=\"London\")\n\n        # Verify the result\n        assert \"20\u00b0C\" in result\n        assert \"clear sky\" in result\n\n        # Verify the mock was called correctly\n        mock_get.assert_called_once()\n</code></pre>"},{"location":"plugins/testing/#testing-lifecycle-methods","title":"Testing Lifecycle Methods","text":"<pre><code>def test_plugin_lifecycle():\n    \"\"\"Test plugin initialization and cleanup.\"\"\"\n    from plugins.myplugin.plugin import MyPlugin\n\n    plugin = MyPlugin()\n\n    # Test initialization\n    plugin.initialize()\n    # Add assertions for expected initialization behavior\n\n    # Test cleanup\n    plugin.cleanup()\n    # Add assertions for expected cleanup behavior\n</code></pre>"},{"location":"plugins/testing/#running-tests","title":"Running Tests","text":"<p>Run tests using pytest:</p> <pre><code># Run all plugin tests\npytest tests/plugins/\n\n# Run tests for a specific plugin\npytest tests/plugins/myplugin/\n\n# Run with coverage report\npytest tests/plugins/ --cov=plugins --cov-report=html\n</code></pre>"},{"location":"plugins/testing/#continuous-integration","title":"Continuous Integration","text":"<p>Include plugin tests in your CI/CD pipeline:</p> <pre><code># .github/workflows/test.yml\nname: Test Plugins\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.12'\n\n    - name: Install dependencies\n      run: |\n        uv pip install -r requirements.txt\n        uv pip install pytest pytest-cov\n\n    - name: Run tests\n      run: |\n        pytest tests/plugins/ --cov=plugins --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v1\n</code></pre> <p>Comprehensive testing ensures that your plugins are reliable, secure, and maintainable.</p>"},{"location":"plugins/built-in-plugins/codeanalyzer/","title":"Code Analyzer Plugin","text":""},{"location":"plugins/built-in-plugins/codeanalyzer/#overview","title":"Overview","text":"<p>The Code Analyzer plugin provides tools for understanding and searching code structure. This plugin enables developers to analyze codebases, navigate file structures, and perform advanced text searches across projects.</p>"},{"location":"plugins/built-in-plugins/codeanalyzer/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/codeanalyzer/#tools","title":"Tools","text":"Tool Name Function Description <code>get_file_outline</code> Extract file structure Analyzes a file to identify classes, functions, methods, and other structural elements <code>search_outline</code> Search within file outlines Searches for specific structural elements (classes, functions) within file outlines <code>search_text</code> Full-text search across files Performs text searches across multiple files with support for regex and case sensitivity"},{"location":"plugins/built-in-plugins/codeanalyzer/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/codeanalyzer/#getting-file-structure","title":"Getting File Structure","text":"<pre><code>{\n  \"tool\": \"get_file_outline\",\n  \"path\": \"src/main.py\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/codeanalyzer/#searching-for-functions","title":"Searching for Functions","text":"<pre><code>{\n  \"tool\": \"search_outline\",\n  \"path\": \"src/\",\n  \"query\": \"function:calculate\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/codeanalyzer/#finding-code-patterns","title":"Finding Code Patterns","text":"<pre><code>{\n  \"tool\": \"search_text\",\n  \"paths\": \".\",\n  \"query\": \"import requests\",\n  \"use_regex\": false\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/codeanalyzer/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration and uses default search parameters.</p>"},{"location":"plugins/built-in-plugins/codeanalyzer/#security-considerations","title":"Security Considerations","text":"<ul> <li>File access is limited to the project directory and subdirectories</li> <li>Respects .gitignore rules to avoid searching in ignored files/directories</li> <li>Large file analysis is rate-limited to prevent performance issues</li> </ul>"},{"location":"plugins/built-in-plugins/codeanalyzer/#integration","title":"Integration","text":"<p>The Code Analyzer plugin integrates with the code intelligence system to provide:</p> <ul> <li>Code navigation capabilities</li> <li>Structural understanding for AI-assisted coding</li> <li>Pattern recognition for code refactoring suggestions</li> <li>Dependency analysis through import searching</li> </ul> <p>This enables more sophisticated code understanding and manipulation capabilities within the Janito ecosystem.</p>"},{"location":"plugins/built-in-plugins/filemanager/","title":"File Manager Plugin","text":""},{"location":"plugins/built-in-plugins/filemanager/#overview","title":"Overview","text":"<p>The File Manager plugin provides essential file and directory operations for managing project files. This plugin enables basic file system operations that are crucial for code editing and project management.</p>"},{"location":"plugins/built-in-plugins/filemanager/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/filemanager/#tools","title":"Tools","text":"Tool Name Function Description <code>create_file</code> Create new files with content Creates a new file at the specified path with optional content and overwrite capability <code>read_files</code> Read multiple files at once Reads the contents of multiple files and returns them as a concatenated string <code>view_file</code> Read specific portions of files Reads specific lines or the entire content of a file with optional line range <code>replace_text_in_file</code> Find and replace text in files Searches for exact text in a file and replaces it with new text (single or all occurrences) <code>validate_file_syntax</code> Check file syntax Validates the syntax of various file types (Python, Markdown, JSON, etc.) <code>create_directory</code> Create new directories Creates a new directory at the specified path. If the directory already exists, provides a summary of its contents including file/subdirectory counts and examples <code>remove_directory</code> Remove directories Deletes directories, with optional recursive removal of non-empty directories <code>remove_file</code> Delete files Removes a file at the specified path <code>copy_file</code> Copy files or directories Copies one or more files/directories to a target location <code>move_file</code> Move or rename files/directories Moves or renames files and directories <code>find_files</code> Search for files by pattern Finds files matching a pattern in specified directories, respecting .gitignore"},{"location":"plugins/built-in-plugins/filemanager/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/filemanager/#creating-a-new-file","title":"Creating a New File","text":"<p>The <code>create_file</code> tool provides comprehensive file creation with built-in safety features and automatic validation.</p> <p>Basic Usage:</p> <pre><code>{\n  \"tool\": \"create_file\",\n  \"path\": \"src/hello.py\",\n  \"content\": \"print('Hello, World!')\"\n}\n</code></pre> <p>Advanced Examples:</p> <p>Create nested directory structure:</p> <pre><code>{\n  \"tool\": \"create_file\",\n  \"path\": \"src/components/Button/index.js\",\n  \"content\": \"export default function Button() { return &lt;button&gt;Click me&lt;/button&gt;; }\"\n}\n</code></pre> <p>Create configuration file with environment variables:</p> <pre><code>{\n  \"tool\": \"create_file\",\n  \"path\": \"$HOME/.myapp/config.json\",\n  \"content\": \"{\\n  \\\"api_url\\\": \\\"https://api.example.com\\\",\\n  \\\"timeout\\\": 30\\n}\"\n}\n</code></pre> <p>Overwrite existing file (use with caution):</p> <pre><code>{\n  \"tool\": \"create_file\",\n  \"path\": \"README.md\",\n  \"content\": \"# My Project\\n\\nUpdated documentation...\",\n  \"overwrite\": true\n}\n</code></pre> <p>Safety Features:</p> <ul> <li>Overwrite Protection: Prevents accidental file overwrites by default</li> <li>Syntax Validation: Automatically checks Python, JavaScript, JSON, YAML, and other common file types</li> <li>Path Expansion: Supports <code>~</code> for home directory and environment variables like <code>$HOME</code></li> <li>Directory Creation: Automatically creates parent directories as needed</li> <li>Encoding Safety: Uses UTF-8 encoding with proper error handling for international characters</li> <li>Loop Protection: Prevents excessive file creation calls (max 5 per 10 seconds per file)</li> </ul> <p>Return Values:</p> <ul> <li>Success: Includes line count and syntax validation results</li> <li>Failure: Provides detailed error messages and existing content preview when overwrite is blocked</li> <li>Validation: Shows syntax check results for supported file types</li> </ul>"},{"location":"plugins/built-in-plugins/filemanager/#reading-multiple-files","title":"Reading Multiple Files","text":"<pre><code>{\n  \"tool\": \"read_files\",\n  \"paths\": [\"src/main.py\", \"src/utils.py\"]\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/filemanager/#finding-python-files","title":"Finding Python Files","text":"<pre><code>{\n  \"tool\": \"find_files\",\n  \"paths\": \".\",\n  \"pattern\": \"*.py\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/filemanager/#creating-a-new-directory","title":"Creating a New Directory","text":"<p>The <code>create_directory</code> tool creates new directories with enhanced feedback when directories already exist.</p> <p>Basic Usage:</p> <pre><code>{\n  \"tool\": \"create_directory\",\n  \"path\": \"src/components\"\n}\n</code></pre> <p>Enhanced Feedback for Existing Directories: When attempting to create a directory that already exists, the tool now provides a detailed summary of the directory's contents:</p> <pre><code>\u2757 Cannot create directory: 'src/components' already exists.\nContains: 3 files, 2 subdirectories.\nExamples: \ud83d\udcc4 index.js, \ud83d\udcc4 styles.css, \ud83d\udcc1 utils (and 2 more)\n</code></pre> <p>Content Summary Features:</p> <ul> <li>File and Directory Counts: Shows the total number of files and subdirectories</li> <li>Content Examples: Displays up to 3 items (sorted alphabetically) with visual indicators:</li> <li>\ud83d\udcc1 for directories</li> <li>\ud83d\udcc4 for files</li> <li>Overflow Indicator: Mentions if there are more items than shown</li> <li>Empty Directory Handling: Clearly indicates when a directory is empty</li> <li>Error Handling: Gracefully handles permission issues or other access problems</li> </ul> <p>This enhancement helps users quickly understand what's already in an existing directory without needing to run additional commands.</p>"},{"location":"plugins/built-in-plugins/filemanager/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration and uses the system's default file permissions and access controls.</p>"},{"location":"plugins/built-in-plugins/filemanager/#security-considerations","title":"Security Considerations","text":"<ul> <li>File operations are subject to the user's file system permissions</li> <li>Path validation prevents directory traversal attacks</li> <li>Sensitive file operations require explicit user confirmation in interactive mode</li> </ul>"},{"location":"plugins/built-in-plugins/filemanager/#integration","title":"Integration","text":"<p>The File Manager plugin integrates with the core Janito system to provide file operations that can be used in automation scripts, code generation workflows, and project management tasks.</p>"},{"location":"plugins/built-in-plugins/filemanager/#configuration_1","title":"Configuration","text":"<p>This plugin does not require any specific configuration and uses the system's default file permissions and access controls.</p>"},{"location":"plugins/built-in-plugins/filemanager/#security-considerations_1","title":"Security Considerations","text":"<ul> <li>File operations are subject to the user's file system permissions</li> <li>Path validation prevents directory traversal attacks</li> <li>Sensitive file operations require explicit user confirmation in interactive mode</li> </ul>"},{"location":"plugins/built-in-plugins/filemanager/#integration_1","title":"Integration","text":"<p>The File Manager plugin integrates with the core Janito system to provide file operations that can be used in automation scripts, code generation workflows, and project management tasks.</p>"},{"location":"plugins/built-in-plugins/imagedisplay/","title":"Image Display Plugin (core.imagedisplay)","text":"<p>Display images inline in the terminal using the rich library.</p> <p>Tools provided:</p> <ul> <li>show_image: display a single image</li> <li>show_image_grid: display multiple images in a grid</li> </ul> <p>Dependencies:</p> <ul> <li>rich</li> <li>pillow</li> </ul> <p>Example:</p> <pre><code>janito --tool show_image --path img/tux.png --width 60\n</code></pre>"},{"location":"plugins/built-in-plugins/pythondev/","title":"Python Development Plugin","text":""},{"location":"plugins/built-in-plugins/pythondev/#overview","title":"Overview","text":"<p>The Python Development plugin provides tools for Python code execution and development. This plugin enables running Python code in various ways, supporting development, testing, and automation workflows.</p>"},{"location":"plugins/built-in-plugins/pythondev/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/pythondev/#tools","title":"Tools","text":"Tool Name Function Description <code>python_code_run</code> Execute Python code via stdin Runs Python code by passing it to the interpreter via standard input <code>python_command_run</code> Execute Python with -c flag Executes Python code using the <code>python -c</code> command-line flag <code>python_file_run</code> Run Python script files Executes Python scripts from files with configurable timeout"},{"location":"plugins/built-in-plugins/pythondev/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/pythondev/#running-python-code","title":"Running Python Code","text":"<pre><code>{\n  \"tool\": \"python_code_run\",\n  \"code\": \"print('Hello from Python!')\\nfor i in range(3):\\n    print(f'Iteration {i}')\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/pythondev/#executing-a-one-liner","title":"Executing a One-liner","text":"<pre><code>{\n  \"tool\": \"python_command_run\",\n  \"code\": \"import sys; print(f'Python {sys.version}')\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/pythondev/#running-a-script-file","title":"Running a Script File","text":"<pre><code>{\n  \"tool\": \"python_file_run\",\n  \"path\": \"scripts/data_processor.py\",\n  \"timeout\": 120\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/pythondev/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration. Python execution uses the system's default Python interpreter and environment.</p>"},{"location":"plugins/built-in-plugins/pythondev/#security-considerations","title":"Security Considerations","text":"<ul> <li>Code execution requires explicit user permission</li> <li>All Python operations are sandboxed and monitored</li> <li>Long-running scripts are automatically terminated based on timeout settings</li> <li>Access to system resources is controlled through Python's security model</li> </ul>"},{"location":"plugins/built-in-plugins/pythondev/#integration","title":"Integration","text":"<p>The Python Development plugin integrates with the code execution system to provide:</p> <ul> <li>Interactive Python development environment</li> <li>Automated testing and validation</li> <li>Script-based automation workflows</li> <li>Dynamic code generation and execution</li> </ul> <p>This enables powerful Python-based automation while maintaining security boundaries and user control.</p>"},{"location":"plugins/built-in-plugins/system/","title":"System Tools Plugin","text":""},{"location":"plugins/built-in-plugins/system/#overview","title":"Overview","text":"<p>The System Tools plugin provides access to system-level operations and shell commands. This plugin enables interaction with the operating system, execution of shell commands, and system information retrieval.</p>"},{"location":"plugins/built-in-plugins/system/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/system/#tools","title":"Tools","text":"Tool Name Function Description <code>run_bash_command</code> Execute bash commands Runs bash shell commands on Linux, macOS, and Windows (with bash available) with live output streaming <code>run_powershell_command</code> Execute PowerShell commands Runs PowerShell commands on Windows and cross-platform (PowerShell Core) with configurable timeout and confirmation"},{"location":"plugins/built-in-plugins/system/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/system/#running-bash-commands","title":"Running Bash Commands","text":"<pre><code>{\n  \"tool\": \"run_bash_command\",\n  \"command\": \"ls -la | grep '.py'\",\n  \"timeout\": 30\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/system/#running-powershell-commands","title":"Running PowerShell Commands","text":"<pre><code>{\n  \"tool\": \"run_powershell_command\",\n  \"command\": \"Get-Process | Where-Object {$_.CPU -gt 100}\",\n  \"timeout\": 30\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/system/#checking-directory-contents-bash","title":"Checking Directory Contents (Bash)","text":"<pre><code>{\n  \"tool\": \"run_bash_command\",\n  \"command\": \"find . -name '*.txt' -type f\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/system/#checking-directory-contents-powershell","title":"Checking Directory Contents (PowerShell)","text":"<pre><code>{\n  \"tool\": \"run_powershell_command\",\n  \"command\": \"Get-ChildItem -Path . -Recurse\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/system/#system-information-bash","title":"System Information (Bash)","text":"<pre><code>{\n  \"tool\": \"run_bash_command\",\n  \"command\": \"uname -a &amp;&amp; df -h\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/system/#system-information-powershell","title":"System Information (PowerShell)","text":"<pre><code>{\n  \"tool\": \"run_powershell_command\",\n  \"command\": \"Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/system/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration. The command execution respects the user's system permissions and security policies.</p>"},{"location":"plugins/built-in-plugins/system/#security-considerations","title":"Security Considerations","text":"<ul> <li>Command execution requires explicit user permission</li> <li>Commands are sandboxed and monitored for potentially harmful operations</li> <li>Long-running commands are automatically terminated based on timeout settings</li> <li>Sensitive system commands may require additional authentication</li> </ul>"},{"location":"plugins/built-in-plugins/system/#integration","title":"Integration","text":"<p>The System Tools plugin integrates with the terminal interface to provide:</p> <ul> <li>Direct access to system utilities</li> <li>Automation of system administration tasks</li> <li>Environment inspection for debugging purposes</li> <li>Cross-platform command execution (Bash on Unix-like systems, PowerShell on Windows and cross-platform)</li> </ul> <p>This enables system-level automation while maintaining security boundaries and user control.</p>"},{"location":"plugins/built-in-plugins/userinterface/","title":"User Interface Plugin","text":""},{"location":"plugins/built-in-plugins/userinterface/#overview","title":"Overview","text":"<p>The User Interface plugin provides tools for user interaction and input. This plugin enables communication between the system and the user, allowing for clarification, confirmation, and data collection.</p>"},{"location":"plugins/built-in-plugins/userinterface/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/userinterface/#tools","title":"Tools","text":"Tool Name Function Description <code>ask_user</code> Prompt user for input/clarification Asks the user a question and waits for their response, enabling interactive workflows"},{"location":"plugins/built-in-plugins/userinterface/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/userinterface/#requesting-user-input","title":"Requesting User Input","text":"<pre><code>{\n  \"tool\": \"ask_user\",\n  \"question\": \"What is the name of the new feature you'd like to implement?\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/userinterface/#confirming-actions","title":"Confirming Actions","text":"<pre><code>{\n  \"tool\": \"ask_user\",\n  \"question\": \"Are you sure you want to delete the file 'old_code.py'? This action cannot be undone. (yes/no)\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/userinterface/#gathering-information","title":"Gathering Information","text":"<pre><code>{\n  \"tool\": \"ask_user\",\n  \"question\": \"Please describe the bug you're experiencing, including steps to reproduce it.\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/userinterface/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration. User interaction follows the system's default prompt style and timeout settings.</p>"},{"location":"plugins/built-in-plugins/userinterface/#security-considerations","title":"Security Considerations","text":"<ul> <li>User input is validated and sanitized before use</li> <li>Sensitive operations require explicit confirmation</li> <li>Input timeouts prevent indefinite waiting</li> <li>Malicious input patterns are detected and blocked</li> </ul>"},{"location":"plugins/built-in-plugins/userinterface/#integration","title":"Integration","text":"<p>The User Interface plugin integrates with the conversation system to provide:</p> <ul> <li>Interactive decision-making</li> <li>Clarification of ambiguous requests</li> <li>Collection of user preferences and requirements</li> <li>Confirmation of potentially destructive operations</li> </ul> <p>This enables human-guided AI workflows where the system can ask for clarification when needed, ensuring accurate and safe operation.</p>"},{"location":"plugins/built-in-plugins/visualization/","title":"Visualization Plugin","text":""},{"location":"plugins/built-in-plugins/visualization/#overview","title":"Overview","text":"<p>The Visualization plugin provides data visualization and charting capabilities. This plugin enables the display of data in various visual formats, making it easier to understand and analyze information.</p>"},{"location":"plugins/built-in-plugins/visualization/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/visualization/#tools","title":"Tools","text":"Tool Name Function Description <p>| <code>show_image</code> | Display single image | Shows a single image inline in the terminal using rich | | <code>show_image_grid</code> | Display image grid | Shows multiple images in a grid inline in the terminal |</p>"},{"location":"plugins/built-in-plugins/visualization/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/visualization/#displaying-an-image","title":"Displaying an Image","text":"<pre><code>{\n  \"tool\": \"show_image\",\n  \"path\": \"chart.png\",\n  \"width\": 80,\n  \"preserve_aspect\": true\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/visualization/#creating-an-image-grid","title":"Creating an Image Grid","text":"<pre><code>{\n  \"tool\": \"show_image_grid\",\n  \"paths\": [\"image1.png\", \"image2.png\", \"image3.png\"],\n  \"columns\": 2,\n  \"width\": 40\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/visualization/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration. Image display uses default dimensions and styling.</p>"},{"location":"plugins/built-in-plugins/visualization/#security-considerations","title":"Security Considerations","text":"<ul> <li>Images are displayed client-side with no external dependencies</li> <li>No data is transmitted to external services</li> <li>Large images are resized to prevent performance issues</li> </ul>"},{"location":"plugins/built-in-plugins/visualization/#integration","title":"Integration","text":"<p>The Visualization plugin provides image display capabilities for:</p> <ul> <li>Visual content presentation</li> <li>Multi-image comparisons</li> <li>Documentation with visual elements</li> <li>Terminal-based image viewing</li> </ul> <p>This enables rich visual presentation capabilities within the terminal interface.</p>"},{"location":"plugins/built-in-plugins/webtools/","title":"Web Tools Plugin","text":""},{"location":"plugins/built-in-plugins/webtools/#overview","title":"Overview","text":"<p>The Web Tools plugin provides functionality for web scraping, browsing, and URL operations. This plugin enables interaction with web resources, retrieval of online content, and browser integration.</p>"},{"location":"plugins/built-in-plugins/webtools/#resources-provided","title":"Resources Provided","text":""},{"location":"plugins/built-in-plugins/webtools/#tools","title":"Tools","text":"Tool Name Function Description <code>fetch_url</code> Download web page content Retrieves content from URLs with options for text extraction, search filtering, and timeout control <code>open_url</code> Open URLs in default browser Opens web URLs in the system's default web browser <code>open_html_in_browser</code> Open local HTML files in browser Displays local HTML files in the default web browser for preview and inspection"},{"location":"plugins/built-in-plugins/webtools/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/built-in-plugins/webtools/#fetching-web-content","title":"Fetching Web Content","text":"<pre><code>{\n  \"tool\": \"fetch_url\",\n  \"url\": \"https://example.com\",\n  \"max_length\": 5000,\n  \"timeout\": 10\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/webtools/#opening-a-web-page","title":"Opening a Web Page","text":"<pre><code>{\n  \"tool\": \"open_url\",\n  \"url\": \"https://github.com/janito\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/webtools/#previewing-html-output","title":"Previewing HTML Output","text":"<pre><code>{\n  \"tool\": \"open_html_in_browser\",\n  \"path\": \"output/report.html\"\n}\n</code></pre>"},{"location":"plugins/built-in-plugins/webtools/#configuration","title":"Configuration","text":"<p>This plugin does not require any specific configuration. Network operations use default timeout values and respect robots.txt when possible.</p>"},{"location":"plugins/built-in-plugins/webtools/#security-considerations","title":"Security Considerations","text":"<ul> <li>URL access is subject to the URL whitelist configuration</li> <li>Web scraping is limited to prevent excessive requests</li> <li>Local file access for HTML preview is restricted to project directories</li> <li>Sensitive domains require explicit user approval</li> </ul>"},{"location":"plugins/built-in-plugins/webtools/#integration","title":"Integration","text":"<p>The Web Tools plugin integrates with the data acquisition system to provide:</p> <ul> <li>Research capabilities through web content retrieval</li> <li>Documentation generation with web-based references</li> <li>Real-time data collection from online sources</li> <li>Interactive web content preview</li> </ul> <p>This enables seamless integration between local development and web-based resources while maintaining security controls.</p>"},{"location":"plugins/examples/advanced/","title":"Advanced Plugin Example","text":""},{"location":"plugins/examples/advanced/#overview","title":"Overview","text":"<p>This example demonstrates a sophisticated plugin that provides multiple interconnected tools, custom commands, and advanced configuration. It showcases the full capabilities of the Janito plugin system.</p>"},{"location":"plugins/examples/advanced/#plugin-code","title":"Plugin Code","text":"<pre><code>from janito.plugins.base import Plugin, PluginMetadata, PluginResource\nfrom janito.tools.tool_base import ToolBase, ToolPermissions\nfrom janito.cli.core import Runner\nfrom typing import Dict, Any, List\nimport json\nimport os\n\nclass ProjectManagerTool(ToolBase):\n    tool_name = \"project_create\"\n    permissions = ToolPermissions(read=True, write=True, execute=True)\n\n    def run(self, name: str, template: str = \"basic\", directory: str = \".\") -&gt; str:\n        \"\"\"Create a new project from a template.\"\"\"\n        templates = {\n            \"basic\": {\"files\": [\"README.md\", \"main.py\"]},\n            \"web\": {\"files\": [\"index.html\", \"style.css\", \"script.js\"]},\n            \"python\": {\"files\": [\"__init__.py\", \"main.py\", \"tests/\", \".gitignore\"]}\n        }\n\n        if template not in templates:\n            return f\"Error: Unknown template '{template}'. Available templates: {list(templates.keys())}\"\n\n        project_path = os.path.join(directory, name)\n\n        if os.path.exists(project_path):\n            return f\"Error: Project directory '{project_path}' already exists\"\n\n        try:\n            os.makedirs(project_path)\n\n            # Create files from template\n            for item in templates[template][\"files\"]:\n                item_path = os.path.join(project_path, item)\n                if item.endswith(\"/\"\"\" or os.path.isdir(item):\n                    os.makedirs(item_path, exist_ok=True)\n                else:\n                    with open(item_path, \"w\") as f:\n                        if item == \"README.md\":\n                            f.write(f\"# {name}\\n\\nGenerated project from '{template}' template.\\n\")\n                        elif item == \"main.py\":\n                            f.write(\"# Main application code\\n\")\n\n            return f\"Project '{name}' created successfully at '{project_path}' using '{template}' template.\"\n\n        except Exception as e:\n            return f\"Error creating project: {str(e)}\"\n\nclass ProjectListTool(ToolBase):\n    tool_name = \"project_list\"\n    permissions = ToolPermissions(read=True, write=False, execute=True)\n\n    def run(self, directory: str = \".\") -&gt; str:\n        \"\"\"List projects in a directory.\"\"\"\n        try:\n            projects = []\n            for item in os.listdir(directory):\n                item_path = os.path.join(directory, item)\n                if os.path.isdir(item_path) and os.path.exists(os.path.join(item_path, \"janito.json\")):\n                    projects.append(item)\n\n            if not projects:\n                return f\"No projects found in '{directory}'\"\n\n            return f\"Projects in '{directory}':\\n\" + \"\\n\".join(f\"- {p}\" for p in projects)\n\n        except Exception as e:\n            return f\"Error listing projects: {str(e)}\"\n\nclass ProjectConfigTool(ToolBase):\n    tool_name = \"project_configure\"\n    permissions = ToolPermissions(read=True, write=True, execute=True)\n\n    def run(self, project: str, key: str, value: str, directory: str = \".\") -&gt; str:\n        \"\"\"Configure a project's settings.\"\"\"\n        project_path = os.path.join(directory, project)\n        config_path = os.path.join(project_path, \"janito.json\")\n\n        if not os.path.exists(config_path):\n            return f\"Error: Project '{project}' not found or not a Janito project\"\n\n        try:\n            # Read existing config\n            config = {}\n            if os.path.exists(config_path):\n                with open(config_path, \"r\") as f:\n                    config = json.load(f)\n\n            # Update configuration\n            if \"project\" not in config:\n                config[\"project\"] = {}\n\n            # Handle nested keys (e.g., \"database.host\")\n            keys = key.split(\".\")\n            current = config[\"project\"]\n            for k in keys[:-1]:\n                if k not in current:\n                    current[k] = {}\n                current = current[k]\n\n            # Set the final value (try to parse as JSON, otherwise treat as string)\n            try:\n                parsed_value = json.loads(value)\n                current[keys[-1]] = parsed_value\n            except json.JSONDecodeError:\n                current[keys[-1]] = value\n\n            # Write updated config\n            with open(config_path, \"w\") as f:\n                json.dump(config, f, indent=2)\n\n            return f\"Configuration updated: {key} = {value}\"\n\n        except Exception as e:\n            return f\"Error configuring project: {str(e)}\"\n\nclass AdvancedPlugin(Plugin):\n    def __init__(self):\n        super().__init__()\n        self.project_manager = None\n        self.project_list = None\n        self.project_config = None\n\n    def get_metadata(self) -&gt; PluginMetadata:\n        return PluginMetadata(\n            name=\"advanced\",\n            version=\"1.0.0\",\n            description=\"Advanced project management plugin\",\n            author=\"Janito Team\",\n            license=\"MIT\",\n            homepage=\"https://github.com/janito/plugins/advanced\",\n            dependencies=[]\n        )\n\n    def get_tools(self):\n        return [ProjectManagerTool, ProjectListTool, ProjectConfigTool]\n\n    def get_commands(self) -&gt; Dict[str, Any]:\n        \"\"\"Add custom CLI commands.\"\"\"\n        return {\n            \"project-create\": self._cli_project_create,\n            \"project-list\": self._cli_project_list,\n            \"project-configure\": self._cli_project_configure\n        }\n\n    def _cli_project_create(self, runner: Runner, args: List[str]) -&gt; str:\n        \"\"\"CLI command to create a project.\"\"\"\n        if len(args) &lt; 1:\n            return \"Usage: project-create &lt;name&gt; [template] [directory]\"\n\n        name = args[0]\n        template = args[1] if len(args) &gt; 1 else \"basic\"\n        directory = args[2] if len(args) &gt; 2 else \".\"\n\n        tool = ProjectManagerTool()\n        return tool.run(name, template, directory)\n\n    def _cli_project_list(self, runner: Runner, args: List[str]) -&gt; str:\n        \"\"\"CLI command to list projects.\"\"\"\n        directory = args[0] if args else \".\"\n\n        tool = ProjectListTool()\n        return tool.run(directory)\n\n    def _cli_project_configure(self, runner: Runner, args: List[str]) -&gt; str:\n        \"\"\"CLI command to configure a project.\"\"\"\n        if len(args) &lt; 3:\n            return \"Usage: project-configure &lt;project&gt; &lt;key&gt; &lt;value&gt; [directory]\"\n\n        project = args[0]\n        key = args[1]\n        value = args[2]\n        directory = args[3] if len(args) &gt; 3 else \".\"\n\n        tool = ProjectConfigTool()\n        return tool.run(project, key, value, directory)\n\n    def get_config_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"Return JSON schema for plugin configuration.\"\"\"\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"default_template\": {\n                    \"type\": \"string\",\n                    \"description\": \"Default project template\",\n                    \"enum\": [\"basic\", \"web\", \"python\"],\n                    \"default\": \"basic\"\n                },\n                \"projects_directory\": {\n                    \"type\": \"string\",\n                    \"description\": \"Default directory for projects\",\n                    \"default\": \"./projects\"\n                }\n            }\n        }\n\n    def get_resources(self) -&gt; List[PluginResource]:\n        \"\"\"List all resources provided by this plugin.\"\"\"\n        return [\n            PluginResource(\n                name=\"project_create\",\n                type=\"tool\",\n                description=\"Create new projects from templates\"\n            ),\n            PluginResource(\n                name=\"project_list\",\n                type=\"tool\",\n                description=\"List existing projects\"\n            ),\n            PluginResource(\n                name=\"project_configure\",\n                type=\"tool\",\n                description=\"Configure project settings\"\n            ),\n            PluginResource(\n                name=\"project-create\",\n                type=\"command\",\n                description=\"CLI command to create projects\"\n            ),\n            PluginResource(\n                name=\"project-list\",\n                type=\"command\",\n                description=\"CLI command to list projects\"\n            ),\n            PluginResource(\n                name=\"project-configure\",\n                type=\"command\",\n                description=\"CLI command to configure projects\"\n            ),\n            PluginResource(\n                name=\"advanced_config\",\n                type=\"config\",\n                description=\"Configuration schema for advanced plugin\"\n            )\n        ]\n\n    def initialize(self):\n        \"\"\"Initialize the plugin.\"\"\"\n        self.project_manager = ProjectManagerTool()\n        self.project_list = ProjectListTool()\n        self.project_config = ProjectConfigTool()\n\n        # Apply configuration\n        config = self.get_config()\n        if config:\n            # Store configuration for later use\n            self._config = config\n\n    def cleanup(self):\n        \"\"\"Cleanup resources when plugin is unloaded.\"\"\"\n        self.project_manager = None\n        self.project_list = None\n        self.project_config = None\n\n# Register the plugin\nclass PLUGIN_CLASS(AdvancedPlugin):\n    pass\n</code></pre>"},{"location":"plugins/examples/advanced/#configuration","title":"Configuration","text":"<pre><code>{\n  \"plugins\": {\n    \"load\": {\n      \"advanced\": true\n    },\n    \"config\": {\n      \"advanced\": {\n        \"default_template\": \"python\",\n        \"projects_directory\": \"./my-projects\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/examples/advanced/#usage","title":"Usage","text":""},{"location":"plugins/examples/advanced/#using-tools","title":"Using Tools","text":"<pre><code>{\n  \"tool\": \"project_create\",\n  \"name\": \"my-web-app\",\n  \"template\": \"web\"\n}\n</code></pre> <pre><code>{\n  \"tool\": \"project_configure\",\n  \"project\": \"my-web-app\",\n  \"key\": \"database.host\",\n  \"value\": \"localhost\"\n}\n</code></pre>"},{"location":"plugins/examples/advanced/#using-cli-commands","title":"Using CLI Commands","text":"<pre><code>janito project-create my-api python ./projects\njanito project-list ./projects\njanito project-configure my-api database.port \"5432\"\n</code></pre>"},{"location":"plugins/examples/advanced/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ul> <li>Multiple Tools: A plugin providing several related tools</li> <li>Custom Commands: Adding CLI commands that integrate with the main interface</li> <li>Complex Configuration: Handling nested configuration keys and JSON values</li> <li>File System Operations: Creating directories and files</li> <li>Resource Declaration: Explicitly defining all provided resources (tools, commands, config)</li> <li>Plugin State: Maintaining state between method calls</li> <li>Error Handling: Comprehensive error handling for various failure modes</li> <li>CLI Integration: Creating user-friendly command-line interfaces</li> </ul> <p>This advanced example demonstrates the full potential of the plugin system, showing how to create sophisticated extensions that deeply integrate with the Janito ecosystem.</p>"},{"location":"plugins/examples/basic/","title":"Basic Plugin Example","text":""},{"location":"plugins/examples/basic/#overview","title":"Overview","text":"<p>This example demonstrates a simple plugin that provides basic greeting functionality. It illustrates the fundamental concepts of plugin development in Janito.</p>"},{"location":"plugins/examples/basic/#plugin-code","title":"Plugin Code","text":"<pre><code>from janito.plugins.base import Plugin, PluginMetadata\nfrom janito.tools.tool_base import ToolBase, ToolPermissions\n\n# Define a simple greeting tool\nclass GreetingTool(ToolBase):\n    tool_name = \"greet\"\n    permissions = ToolPermissions(read=True, write=False, execute=True)\n\n    def run(self, name: str = \"World\", style: str = \"friendly\") -&gt; str:\n        \"\"\"Generate a greeting message with optional style.\"\"\"\n        styles = {\n            \"friendly\": f\"Hello, {name}! \ud83d\udc4b\",\n            \"formal\": f\"Good day, {name}.\",\n            \"enthusiastic\": f\"Hey {name}! Great to see you! \ud83c\udf89\"\n        }\n        return styles.get(style, styles[\"friendly\"])\n\n# Define the plugin\nclass BasicPlugin(Plugin):\n    def get_metadata(self) -&gt; PluginMetadata:\n        return PluginMetadata(\n            name=\"basic\",\n            version=\"1.0.0\",\n            description=\"A basic greeting plugin\",\n            author=\"Janito Team\",\n            license=\"MIT\"\n        )\n\n    def get_tools(self):\n        return [GreetingTool]\n\n# Register the plugin\nclass PLUGIN_CLASS(BasicPlugin):\n    pass\n</code></pre>"},{"location":"plugins/examples/basic/#configuration","title":"Configuration","text":"<p>To enable this plugin, add it to your <code>janito.json</code>:</p> <pre><code>{\n  \"plugins\": {\n    \"load\": {\n      \"basic\": true\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/examples/basic/#usage","title":"Usage","text":"<p>Once enabled, you can use the greet tool:</p> <pre><code>{\n  \"tool\": \"greet\",\n  \"name\": \"Alice\",\n  \"style\": \"enthusiastic\"\n}\n</code></pre> <p>Expected output: \"Hey Alice! Great to see you! \ud83c\udf89\"</p>"},{"location":"plugins/examples/basic/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ul> <li>Plugin Class: Inheriting from <code>Plugin</code> base class</li> <li>Tool Definition: Creating a tool by extending <code>ToolBase</code></li> <li>Metadata: Providing plugin information through <code>get_metadata()</code></li> <li>Tool Registration: Returning tools from <code>get_tools()</code></li> <li>Permissions: Setting appropriate tool permissions</li> </ul> <p>This basic example provides a foundation for more complex plugin development, showing the essential structure and components needed for a working plugin.</p>"},{"location":"plugins/examples/intermediate/","title":"Intermediate Plugin Example","text":""},{"location":"plugins/examples/intermediate/#overview","title":"Overview","text":"<p>This example demonstrates a more advanced plugin that integrates with external APIs and provides configuration options. It shows how to create plugins with real-world functionality.</p>"},{"location":"plugins/examples/intermediate/#plugin-code","title":"Plugin Code","text":"<pre><code>from janito.plugins.base import Plugin, PluginMetadata, PluginResource\nfrom janito.tools.tool_base import ToolBase, ToolPermissions\nfrom typing import Dict, Any\nimport requests\n\n# Weather tool that uses an external API\nclass WeatherTool(ToolBase):\n    tool_name = \"get_weather\"\n    permissions = ToolPermissions(read=True, write=False, execute=True)\n\n    def __init__(self):\n        super().__init__()\n        self.api_key = None\n\n    def run(self, city: str, units: str = \"metric\") -&gt; str:\n        \"\"\"Get current weather for a city.\"\"\"\n        if not self.api_key:\n            return \"Error: Weather API key not configured. Please set api_key in plugin configuration.\"\n\n        try:\n            url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&amp;appid={self.api_key}&amp;units={units}\"\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n\n            data = response.json()\n            temp = data[\"main\"][\"temp\"]\n            description = data[\"weather\"][0][\"description\"]\n\n            unit_symbol = \"\u00b0C\" if units == \"metric\" else \"\u00b0F\"\n            return f\"Current weather in {city}: {temp}{unit_symbol}, {description}\"\n\n        except requests.RequestException as e:\n            return f\"Error retrieving weather data: {str(e)}\"\n        except KeyError as e:\n            return f\"Error parsing weather data: {str(e)}\"\n\n# Define the plugin\nclass WeatherPlugin(Plugin):\n    def __init__(self):\n        super().__init__()\n        self.weather_tool = WeatherTool()\n\n    def get_metadata(self) -&gt; PluginMetadata:\n        return PluginMetadata(\n            name=\"weather\",\n            version=\"1.0.0\",\n            description=\"Weather information plugin\",\n            author=\"Janito Team\",\n            license=\"MIT\",\n            homepage=\"https://github.com/janito/plugins/weather\",\n            dependencies=[\"requests\"]\n        )\n\n    def get_tools(self):\n        return [WeatherTool]\n\n    def initialize(self):\n        # Load configuration on startup\n        config = self.get_config()\n        if config and \"api_key\" in config:\n            self.weather_tool.api_key = config[\"api_key\"]\n\n    def get_config_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"Return JSON schema for plugin configuration.\"\"\"\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"api_key\": {\n                    \"type\": \"string\",\n                    \"description\": \"OpenWeatherMap API key\",\n                    \"minLength\": 32\n                },\n                \"default_units\": {\n                    \"type\": \"string\",\n                    \"description\": \"Default temperature units (metric/imperial)\",\n                    \"enum\": [\"metric\", \"imperial\"],\n                    \"default\": \"metric\"\n                }\n            },\n            \"required\": [\"api_key\"]\n        }\n\n    def get_resources(self) -&gt; list:\n        return [\n            PluginResource(\n                name=\"get_weather\",\n                type=\"tool\",\n                description=\"Retrieve current weather information for cities\"\n            )\n        ]\n\n# Register the plugin\nclass PLUGIN_CLASS(WeatherPlugin):\n    pass\n</code></pre>"},{"location":"plugins/examples/intermediate/#configuration","title":"Configuration","text":"<p>Configure the plugin with your API key in <code>janito.json</code>:</p> <pre><code>{\n  \"plugins\": {\n    \"load\": {\n      \"weather\": true\n    },\n    \"config\": {\n      \"weather\": {\n        \"api_key\": \"your_openweathermap_api_key_here\",\n        \"default_units\": \"metric\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"plugins/examples/intermediate/#usage","title":"Usage","text":"<pre><code>{\n  \"tool\": \"get_weather\",\n  \"city\": \"London\",\n  \"units\": \"metric\"\n}\n</code></pre>"},{"location":"plugins/examples/intermediate/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ul> <li>External API Integration: Using the <code>requests</code> library to call external services</li> <li>Configuration: Defining a schema and accessing configuration values</li> <li>Error Handling: Robust error handling for network requests and data parsing</li> <li>Initialization: Using <code>initialize()</code> to set up the plugin on load</li> <li>Dependencies: Declaring external package dependencies</li> <li>Resource Declaration: Explicitly defining provided resources</li> </ul> <p>This intermediate example shows how to create plugins with external dependencies, configuration, and real-world functionality, preparing you for more complex plugin development.</p>"},{"location":"reference/api/","title":"API Reference","text":"<p>Welcome to the API reference for this project. This document provides an overview of the main classes and their locations within the codebase. Use this as a starting point for understanding and extending the core functionality.</p>"},{"location":"reference/api/#core-modules-and-main-classes","title":"Core Modules and Main Classes","text":""},{"location":"reference/api/#janitoagentconfig","title":"janito.agent.config","text":"<ul> <li>SingletonMeta: Metaclass for singleton pattern.</li> <li>BaseConfig: Base configuration class.</li> <li>FileConfig: File-based configuration.</li> <li>EffectiveConfig: Represents the effective configuration.</li> </ul>"},{"location":"reference/api/#janitoagentconversation","title":"janito.agent.conversation","text":"<ul> <li>ConversationHandler: Manages conversation state and flow.<ul> <li><code>__init__</code>: Initializes the handler with configuration and state.</li> <li><code>handle_conversation</code>: Processes a conversation turn and updates state.</li> <li><code>api_call</code>: Makes a direct API call for conversation handling.</li> </ul> </li> </ul>"},{"location":"reference/api/#janitoagentconversation_exceptions","title":"janito.agent.conversation_exceptions","text":"<ul> <li>MaxRoundsExceededError: Raised when conversation round limit is exceeded.</li> <li>EmptyResponseError: Raised when no response is generated.</li> <li>ProviderError: Raised for provider-specific errors.</li> </ul>"},{"location":"reference/api/#janitoagentmessage_handler","title":"janito.agent.message_handler","text":"<ul> <li>QueueMessageHandler: Handles message queuing.</li> </ul>"},{"location":"reference/api/#janitoagentopenai_client","title":"janito.agent.openai_client","text":"<ul> <li>Agent: Main agent class for OpenAI integration.<ul> <li><code>__init__</code>: Initializes the agent with model and API settings.</li> <li><code>chat</code>: Sends a list of messages to the LLM and returns the response.</li> <li><code>usage_history</code>: Tracks and returns usage statistics.</li> </ul> </li> </ul>"},{"location":"reference/api/#janitoagentprofile_manager","title":"janito.agent.profile_manager","text":"<ul> <li>AgentProfileManager: Manages agent profiles and prompt templates (currently only the \"base\" profile is supported).<ul> <li><code>__init__</code>: Loads and initializes profile data.</li> <li><code>set_role</code>: Sets the current agent role.</li> <li><code>render_prompt</code>: Renders the prompt template for the agent.</li> <li><code>refresh_prompt</code>: Reloads and refreshes the prompt template.</li> </ul> </li> </ul>"},{"location":"reference/api/#janitoagentqueued_message_handler","title":"janito.agent.queued_message_handler","text":"<ul> <li>QueuedMessageHandler: Handles queued messages.</li> </ul>"},{"location":"reference/api/#janitoagentrich_live","title":"janito.agent.rich_live","text":"<ul> <li>LiveMarkdownDisplay: Displays live markdown output.</li> </ul>"},{"location":"reference/api/#janitoagentrich_message_handler","title":"janito.agent.rich_message_handler","text":"<ul> <li>RichMessageHandler: Handles rich message formatting.</li> </ul>"},{"location":"reference/api/#janitoagentruntime_config","title":"janito.agent.runtime_config","text":"<ul> <li>RuntimeConfig: Runtime configuration derived from BaseConfig.</li> <li>UnifiedConfig: Unified configuration interface.</li> </ul>"},{"location":"reference/api/#janitoagenttool_base","title":"janito.agent.tool_base","text":"<ul> <li>ToolBase: Abstract base class for all tools.</li> </ul>"},{"location":"reference/api/#tool-implementations-janitoagenttools","title":"Tool Implementations (janito.agent.tools)","text":"<p>Each tool inherits from <code>ToolBase</code> and implements a specific function:</p> <ul> <li>AskUserTool</li> <li>CreateDirectoryTool</li> <li>CreateFileTool</li> <li>FetchUrlTool</li> <li>FindFilesTool</li> <li>GetFileOutlineTool</li> <li>ViewFileTool</li> <li>StoreMemoryTool</li> <li>RetrieveMemoryTool</li> <li>MoveFileTool</li> <li>PyCompileFileTool</li> <li>RemoveDirectoryTool</li> <li>RemoveFileTool</li> <li>ReplaceFileTool</li> <li>ReplaceTextInFileTool</li> <li>RunBashCommandTool</li> <li>RunPythonCommandTool</li> <li>SearchFilesTool</li> </ul>"},{"location":"reference/api/#cli-and-web-interfaces","title":"CLI and Web Interfaces","text":""},{"location":"reference/api/#janitocli","title":"janito.cli","text":"<ul> <li>CLI entry points and utilities for command-line usage.</li> </ul> <p>For detailed class and method documentation, see the source code or future expanded API docs.</p>"},{"location":"reference/azure-openai/","title":"Using Azure OpenAI with Janito","text":"<p>Janito supports models hosted on Azure OpenAI in addition to OpenAI-compatible endpoints.</p>"},{"location":"reference/azure-openai/#configuration-steps","title":"Configuration Steps","text":"<ol> <li> <p>Set your Azure OpenAI endpoint:    Set the <code>base_url</code> to your Azure OpenAI endpoint, for example:    <code>https://YOUR-RESOURCE-NAME.openai.azure.com/openai/deployments/YOUR-DEPLOYMENT-NAME</code></p> </li> <li> <p>Set your Azure API key:    Use <code>--set-api-key</code> or add it to your config file:    <code>bash    janito --set-api-key YOUR_AZURE_OPENAI_KEY</code></p> </li> <li> <p>(Optional) Set API version:    If you need a specific API version, set <code>azure_openai_api_version</code> (default: <code>2023-05-15</code>).    <code>bash    janito --set azure_openai_api_version=2023-05-15</code></p> </li> </ol>"},{"location":"reference/azure-openai/#example-configuration","title":"Example Configuration","text":"<p>Here is an example of the relevant configuration keys:</p> <pre><code>api_key = \"YOUR_AZURE_OPENAI_KEY\"\nbase_url = \"https://YOUR-RESOURCE-NAME.openai.azure.com/openai/deployments/YOUR-DEPLOYMENT-NAME\"\nazure_openai_api_version = \"2023-05-15\"  # Optional\n</code></pre>"},{"location":"reference/azure-openai/#notes","title":"Notes","text":"<ul> <li>You can use either local or global config for these settings.</li> <li>For more information, see the main README and release notes.</li> </ul>"},{"location":"reference/cli-options/","title":"\ud83c\udfc1 Janito CLI Options","text":"<p>This page documents all command-line options for Janito, as shown by <code>janito --help</code>. These options override configuration for a single session and do not persist changes to config files unless you use <code>--set</code> or a custom config file with <code>-c</code>.</p> <p>Syntax: <code>janito [options] [prompt]</code></p>"},{"location":"reference/cli-options/#overview","title":"\ud83d\udca1 Overview","text":"<p>These options are useful for one-off runs, scripting, or experimentation. They take precedence over config files for the current invocation only.</p>"},{"location":"reference/cli-options/#options","title":"\u2699\ufe0f Options","text":"Option Description <code>prompt</code> Prompt to submit (optional positional argument) <code>-h</code>, <code>--help</code> Show this help message and exit <code>-c NAME</code>, <code>--config NAME</code> Use custom configuration file <code>~/.janito/configs/NAME.json</code> instead of the default config.json <code>--verbose-api</code> Print API calls and responses of LLM driver APIs for debugging/tracing. <code>--verbose-tools</code> Print info messages for tool execution in tools adapter. <code>--verbose-agent</code> Print info messages for agent event and message part handling. <code>-z</code>, <code>--zero</code> IDE zero mode: disables system prompt &amp; all tools for raw LLM interaction <code>-u</code>, <code>--unrestricted</code> Unrestricted mode: disable path security and URL whitelist restrictions (DANGEROUS). See Security for details. <code>--multi</code> Start chat mode with multiline input as default (no need for /multi command) <code>-r</code>, <code>--read</code> Enable tools that require read permissions (default: off) <code>-w</code>, <code>--write</code> Enable tools that require write permissions (default: off) <code>-x</code>, <code>--exec</code> Enable execution/run tools (allows running code or shell commands from the CLI). (default: off) <code>--unset KEY</code> Unset (remove) a config key <code>--version</code> Show program's version number and exit <code>--list-tools</code> List all registered tools <code>--show-config</code> Show the current config and config file path <code>--list-config</code> List all config files (default and custom) <code>--list-providers</code> List supported LLM providers <code>-l</code>, <code>--list-models</code> List all supported models <code>--set-api-key API_KEY</code> Set API key for the provider (requires -p PROVIDER) <code>--set KEY=VALUE</code> Set a config key <code>-s SYSTEM_PROMPT</code>, <code>--system SYSTEM_PROMPT</code> Set a system prompt <code>-S</code>, <code>--show-system</code> Show the resolved system prompt for the main agent <code>-p PROVIDER</code>, <code>--provider PROVIDER</code> Select the provider <code>-m MODEL</code>, <code>--model MODEL</code> Select the model (supports <code>model@provider</code> syntax) <code>-t TEMPERATURE</code>, <code>--temperature TEMPERATURE</code> Set the temperature <code>-v</code>, <code>--verbose</code> Print extra information before answering <code>-R</code>, <code>--raw</code> Print the raw JSON response from the OpenAI API (if applicable) <code>--effort {low, medium, high, none}</code> Set the reasoning effort for models that support it (low, medium, high, none) <code>-e</code>, <code>--event-log</code> Enable event logging to the system bus <code>--event-debug</code> Print debug info on event subscribe/submit methods"},{"location":"reference/cli-options/#usage-example","title":"\ud83d\udc68\u200d\ud83d\udcbb Usage Example","text":"<pre><code>janito [options] [prompt]\njanito -p openai -m gpt-3.5-turbo \"Your prompt here\"\njanito -m gpt-4@openai \"Your prompt here\"  # Using model@provider syntax\njanito -c myproject -p openai \"Prompt for my project (uses ~/.janito/configs/myproject.json)\"\njanito --list-tools\njanito --multi  # Start chat mode with multiline input as default\njanito -u -x --read --write \"Run a tool with unrestricted paths (DANGEROUS)\"\n</code></pre>"},{"location":"reference/cli-options/#enabling-tool-permissions","title":"\u26a0\ufe0f Enabling Tool Permissions","text":"<p>By default, tools that can read, write, or execute code are disabled for safety. You can enable these permissions using individual flags or a convenient shortcut:</p>"},{"location":"reference/cli-options/#individual-permission-flags","title":"Individual Permission Flags","text":"<ul> <li><code>-r</code>, <code>--read</code>: Enable tools that require read permissions</li> <li><code>-w</code>, <code>--write</code>: Enable tools that require write permissions  </li> <li><code>-x</code>, <code>--exec</code>: Enable execution/run tools (code execution, shell commands including <code>run_bash_command</code> and <code>run_powershell_command</code>)</li> </ul>"},{"location":"reference/cli-options/#quick-permission-shortcut","title":"Quick Permission Shortcut","text":"<p>Use <code>/rwx</code> prefix to enable all permissions at once:</p> <pre><code>janito /rwx \"Create a Python script and run it\"\n</code></pre>"},{"location":"reference/cli-options/#examples","title":"Examples","text":"<pre><code># Enable all permissions individually\njanito -r -w -x \"Create and run a Python script\"\n\n# Enable only execution tools\njanito -x \"Run this code: print('Hello, world!')\"\n\n# Enable read and write tools\njanito -r -w \"Read a file and create a new one\"\n</code></pre> <p>Warning: Enabling execution tools allows running arbitrary code or shell commands. Only use these options if you trust your prompt and environment.</p>"},{"location":"reference/cli-options/#disabling-path-security","title":"\u26a0\ufe0f Disabling Path Security","text":"<p>By default, all file and directory arguments to tools are restricted to the working directory (see <code>--workdir</code>). To disable this security and allow any path (including system files), use the <code>-u</code> or <code>--unrestricted-paths</code> flag:</p> <pre><code>janito -u \"Do something with C:/Windows/System32/hosts\"\n</code></pre> <p>Warning: Disabling path security is extremely dangerous. Only use <code>--unrestricted-paths</code> if you trust your prompt, tools, and environment.</p> <p>This page is generated from the output of <code>janito --help</code>.</p>"},{"location":"reference/cli-options/#modelprovider-syntax","title":"\ud83d\udd04 Model@Provider Syntax","text":"<p>The <code>-m</code>/<code>--model</code> option supports a convenient <code>model@provider</code> syntax that allows you to specify both the model and provider in a single argument:</p> <pre><code># Traditional approach (two arguments)\njanito -p openai -m gpt-4 \"Your prompt\"\n\n# New syntax (single argument) - equivalent to above\njanito -m gpt-4@openai \"Your prompt\"\n</code></pre>"},{"location":"reference/cli-options/#benefits","title":"Benefits","text":"<ul> <li>Shorter commands: Combine model and provider selection</li> <li>Consistent with other tools: Familiar syntax used by tools like Docker</li> <li>Backward compatible: Existing <code>-p provider -m model</code> syntax still works</li> </ul>"},{"location":"reference/cli-options/#examples_1","title":"Examples","text":"<pre><code># Use GPT-4 with OpenAI\njanito -m gpt-4@openai \"Explain quantum computing\"\n\n# Use Claude with Anthropic\njanito -m claude-3-5-sonnet-20241022@anthropic \"Write a Python function\"\n\n# Use Kimi with Moonshot\njanito -m kimi-k1-8k@moonshot \"Translate this to Chinese\"\n\n# Complex model names work too\njanito -m gpt-4-turbo-preview@openai \"Debug this code\"\n</code></pre>"},{"location":"reference/cli-options/#notes","title":"Notes","text":"<ul> <li>If you specify both <code>-m model@provider</code> and <code>-p provider</code>, the explicit <code>-p</code> flag takes precedence</li> <li>Multiple <code>@</code> symbols are handled by splitting on the last <code>@</code> (e.g., <code>model@with@symbols@provider</code> \u2192 model: <code>model@with@symbols</code>, provider: <code>provider</code>)</li> <li>Empty parts are ignored (e.g., <code>@provider</code> or <code>model@</code> won't set the provider)</li> </ul>"},{"location":"reference/cli-options/#about-effort","title":"\ud83e\udde0 About <code>--effort</code>","text":"<p>The <code>--effort</code> option allows you to set the reasoning effort for models that support it. This can influence how much computational or logical effort the model applies to your prompt. The available values are:</p> <ul> <li><code>low</code>: Minimal reasoning effort (faster, less detailed)</li> <li><code>medium</code>: Moderate reasoning effort (default for some models)</li> <li><code>high</code>: Maximum reasoning effort (slower, more detailed)</li> <li><code>none</code>: Disables special reasoning effort (model default)</li> </ul> <p>Note: Not all models or providers support this option. If unsupported, the option may be ignored.</p>"},{"location":"reference/cli-options/#configuration-keys","title":"\ud83d\udd27 Configuration Keys","text":"<p>The <code>--set</code> command supports the following configuration keys:</p> Key Description Example <code>provider</code> Set the default provider <code>--set provider=openai</code> <code>model</code> Set the default model <code>--set model=gpt-4.1</code> <code>max_tokens</code> Set maximum tokens <code>--set max_tokens=4000</code> <code>base_url</code> Set custom API base URL <code>--set base_url=https://api.example.com</code> <code>tool_permissions</code> Set tool permission level <code>--set tool_permissions=rwx</code> <code>disabled_tools</code> Disable specific tools <code>--set disabled_tools=ask_user,python_code_run</code> <p>For more details on disabling tools, see the Disabling Tools Guide.</p>"},{"location":"reference/message-handler-model/","title":"Message Handler Model","text":"<p>This document describes the message handler model used in Janito for both CLI and web output. For details on the styled terminal output, see the Rich Message Handler. The model ensures that all output\u2014whether from tools or from assistant/LLM content\u2014is routed through a single, consistent API, simplifying both backend and frontend logic.</p>"},{"location":"reference/message-handler-model/#overview","title":"Overview","text":"<ul> <li>Single handler for all output: tools, assistant, or system messages.</li> <li>Consistent message format: every message is sent with a message string and a message type.</li> <li>Easy to extend: add new message types or styles as needed.</li> </ul>"},{"location":"reference/message-handler-model/#message-format","title":"Message Format","text":"<p>A message is always represented as:</p> <ul> <li>message: The text to display (string)</li> <li>msg_type: The type/category of the message (string)</li> </ul> <p>For queue/web integration, each message is sent as a tuple:</p> <pre><code>('message', message, msg_type)\n</code></pre>"},{"location":"reference/message-handler-model/#common-msg_type-values","title":"Common <code>msg_type</code> Values","text":"<ul> <li><code>info</code>: Informational or neutral messages (default)</li> <li><code>success</code>: Successful operations (e.g., file created)</li> <li><code>error</code>: Errors or failures</li> <li><code>content</code>: Assistant/LLM responses or natural language content</li> <li>(You can add more types as needed)</li> </ul>"},{"location":"reference/message-handler-model/#handler-api","title":"Handler API","text":""},{"location":"reference/message-handler-model/#python-backend","title":"Python (Backend)","text":"<pre><code>handler.handle_message(msg, msg_type=None)\n</code></pre> <ul> <li><code>msg</code>: Either a string (content) or a dict with <code>{\"type\": ..., \"message\": ...}</code> (tool progress)</li> <li><code>msg_type</code>: Optional; used if <code>msg</code> is a string</li> </ul>"},{"location":"reference/message-handler-model/#example-usage","title":"Example Usage","text":"<pre><code># Tool output\nhandler.handle_message({\"type\": \"success\", \"message\": \"\u2705 File created\"})\n\n# Assistant/content output\nhandler.handle_message(\"Here is your summary...\", msg_type=\"content\")\n</code></pre>"},{"location":"reference/message-handler-model/#web-queue-integration","title":"Web Queue Integration","text":"<ul> <li>All output is sent to the frontend as:</li> <li><code>('message', message, msg_type)</code></li> <li>The frontend displays the message with styling based on <code>msg_type</code>.</li> </ul>"},{"location":"reference/message-handler-model/#frontend-handling","title":"Frontend Handling","text":"<ul> <li>Render all messages using a single handler/component.</li> <li>Style by <code>msg_type</code> (e.g., green for <code>success</code>, red for <code>error</code>, etc).</li> <li>No need to distinguish tool/content at the backend\u2014just use <code>msg_type</code>.</li> </ul>"},{"location":"reference/message-handler-model/#benefits","title":"Benefits","text":"<ul> <li>Consistent: Same styling and logic everywhere.</li> <li>Extensible: Add more message types or custom styles easily.</li> <li>Simple: Less boilerplate, easier to maintain.</li> </ul> <p>This model applies to both CLI and web output, making the Janito user experience clean, predictable, and easy to evolve.</p>"},{"location":"reference/rich-message-handler/","title":"Rich Message Handler","text":"<p>The Rich Message Handler is responsible for rendering all output (tool, agent, system) in the terminal using the rich library for styled and colorized output.</p>"},{"location":"reference/rich-message-handler/#terminal-compatibility","title":"Terminal Compatibility","text":"<p>Janito is designed to work with modern Unicode-capable terminals. Windows Terminal is the primary supported terminal on Windows, providing the best experience with full Unicode support, colors, and styling. Other supported terminals include:</p> <ul> <li>Windows: Windows Terminal (recommended), PowerShell, Command Prompt</li> <li>macOS: Terminal.app, iTerm2, Alacritty, WezTerm</li> <li>Linux: GNOME Terminal, Konsole, Alacritty, WezTerm, xterm-compatible terminals</li> </ul>"},{"location":"reference/rich-message-handler/#shell-command-support","title":"Shell Command Support","text":"<p>Janito includes native support for shell command execution: - Bash commands - Execute via <code>run_bash_command</code> tool (requires bash available in PATH) - PowerShell commands - Execute via <code>run_powershell_command</code> tool (uses PowerShell Core on non-Windows platforms)</p> <p>Both tools provide live output streaming, timeout handling, and security controls for safe command execution.</p> <p>For optimal display of charts, images, and styled output, ensure your terminal supports Unicode and 256 colors.</p>"},{"location":"reference/rich-message-handler/#features","title":"Features","text":"<ul> <li>Unified output: Handles all message types (tool, agent, system) through a single API.</li> <li>Styled messages: Uses colors and styles for different message types (info, success, error, warning, content, stdout, stderr).</li> <li>Markdown rendering: Renders assistant/content output as Markdown for improved readability.</li> <li>Trust mode: Suppresses all output except assistant/content if the <code>trust</code> config is enabled.</li> </ul>"},{"location":"reference/rich-message-handler/#supported-message-types","title":"Supported Message Types","text":"<ul> <li><code>content</code>: Rendered as Markdown (for assistant/LLM responses)</li> <li><code>info</code>: Cyan text</li> <li><code>success</code>: Bold green text</li> <li><code>error</code>: Bold red text</li> <li><code>warning</code>: Bold yellow text</li> <li><code>progress</code>: (Custom handler, e.g., progress bars)</li> <li><code>stdout</code>: Dark green background</li> <li><code>stderr</code>: Dark red background</li> </ul>"},{"location":"reference/rich-message-handler/#example-usage","title":"Example Usage","text":"<pre><code>handler = RichMessageHandler()\nhandler.handle_message({\"type\": \"success\", \"message\": \"\u2705 File created\"})\nhandler.handle_message({\"type\": \"content\", \"message\": \"**Hello!** This is Markdown.\"})\n</code></pre>"},{"location":"reference/rich-message-handler/#integration","title":"Integration","text":"<ul> <li>Used as the default message handler for CLI output in Janito.</li> <li>Honors the <code>trust</code> config to suppress non-content output for safer automation.</li> <li>Extensible: Add new message types or styles as needed.</li> </ul> <p>For the overall message handler model, see the Message Handler Model.</p>"},{"location":"tools/search-text/","title":"\ud83d\udd0d search_text","text":"<p>Search for a text query in all files within one or more directories or file paths and return matching lines or counts. Respects <code>.gitignore</code>.</p>"},{"location":"tools/search-text/#signature","title":"Signature","text":"<pre><code>search_text(\n    paths: str,\n    query: str,\n    use_regex: bool = False,\n    case_sensitive: bool = False,\n    max_depth: int = 0,\n    max_results: int = 100,\n    count_only: bool = False,\n) -&gt; str\n</code></pre>"},{"location":"tools/search-text/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>paths</code> <code>str</code> required Space-separated list of file or directory paths to search in. <code>query</code> <code>str</code> required Text or regular expression to search for. Must not be empty. <code>use_regex</code> <code>bool</code> <code>False</code> If <code>True</code>, treat <code>query</code> as a regular expression. If <code>False</code>, treat as plain text. <code>case_sensitive</code> <code>bool</code> <code>False</code> If <code>False</code>, perform a case-insensitive search. <code>max_depth</code> <code>int</code> <code>0</code> Maximum directory depth to search. <code>0</code> = unlimited recursion. <code>1</code> = top-level only. <code>max_results</code> <code>int</code> <code>100</code> Maximum number of matching lines to return. <code>0</code> = no limit. <code>count_only</code> <code>bool</code> <code>False</code> If <code>True</code>, return only match counts instead of the actual lines."},{"location":"tools/search-text/#returns","title":"Returns","text":"<ul> <li>Lines mode (<code>count_only=False</code>): newline-separated list of matches, each formatted as:   <code>filepath:lineno: line content</code></li> <li>Count mode (<code>count_only=True</code>): summary of matches per file plus a total.</li> </ul>"},{"location":"tools/search-text/#examples","title":"Examples","text":""},{"location":"tools/search-text/#plain-text-search","title":"Plain-text search","text":"<pre><code>search_text(paths=\"src\", query=\"TODO\")\n</code></pre>"},{"location":"tools/search-text/#regex-search","title":"Regex search","text":"<pre><code>search_text(paths=\"src tests\", query=r\"def\\s+\\w+\", use_regex=True)\n</code></pre>"},{"location":"tools/search-text/#case-insensitive-count","title":"Case-insensitive count","text":"<pre><code>search_text(paths=\"docs\", query=\"janito\", case_sensitive=False, count_only=True)\n</code></pre>"},{"location":"tools/search-text/#limit-depth","title":"Limit depth","text":"<pre><code>search_text(paths=\".\", query=\"import\", max_depth=1)\n</code></pre>"},{"location":"tools/search-text/#unlimited-results","title":"Unlimited results","text":"<pre><code>search_text(paths=\".\", query=\"print\", max_results=0)\n</code></pre>"},{"location":"tools/show-image-grid/","title":"show_image_grid","text":"<p>Display multiple images in a grid inline in the terminal using rich.</p>"},{"location":"tools/show-image-grid/#terminal-compatibility","title":"Terminal Compatibility","text":"<p>Image grid display requires a terminal that supports inline image rendering. Windows Terminal is the primary supported terminal for the optimal multi-image display experience. Performance and display quality depend on your terminal's image rendering capabilities.</p> <p>Arguments:</p> <ul> <li>paths (list[str]): List of image file paths.</li> <li>columns (int, optional): Number of columns in the grid. Default: 2.</li> <li>width (int, optional): Max width for each image cell. Default: None (auto).</li> <li>height (int, optional): Max height for each image cell. Default: None (auto).</li> <li>preserve_aspect (bool, optional): Preserve aspect ratio. Default: True.</li> </ul> <p>Returns:</p> <ul> <li>Status string summarizing the grid display.</li> </ul> <p>Example Usage:</p> <ul> <li><code>show_image_grid(paths=[\"img/tux.png\", \"img/tux_display.png\"], columns=2, width=40)</code></li> </ul>"},{"location":"tools/show-image/","title":"show_image","text":"<p>Display an image inline in the terminal using the rich library.</p>"},{"location":"tools/show-image/#terminal-compatibility","title":"Terminal Compatibility","text":"<p>Image display requires a terminal that supports inline image rendering. Windows Terminal is the primary supported terminal for the best image display experience. Other modern terminals with image support may also work, but results can vary depending on terminal capabilities and configuration.</p> <p>Arguments: - path (str): Path to the image file. - width (int, optional): Target width in terminal cells. If unset, auto-fit. - height (int, optional): Target height in terminal rows. If unset, auto-fit. - preserve_aspect (bool, optional): Preserve aspect ratio. Default: True.</p> <p>Returns: - Status message indicating display result or error details.</p> <p>Example Usage: - show a PNG: <code>show_image(path=\"img/tux.png\", width=60)</code> - auto-fit: <code>show_image(path=\"~/Pictures/photo.jpg\")</code></p>"}]}